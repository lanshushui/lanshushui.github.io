<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>React Native项目开发-步骤3</title>
    <url>/post/e4981006.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE4MTAx">React Native 启动速度优化 ——JS 篇（全网最全，值得收藏）</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kMTQ0ZjBmMmRkNjI=">React Native 使用官方 Metro 进行 Android 分包</span></p>
<p>本篇目的是进行 bundle 拆包，放进 android 项目中，android 项目能正常多 bundle 运行解析展示</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbnNodXNodWkvUmVhY3ROYXRpdmVBbmRyb2lk">我的 Android 项目</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2xhbnNodXNodWkvUmVhY3ROYXRpdmVUcw==">我的 JS 项目</span></p>
<p><span id="more"></span></p>
<p>React Native 打包形成的 Bundle 文件的内容从上到下依次是：<br />
<strong>Polyfills</strong>：定义基本的 JS 环境（如：__d () 函数、__r () 函数、<strong>DEV</strong> 变量等）<br />
<strong>Module 定义</strong>：使用__d () 函数定义所有用到的模块，该函数为每个模块赋予了一个模块 ID，模块之间的依赖关系都是通过这个 ID 进行关联的。<br />
<strong>Require 调用</strong>：使用__r () 函数引用根模块。</p>
<h2 id="rn项目操作"><a class="anchor" href="#rn项目操作">#</a> RN 项目操作</h2>
<p>1. 根目录创建 metro.common.config.js 文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>getDefaultConfig<span class="token punctuation">,</span> mergeConfig<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@react-native/metro-config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token literal-property property">serializer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function-variable function">createModuleIdFactory</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token comment">// 根据文件的相对路径构建 ModuleId</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">const</span> projectRootPath <span class="token operator">=</span> __dirname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">let</span> moduleId <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>projectRootPath<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token comment">// 把 moduleId 写入 idList.txt 文件，记录公有模块 id</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                fs<span class="token punctuation">.</span><span class="token function">appendFileSync</span><span class="token punctuation">(</span><span class="token string">'./idList.txt'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>moduleId<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">return</span> moduleId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span><span class="token function">getDefaultConfig</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>2. 根目录创建 common.js 文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>3. 新增【bundle-common】命令并执行</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"bundle-common"</span><span class="token operator">:</span><span class="token string">"react-native bundle --platform android  --dev false --entry-file common.js --bundle-output ./output/common.android.bundle --config metro.common.config.js"</span></pre></td></tr></table></figure><p>----- 已生成 common.android.bundle 文件，下面生成 index.android.bundle 文件 ---------</p>
<p>4. 修改 metro.config.js 文件</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>getDefaultConfig<span class="token punctuation">,</span> mergeConfig<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'@react-native/metro-config'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 读取 idList.txt，转换为数组</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">const</span> idList <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'./idList.txt'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">function</span> <span class="token function">createModuleId</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">const</span> projectRootPath <span class="token operator">=</span> __dirname<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">let</span> moduleId <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>projectRootPath<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> moduleId<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token literal-property property">serializer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function-variable function">createModuleIdFactory</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">return</span> <span class="token function">createModuleId</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function-variable function">processModuleFilter</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">modules</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">const</span> mouduleId <span class="token operator">=</span> <span class="token function">createModuleId</span><span class="token punctuation">(</span>modules<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token comment">// 通过 mouduleId 过滤在 common.bundle 里的数据</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>idList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>mouduleId<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'createModuleIdFactory path'</span><span class="token punctuation">,</span> mouduleId<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">mergeConfig</span><span class="token punctuation">(</span><span class="token function">getDefaultConfig</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>5. 执行【bundle-android】命令</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token string-property property">"bundle-android"</span><span class="token operator">:</span><span class="token string">"react-native bundle --platform android --dev false --entry-file index.js --bundle-output ./output/index.android.bundle --assets-dest ./output"</span></pre></td></tr></table></figure><p>6. 手动删除 【index.android.bundle】文件 的 Polyfills 部分 （因为 common.bundle 已经定义了基本的 JS 环境）</p>
<p><strong>完成，已生成 index.android.bundle 和 common.android.bundle 两个文件</strong></p>
<h2 id="android项目操作"><a class="anchor" href="#android项目操作">#</a> Android 项目操作</h2>
<p>1. 将 common.android.bundle 和 index.android.bundle 放在 assets 文件夹</p>
<p>2.ReactNativeHost 内部类重写 getBundleAssetName () 方法，返回 &quot;common.android.bundle&quot;。让 reactContext 创建时加载基础包</p>
<p>3. 改造 Application 的 onCreate 方法</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    SoLoader<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 监听 common.bundle 文件加载完成，回调时加载【业务 bundle】</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    reactNativeHost<span class="token punctuation">.</span>reactInstanceManager<span class="token punctuation">.</span><span class="token function">addReactInstanceEventListener</span> <span class="token punctuation">&#123;</span> contect <span class="token operator">-></span></pre></td></tr><tr><td data-num="6"></td><td><pre>        contect<span class="token punctuation">.</span>catalystInstance<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">loadScriptFromAssets</span><span class="token punctuation">(</span>assets<span class="token punctuation">,</span> bundle<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 创建 reactContext，内部会启动加载【基础 bundle】</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    reactNativeHost<span class="token punctuation">.</span>reactInstanceManager<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">createReactContextInBackground</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>4. 重写 MainActivity 的<strong> createReactActivityDelegate ()</strong>，返回自定义的 MainReactActivityDelegate 类，重写 loadApp 方法，当业务 bundle 加载完成后才调用 <strong>super.loadApp(appKey)</strong></p>
<p>只写下基本思路，还需要实现各种回调监听哈～</p>
<p>​</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>React-Native调试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native项目开发-步骤2</title>
    <url>/post/939f2090.html</url>
    <content><![CDATA[<p>本篇目的是生成 bundle 文件，放进 android 项目中，android 项目能正常运行解析展示</p>
<p><span id="more"></span></p>
<h2 id="rn项目操作"><a class="anchor" href="#rn项目操作">#</a> RN 项目操作</h2>
<p>1. 在根项目创建个【output】文件夹</p>
<p>2. 终端执行命令 【<em>下面的命令在 package.json 中抽象成一个 bundle-android 命令，使用更方便</em>】</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre>yarn react<span class="token operator">-</span>native bundle <span class="token operator">--</span>platform android <span class="token operator">--</span>dev <span class="token boolean">false</span> <span class="token operator">--</span>entry<span class="token operator">-</span>file index<span class="token punctuation">.</span>js <span class="token operator">--</span>bundle<span class="token operator">-</span>output <span class="token punctuation">.</span><span class="token operator">/</span>output<span class="token operator">/</span>index<span class="token punctuation">.</span>android<span class="token punctuation">.</span>bundle <span class="token operator">--</span>assets<span class="token operator">-</span>dest <span class="token punctuation">.</span><span class="token operator">/</span>output</pre></td></tr></table></figure><p>3. 生成对应 bundle 文件和图片文件夹</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/fb997caf65cadc08.png" alt="" /></p>
<h2 id="android项目操作"><a class="anchor" href="#android项目操作">#</a> Android 项目操作</h2>
<blockquote>
<p>1. 在 app 模块下增加 assets 文件夹，放入 bundle 文件</p>
</blockquote>
<blockquote>
<p>2. 把生成的图片放入【drawable】文件夹，注意不是【drawable-mdpi】文件夹</p>
</blockquote>
<blockquote>
<p>3. 运行 app，正常解析展示</p>
</blockquote>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/f8b2a4d302c63846.png" alt="" /></p>
<p>&lt;font color=&quot;white&quot;&gt;  &lt;/font&gt;</p>
<h2 id="为什么图片放入drawable文件夹而不是drawable-mdpi文件夹"><a class="anchor" href="#为什么图片放入drawable文件夹而不是drawable-mdpi文件夹">#</a> 为什么图片放入【drawable】文件夹，而不是【drawable-mdpi】文件夹</h2>
<p>分析图片解析流程</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/fd3583e3f3f081ac.png" alt="" /></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/06eca95670908b57.png" alt="" /></p>
<p>可以看到调用链最终调用到 ResourceDrawableIdHelper#getResourceDrawableId 方法，</p>
<p>getResourceDrawableId 方法内通过 context.getResources ().getIdentifier (name, &quot;drawable&quot;, context.getPackageName ()) 获取资源 ID，所以图片必须放在【drawable】文件夹</p>
<p>图片类：<strong>react-android 依赖下的 com.facebook.react.views.image.ReactImageView 类</strong></p>
<p>该文章只是为了最快实现功能，所以大部分为硬编码</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>React-Native调试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native原理</title>
    <url>/post/75edac57.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODE4MTAx">React Native 启动速度优化 ——JS 篇（全网最全，值得收藏）</span></p>
<p><span id="more"></span></p>
<h2 id="react启动流程图"><a class="anchor" href="#react启动流程图">#</a> React 启动流程图</h2>
<p><img data-src="/images/reactNativeHost.getReactInstanceManager.png" alt="systrace" /></p>
<h2 id="app如何找到metor服务器"><a class="anchor" href="#app如何找到metor服务器">#</a> APP 如何找到 Metor 服务器</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 保存 sp 的 debug_http_host 即可</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">val</span> mPreferences <span class="token operator">=</span> PreferenceManager<span class="token punctuation">.</span><span class="token function">getDefaultSharedPreferences</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>mPreferences<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"debug_http_host"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"192.168.0.141:8081"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/1dde267ccdb59b07.png" alt="" /></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ReactInstanceManager 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackgroundInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mUseDeveloperSupport <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mJSMainModulePath <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">DeveloperSettings</span> devSettings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">getDevSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Systrace</span><span class="token punctuation">.</span><span class="token function">isTracing</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mBundleLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">handleReloadJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">isPackagerRunning</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackagerStatusCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPackagerStatusFetched</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> packagerIsRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                        <span class="token class-name">UiThreadUtil</span><span class="token punctuation">.</span><span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>packagerIsRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                                <span class="token comment">//Metro 服务器已运行时，跑到这个分支</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">handleReloadJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">hasUpToDateJSBundleInCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>devSettings<span class="token punctuation">.</span><span class="token function">isRemoteJSDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mUseFallbackBundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                                devSettings<span class="token punctuation">.</span><span class="token function">setRemoteJSDebugEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recreateReactContextInBackgroundFromBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">// 从本地加载 JS 文件</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recreateReactContextInBackgroundFromBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token comment">//BridgeDevSupportManager 类</span></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReloadJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token class-name">UiThreadUtil</span><span class="token punctuation">.</span><span class="token function">assertOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token class-name">ReactMarker</span><span class="token punctuation">.</span><span class="token function">logMarker</span><span class="token punctuation">(</span><span class="token class-name">ReactMarkerConstants</span><span class="token punctuation">.</span><span class="token constant">RELOAD</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDevSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackagerConnectionSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDebugServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hideRedboxDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDevSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRemoteJSDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token class-name">PrinterHolder</span><span class="token punctuation">.</span><span class="token function">getPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">ReactDebugOverlayTags</span><span class="token punctuation">.</span><span class="token constant">RN_CORE</span><span class="token punctuation">,</span> <span class="token string">"RNCore: load from Proxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">showDevLoadingViewForRemoteJSEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reloadJSInProxyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token comment">// 无代理，走到这分支</span></pre></td></tr><tr><td data-num="46"></td><td><pre>        <span class="token class-name">PrinterHolder</span><span class="token punctuation">.</span><span class="token function">getPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logMessage</span><span class="token punctuation">(</span><span class="token class-name">ReactDebugOverlayTags</span><span class="token punctuation">.</span><span class="token constant">RN_CORE</span><span class="token punctuation">,</span> <span class="token string">"RNCore: load from Server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token comment">// 获取 url</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token class-name">String</span> bundleURL <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDevServerHelper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDevServerBundleURL</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJSAppBundleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>		<span class="token comment">// 从服务器拉取 JS</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">reloadJSFromServer</span><span class="token punctuation">(</span>bundleURL<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">//DevServerHelper 类</span></pre></td></tr><tr><td data-num="55"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDevServerBundleURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> jsModulePath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createBundleURL</span><span class="token punctuation">(</span>jsModulePath<span class="token punctuation">,</span> <span class="token class-name">DevServerHelper<span class="token punctuation">.</span>BundleType</span><span class="token punctuation">.</span><span class="token constant">BUNDLE</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mPackagerConnectionSettings<span class="token punctuation">.</span><span class="token function">getDebugServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token comment">// 上下对比 可以看到 host 参数是通过 this.mPackagerConnectionSettings.getDebugServerHost () 获取的</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">createBundleURL</span><span class="token punctuation">(</span><span class="token class-name">String</span> mainModuleID<span class="token punctuation">,</span> <span class="token class-name">BundleType</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">boolean</span> modulesOnly<span class="token punctuation">,</span> <span class="token keyword">boolean</span> runModule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token keyword">boolean</span> dev <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDevMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Locale</span><span class="token punctuation">.</span><span class="token constant">US</span><span class="token punctuation">,</span> <span class="token string">"http://%s/%s.%s?platform=android&amp;dev=%s&amp;lazy=%s&amp;minify=%s&amp;app=%s&amp;modulesOnly=%s&amp;runModule=%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> mainModuleID<span class="token punctuation">,</span> type<span class="token punctuation">.</span><span class="token function">typeID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dev<span class="token punctuation">,</span> dev<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getJSMinifyMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mPackageName<span class="token punctuation">,</span> modulesOnly <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">,</span> runModule <span class="token operator">?</span> <span class="token string">"true"</span> <span class="token operator">:</span> <span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token comment">//PackagerConnectionSettings 类</span></pre></td></tr><tr><td data-num="67"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDebugServerHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    <span class="token comment">// 可以看到是从 sp 中取 debug_http_host 字段作为 host</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token class-name">String</span> hostFromSettings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mPreferences<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"debug_http_host"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TextUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>hostFromSettings<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>hostFromSettings<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token class-name">AndroidInfoHelpers</span><span class="token punctuation">.</span><span class="token function">getServerHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mAppContext<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">return</span> host<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="76"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>总结：</p>
<ol>
<li>从最重要的 recreateReactContextInBackgroundInner 方法开始，调用 ReactInstanceManager.this.mDevSupportManager.handleReloadJS () 方法触发加载 JS</li>
<li>BridgeDevSupportManager 类的 handleReloadJS 方法通过 DevServerHelper 类的 getDevServerBundleURL 方法获取 URL</li>
<li>DevServerHelper 类的 getDevServerBundleURL 方法通过 PackagerConnectionSettings 类的 getDebugServerHost 方法获取主机地址</li>
<li>getDebugServerHost 是通过本地 sp 的 debug_http_host 字段获取地址</li>
</ol>
<h2 id="app如何找到本地js文件"><a class="anchor" href="#app如何找到本地js文件">#</a> APP 如何找到本地 JS 文件</h2>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/06/1dde267ccdb59b07.png" alt="" /></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ReactInstanceManager 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackgroundInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mUseDeveloperSupport <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mJSMainModulePath <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">DeveloperSettings</span> devSettings <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">getDevSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Systrace</span><span class="token punctuation">.</span><span class="token function">isTracing</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mBundleLoader <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">handleReloadJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">isPackagerRunning</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackagerStatusCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onPackagerStatusFetched</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> packagerIsRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                        <span class="token class-name">UiThreadUtil</span><span class="token punctuation">.</span><span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>packagerIsRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">handleReloadJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mDevSupportManager<span class="token punctuation">.</span><span class="token function">hasUpToDateJSBundleInCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>devSettings<span class="token punctuation">.</span><span class="token function">isRemoteJSDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mUseFallbackBundle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onJSBundleLoadedFromServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                                <span class="token comment">// 开发模式下 没有开启 Metro 服务器跑到这分支</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                                devSettings<span class="token punctuation">.</span><span class="token function">setRemoteJSDebugEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                                <span class="token class-name">ReactInstanceManager</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recreateReactContextInBackgroundFromBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>                        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">//release 模式下 跑到这分支</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recreateReactContextInBackgroundFromBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackgroundFromBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">recreateReactContextInBackground</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mJavaScriptExecutorFactory<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mBundleLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">recreateReactContextInBackground</span><span class="token punctuation">(</span><span class="token class-name">JavaScriptExecutorFactory</span> jsExecutorFactory<span class="token punctuation">,</span> <span class="token class-name">JSBundleLoader</span> jsBundleLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token class-name">ReactContextInitParams</span> initParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactContextInitParams</span><span class="token punctuation">(</span>jsExecutorFactory<span class="token punctuation">,</span> jsBundleLoader<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mCreateReactContextThread <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 跑到这分支，子线程创建 ReactContext</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">runCreateReactContextOnNewThread</span><span class="token punctuation">(</span>initParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mPendingReactContextInitParams <span class="token operator">=</span> initParams<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">// 子线程创建 ReactContext，</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token comment">//initParams.getJsBundleLoader () 默认值为 JSBundleLoader$1,</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">// 即 com.facebook.react.bridge.JSBundleLoader#createAssetLoader 返回值</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runCreateReactContextOnNewThread</span><span class="token punctuation">(</span><span class="token class-name">ReactContextInitParams</span> initParams<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mCreateReactContextThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ThreadGroup</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token class-name">ReactApplicationContext</span> reactApplicationContext<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        reactApplicationContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createReactContext</span><span class="token punctuation">(</span>initParams<span class="token punctuation">.</span><span class="token function">getJsExecutorFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> initParams<span class="token punctuation">.</span><span class="token function">getJsBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"create_react_context"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre></pre></td></tr><tr><td data-num="59"></td><td><pre><span class="token keyword">private</span> <span class="token class-name">ReactApplicationContext</span> <span class="token function">createReactContext</span><span class="token punctuation">(</span><span class="token class-name">JavaScriptExecutor</span> jsExecutor<span class="token punctuation">,</span> <span class="token class-name">JSBundleLoader</span> jsBundleLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token comment">// 创建 CatalystInstanceImpl</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token class-name">CatalystInstanceImpl</span> catalystInstance <span class="token operator">=</span> catalystInstanceBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    catalystInstance<span class="token punctuation">.</span><span class="token function">runJSBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">//CatalystInstanceImpl 类</span></pre></td></tr><tr><td data-num="66"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runJSBundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mJSBundleLoader<span class="token punctuation">.</span><span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="69"></td><td><pre></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token comment">//JSBundleLoader 类</span></pre></td></tr><tr><td data-num="71"></td><td><pre><span class="token comment">// 使用的是该方法返回的 JSBundleLoader</span></pre></td></tr><tr><td data-num="72"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSBundleLoader</span> <span class="token function">createAssetLoader</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> assetUrl<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> loadSynchronously<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JSBundleLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token class-name">JSBundleLoaderDelegate</span> delegate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="75"></td><td><pre>            <span class="token comment">//delegate 是 CatalystInstanceImpl</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            delegate<span class="token punctuation">.</span><span class="token function">loadScriptFromAssets</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getAssets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> assetUrl<span class="token punctuation">,</span> loadSynchronously<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>            <span class="token keyword">return</span> assetUrl<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre><span class="token comment">//CatalystInstanceImpl</span></pre></td></tr><tr><td data-num="83"></td><td><pre><span class="token comment">//assetURL 参数默认值是  assets://index.android.bundle</span></pre></td></tr><tr><td data-num="84"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadScriptFromAssets</span><span class="token punctuation">(</span><span class="token class-name">AssetManager</span> assetManager<span class="token punctuation">,</span> <span class="token class-name">String</span> assetURL<span class="token punctuation">,</span> <span class="token keyword">boolean</span> loadSynchronously<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mSourceURL <span class="token operator">=</span> assetURL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">jniLoadScriptFromAssets</span><span class="token punctuation">(</span>assetManager<span class="token punctuation">,</span> assetURL<span class="token punctuation">,</span> loadSynchronously<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>总结：</p>
<ol>
<li>从最重要的 recreateReactContextInBackgroundInner 方法开始，子线程调用 createReactContext 方法，</li>
<li>createReactContext 方法内创建 CatalystInstanceImpl 类，并调用 runJSBundle 方法</li>
<li>CatalystInstanceImpl 类的 runJSBundle 方法默认是调用 mJSBundleLoader 的 loadScript 方法</li>
<li>AssetBundleLoader 的 loadScript 方法是调用 CatalystInstanceImpl 的 loadScriptFromAssets 方法，内部触发 JNI 方法</li>
</ol>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>源码分析</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native项目开发-步骤1</title>
    <url>/post/a96712a.html</url>
    <content><![CDATA[<p>网上找到所有教程，包括官方教程都是 生成一个大项目，里面包括 RN，android，IOS 项目，在一个仓库中既有原生代码又有 js 代码。</p>
<p><strong>但实际大型项目开发，肯定是分成 RN 项目，Android 项目，IOS 项目三个项目。</strong></p>
<p>所以这第一篇文档是记录如何实现【分开 RN 项目和 Android 项目】，并在【Android 项目上展示 RN 界面，支持修改 RN 代码后马上刷新界面】</p>
<p><span id="more"></span></p>
<h2 id="制作纯rn项目"><a class="anchor" href="#制作纯rn项目">#</a> 制作纯 RN 项目</h2>
<pre><code>react-native init ReactNativeTs
</code></pre>
<p>使用官方命令，生成个 RN 项目，把 【android】【ios】【test】文件夹删除，就剩下个纯 TS 项目，简简单单</p>
<blockquote>
<p>1. 查看 package.json 文件，记录下 RN 版本</p>
</blockquote>
<pre><code>&quot;dependencies&quot;: &#123;
    &quot;react&quot;: &quot;18.2.0&quot;,
    &quot;react-native&quot;: &quot;0.73.6&quot;
  &#125;
</code></pre>
<blockquote>
<p>2. 记录 node_modules/jsc-android/dist/org 这个路径，这里有 android-jsc 库，android 项目需要依赖这个库</p>
</blockquote>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/05/8d31cb809851face.png" alt="" /></p>
<h2 id="制作纯android项目"><a class="anchor" href="#制作纯android项目">#</a> 制作纯 Android 项目</h2>
<blockquote>
<p>1.AndroidStudio 制作空的 Android 项目</p>
</blockquote>
<blockquote>
<p>2. 在根目录创建个 repo 目录，充当本地仓库。把 RN 项目第二步提及的文件夹复制到该目录下</p>
</blockquote>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/04/05/d5183cdc992acd11.png" alt="" /></p>
<blockquote>
<p>3. 修改 settings.gradle，增加配置 本地仓库 repo 目录</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>dependencyResolutionManagement <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    repositoriesMode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RepositoriesMode<span class="token punctuation">.</span>FAIL_ON_PROJECT_REPOS<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    repositories <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        maven <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 从 node_modules/jsc-android/dist/org 复制来的依赖库</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token function">setUrl</span><span class="token punctuation">(</span> <span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootDir</span></span><span class="token string">/repo"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>4. 修改 app 模块的 build.gradle，增加 react-android 和 jsc 两项依赖</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 要和 RN 项目的 react-native 版本一致</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.facebook.react:react-android:0.73.6"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">//  从 /repo/org/webkit/android-jsc 目录查看具体版本号</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"org.webkit:android-jsc:r250231"</span></span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>&lt;font color=&quot;red&quot;&gt; 为什么 android-jsc 要本地仓库配置，不能像其他依赖库一样从 mavenCentral 中央库拉取呢 ？&lt;/font&gt;</p>
<p><strong>因为 facebook 并没有在 mavenCentral 中央库上发布最新版本号，看了一下 mavenCentral 上 最新是 【Sep 07, 2015】发布的 r174650 版本，无语了</strong></p>
<p>&lt;font color=&quot;white&quot;&gt;  &lt;/font&gt;</p>
<p><strong>----- 项目依赖以上步骤已完成，正式开始编码 ------</strong></p>
<p>&lt;font color=&quot;white&quot;&gt;  &lt;/font&gt;</p>
<blockquote>
<p>5. 自定义 Application，实现 ReactApplication 接口</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> MainApplication <span class="token operator">:</span> <span class="token function">Application</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ReactApplication <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">val</span> reactNativeHost<span class="token operator">:</span> ReactNativeHost <span class="token operator">=</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">DefaultReactNativeHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getPackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>ReactPackage<span class="token operator">></span> <span class="token operator">=</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        ArrayList<span class="token operator">&lt;</span>ReactPackage<span class="token operator">></span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            Arrays<span class="token punctuation">.</span>asList<span class="token operator">&lt;</span>ReactPackage<span class="token operator">></span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token function">MainReactPackage</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getJSMainModuleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"index"</span></span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getUseDeveloperSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">override</span> <span class="token keyword">val</span> isNewArchEnabled<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">override</span> <span class="token keyword">val</span> isHermesEnabled<span class="token operator">:</span> Boolean <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">val</span> reactHost<span class="token operator">:</span> ReactHost</pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getDefaultReactHost</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">,</span> reactNativeHost<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        SoLoader<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>6. 自定义 ReactActivity 子类，连接 Metro 服务器</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> MainActivity <span class="token operator">:</span> <span class="token function">ReactActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> mPreferences<span class="token operator">:</span> SharedPreferences<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 需要和 RN 项目的 AppRegistry.registerComponent 注册的名称一致</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">getMainComponentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"ReactNativeTs"</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">createReactActivityDelegate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ReactActivityDelegate <span class="token operator">=</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">DefaultReactActivityDelegate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mainComponentName<span class="token punctuation">,</span> fabricEnabled<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 连接 Metro 服务器关键，只需要 sp 简单保存 debug_http_host 字段，为当前需要连接的 Metro 服务器</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        mPreferences <span class="token operator">=</span> PreferenceManager<span class="token punctuation">.</span><span class="token function">getDefaultSharedPreferences</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        mPreferences<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">edit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"debug_http_host"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"192.168.0.141:8081"</span></span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="开始实时编程"><a class="anchor" href="#开始实时编程">#</a> 开始实时编程</h2>
<p>1. 打开 RN 项目，使用 【yarn start】 命令，启动 Metro 服务器，记录下端口并查看当前电脑的 ip</p>
<p>2. 打开 Android 项目 修改 sp 的【debug_http_host】字段 ，编译运行 APP</p>
<p>3. 完成，MainActivity 打开时会自动连接 Metro 服务器，拉取 JS 代码，解析展示</p>
<h2 id="关键总结"><a class="anchor" href="#关键总结">#</a> 关键总结</h2>
<p>1.RN 项目使用 【yarn start】 命令，启动 Metro 服务器</p>
<p>2.Android 项目依赖 react-android 和 android-jsc 库，并 sp 保存 debug_http_host 字段为 Metro 服务器地址</p>
<p>该文章只是为了最快实现功能，所以大部分为硬编码</p>
<p>实际项目开发步骤应该为  app 扫描 RN 项目生成的二维码，二维码内包含 Metro 地址和 mainComponentName 字段，新建立的 Activity 解析这些数据并设置在对应地方</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>React-Native调试开发</tag>
      </tags>
  </entry>
  <entry>
    <title>gradle的aar场景知识</title>
    <url>/post/59f16662.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yNjMwMDMuaHRt">发布 Android library 到 Maven 解析</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXNrL3NvZi8xMDYzODExNTQ=">上面提供的 maven-publish 文件的模板代码只能用在 library 模块</span></p>
<p><span id="more"></span></p>
<p>发布的依赖产物</p>
<ul>
<li>aar 文件</li>
<li>module 文件</li>
<li>pom 文件</li>
<li>source.jar</li>
</ul>
<h2 id="问题场景解答"><a class="anchor" href="#问题场景解答">#</a> 问题场景解答</h2>
<h5 id="1产生的module文件是什么内容"><a class="anchor" href="#1产生的module文件是什么内容">#</a> 1. 产生的 module 文件是什么内容</h5>
<p><img data-src="https://s3.bmp.ovh/imgs/2024/02/07/1403fa345d6aff28.png" alt="" /></p>
<p>目前暂未发现意义的 json 字符串文件</p>
<h5 id="2如果library1依赖的本地的library2项目即-apiprojectlibrary2-那打包会发生什么"><a class="anchor" href="#2如果library1依赖的本地的library2项目即-apiprojectlibrary2-那打包会发生什么">#</a> 2. 如果 library1 依赖的本地的 library2 项目，即 <em>api</em>(<em>project</em> (&quot;:library2&quot;)) ，那打包会发生什么？</h5>
<blockquote>
<p>正常打包成功</p>
</blockquote>
<p>打包产生的 pom 文件相关内容是</p>
<figure class="highlight xml"><figcaption data-lang="XML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ct.ct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>library1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>aar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>library2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>unspecified<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="14"></td><td><pre>            -------------------或者--------------</pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.ct.ct<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>      		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>library2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="17"></td><td><pre>      		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.0_DEBUG<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></pre></td></tr></table></figure><p>会像其他远端依赖一样被打包进 pom 中，</p>
<p>1. 当 library2 没有配置 maven-publish 插件时，相关字段为 library2 项目的配置信息，version 字段默认为 unspecified</p>
<p>2. 当 library2 也有配置 maven-publish 插件时，相关字段则会根据 library1 打包的类型去读取 library2 的 publications.debug 或者 publications.release 来填写</p>
<blockquote>
<p>从 pom 文件来看是被完全当成远端依赖来处理了</p>
</blockquote>
<h5 id="3打包aar时上传源码操作"><a class="anchor" href="#3打包aar时上传源码操作">#</a> 3. 打包 Aar 时上传源码操作</h5>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 上传源码的 task</span></pre></td></tr><tr><td data-num="2"></td><td><pre>task <span class="token function">sourceJar</span><span class="token punctuation">(</span>type<span class="token punctuation">:</span> Jar<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 如果有 Kotlin 那么就需要打入 dir : getSrcDirs</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span><span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"kotlin"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        println <span class="token string">'====> project kotlin'</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        from android<span class="token punctuation">.</span>sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getSrcDirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>project<span class="token punctuation">.</span><span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"android"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        println <span class="token string">'====> project java'</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        from android<span class="token punctuation">.</span>sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>sourceFiles</pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        println <span class="token string">'====> project java &amp; kotlin'</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        from sourceSets<span class="token punctuation">.</span>main<span class="token punctuation">.</span>allSource</pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    archiveClassifier <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"sources"</span></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>publishing <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    publications <span class="token punctuation">&#123;</span> PublicationContainer publicationContainer <span class="token operator">-></span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token function">release</span><span class="token punctuation">(</span>MavenPublication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            from components<span class="token punctuation">.</span>release</pre></td></tr><tr><td data-num="20"></td><td><pre>            artifact sourceJar <span class="token comment">// 上传源码</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            groupId <span class="token operator">=</span> GROUP_ID</pre></td></tr><tr><td data-num="22"></td><td><pre>            artifactId <span class="token operator">=</span> ARTIFACT_ID</pre></td></tr><tr><td data-num="23"></td><td><pre>            version <span class="token operator">=</span> VERSION</pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token comment">// 这里的闭包代码 config 阶段就被运行了</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但我这个版本 【agp 8.1.2   gradle-8.0】好像不需要设置 artifact sourceJar，默认会带源码，设置了 artifact sourceJar 还会报错</p>
<pre><code>What went wrong:
A problem was found with the configuration of task ':library1:sourceJar' (type 'Jar').
- Gradle detected a problem with the following location:
'C:\AarProject\library1\build\libs\library1-sources.jar'.

Reason: Task ':library1:generateMetadataFileForReleasePublication'
uses this output of task ':library1:sourceJar'
without declaring an explicit or implicit dependency. This can lead to incorrect results being
produced, depending on what order the tasks are executed.
</code></pre>
<p>解决方案：</p>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">release</span><span class="token punctuation">(</span>MavenPublication<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    from components<span class="token punctuation">.</span>release</pre></td></tr><tr><td data-num="3"></td><td><pre>    artifact sourceJar <span class="token comment">// 上传源码</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    groupId <span class="token operator">=</span> GROUP_ID</pre></td></tr><tr><td data-num="5"></td><td><pre>    artifactId <span class="token operator">=</span> ARTIFACT_ID</pre></td></tr><tr><td data-num="6"></td><td><pre>    version <span class="token operator">=</span> VERSION</pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 在这里之后才能找到 generateMetadataFileForReleasePublication 任务</span></pre></td></tr><tr><td data-num="9"></td><td><pre>tasks<span class="token punctuation">.</span><span class="token function">named</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"generateMetadataFileForReleasePublication"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    dependsOn <span class="token interpolation-string"><span class="token string">"androidSourcesJar"</span></span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>又会出现 【 multiple <strong>artifacts</strong> with the identical extension and classifier 】的问题，因为打包已经默认出现了 - source.jar 的问题，需要修改 sourceJar 的 archiveClassifier 为其他字符串</p>
<h5 id="4当library1同时依赖library3的源码和aar包时编译运行都不会报错"><a class="anchor" href="#4当library1同时依赖library3的源码和aar包时编译运行都不会报错">#</a> 4. 当 library1 同时依赖 library3 的源码和 aar 包时，编译运行都不会报错</h5>
<blockquote>
<p>优先选择源码，但如果引用的 library3 的 aar 包有 library3 源码没有的类，那 library1 还是可以引用到该类</p>
</blockquote>
<p>所以为了避免 aar 和源码混淆，当一个 library 源码化时，必须剔除项目中所有该 library 的 aar 依赖</p>
<h5 id="5java-library是升级版的java插件内部会apply-java插件"><a class="anchor" href="#5java-library是升级版的java插件内部会apply-java插件">#</a> 5.'java-library' 是升级版的 java 插件，内部会 apply 'java' 插件</h5>
<p>和 maven 插件一样，也会产生 pom 文件，产物也是 jar</p>
<h5 id="6annotationprocessor依赖不会引入其项目源码以及其项目依赖"><a class="anchor" href="#6annotationprocessor依赖不会引入其项目源码以及其项目依赖">#</a> 6.annotationProcessor 依赖不会引入其项目源码以及其项目依赖</h5>
<blockquote>
<p>annotationProcessor 本质是将本项目的 class 文件传给 AbstractProcessor 类处理生成新文件，打包后不需要 AbstractProcessor 类的</p>
</blockquote>
<p>如果项目 library1-compile 是 java 库，并有 AbstractProcessor 的子类，那它的 gradle 文件里的 <strong>annotationProcessor 'com.google.auto.service:auto-service:1.0-rc4'</strong> 作用是解析【AutoService】注解，生成 META-INF 文件夹</p>
<p>依赖 library1-compile 的项目 library2 则可以用 kapt 或 annotationProcessor 来依赖 library1-compile，作用是解析【自定义】注解，生成对应 class 类</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>AAR</tag>
      </tags>
  </entry>
  <entry>
    <title>Gradle知识点</title>
    <url>/post/728a6632.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2dpdGh1Yl8yMDExL2FydGljbGUvZGV0YWlscy8xMDkxMzUyNTg=">Android Studio Build Output 控制台输出乱码解决</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTUxNzE3">我想调试下 build.gradle | Gradle 调试</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDY0MzUwOTQ1NzU2MzMyMDQwI2hlYWRpbmctMQ==">关于 Gradle 你应该知道的知识点</span></p>
<blockquote>
<p>Gradle 生命周期一般分为三个阶段</p>
<ol>
<li>初始化阶段，解析 setting.gradle 文件，确定需要引入哪些模块；</li>
<li>配置阶段，解析每个 project 的 build.gradle 文件，build.gradle 就是一堆代码的集合，只是用 dsl 的语言风格描述出来，看着像配置语言。同时汇总所有 project 生成有向无环图来确定每个 task 的依赖关系；</li>
<li>执行阶段，根据上个阶段生成的 task 依赖关系图，依次执行所有 task。</li>
</ol>
</blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3podXBlaXBlaS9BbmRyb2lkQnVpbGRBY2NQbHVnaW4=">Android 编译速度优化 —— 模块 Aar 方案实现</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL09tb29vL0FuZHJvaWQtTm90ZXMvYmxvYi9tYXN0ZXIvYmxvZ3MvQW5kcm9pZC9HcmFkbGUvJUU0JUJFJTlEJUU4JUI1JTk2JUU2JTlEJTgzJUU5JTk5JTkwJUU0JUJGJUExJUU2JTgxJUFGLm1k"> 输出项目第三方库以及本地依赖库的权限信息</span></p>
<p><span id="more"></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMjUzODIw">Task#finalizedBy 函数</span></p>
<h2 id="settinggradle"><a class="anchor" href="#settinggradle">#</a> setting.gradle</h2>
<p>可以通过如下方式注册需要参与构建的模块，项目名称中  <code>:</code>  代表项目的分隔符，类似路径中的  <code>/</code> . 如果以  <code>:</code>  开头则表示相对于  <code>root project</code></p>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre>pluginManagement <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 插件仓库</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    repositories <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token function">gradlePluginPortal</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>dependencyResolutionManagement <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    repositoriesMode<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>RepositoriesMode<span class="token punctuation">.</span>FAIL_ON_PROJECT_REPOS<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">// 依赖仓库</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    repositories <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">google</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>rootProject<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"WebviewDemo"</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">//app 模块 和 module 模块都要配置</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token function">include</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">":app"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token function">include</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">":webviewlib"</span></span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote>
<p>模块之间的互相依赖我们通常使用  <code>implementation(project(&quot;:$modulePath&quot;))</code>  的语法进行引用。注意，Gradle 以 “:” 为文件路径分隔符，如果 a 模块引用的 b 模块放置在某个深层的文件（例如 “/commons/utils/b”）中，则需要完整的路径引用： <code>project(&quot;:commons:utils:b&quot;)</code></p>
</blockquote>
<h2 id="buildscript"><a class="anchor" href="#buildscript">#</a> buildscript</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTM1NjA1NTgzNzQzNTQ5NDc2">buildscript 的脚本执行顺序</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODM3MTYw">如果我们想在 gradle 脚本中使用外部的 jar 包！！</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcy9ncmFkbGUlMjBkZXBlbmRlbmNpZXMlMjBjbGFzc3BhdGglMjBpbXBsZW1lbnRhdGlvbg==">classpath implementation 的区别</span></p>
<blockquote>
<p>kts 中引入自定义 gradle 脚本文件    <em>apply</em>(from = File(&quot;${<em>rootDir</em>}/app/test.gradle&quot;))，如果是相对目录，相对的是 apply 的项目的对应目录</p>
</blockquote>
<blockquote>
<p>哪个 project 进行 apply 操作，test.gradle 就能通过 project 属性访问到所属的项目</p>
</blockquote>
<blockquote>
<p>kts 如何调用 ext 中的自定义方法  val projectOrAAr = ext.get (&quot;projectOrAAr&quot;) as groovy.lang.Closure&lt;Object&gt;</p>
</blockquote>
<h2 id="plugin插件用法"><a class="anchor" href="#plugin插件用法">#</a> Plugin 插件用法</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> BuildAccPlugin <span class="token operator">:</span> Plugin<span class="token operator">&lt;</span>Project<span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">apply</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 判断是否设置了某个插件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">fun</span> <span class="token function">isAndroidPlugin</span><span class="token punctuation">(</span>curProject<span class="token operator">:</span> Project<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">return</span> curProject<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.library"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">fun</span> <span class="token function">isAppPlugin</span><span class="token punctuation">(</span>curProject<span class="token operator">:</span> Project<span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> curProject<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.android.application"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 给 project 添加 maven-publish 插件</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">applyMavenPublishPluginInternal</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    project<span class="token punctuation">.</span><span class="token function">afterEvaluate</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>project<span class="token punctuation">.</span>pluginManager<span class="token punctuation">.</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"maven-publish"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            project<span class="token punctuation">.</span>pluginManager<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"maven-publish"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"当前模块已经添加了maven-publish插件，将被替换"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"project </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">project<span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> plugin (maven-publish) has applied"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 配置 Maven 参数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">configMavenPublish</span><span class="token punctuation">(</span>subProject<span class="token operator">:</span> Project<span class="token punctuation">,</span> appExtension<span class="token operator">:</span> AppExtension<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        subProject<span class="token punctuation">.</span><span class="token function">afterEvaluate</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>subProject<span class="token punctuation">.</span>pluginManager<span class="token punctuation">.</span><span class="token function">hasPlugin</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"maven-publish"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                <span class="token keyword">return</span><span class="token label symbol">@afterEvaluate</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            subProject<span class="token punctuation">.</span>extensions<span class="token punctuation">.</span>configure<span class="token operator">&lt;</span>PublishingExtension<span class="token operator">></span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"publishing"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> publishingExt <span class="token operator">-></span></pre></td></tr><tr><td data-num="8"></td><td><pre>                publishingExt<span class="token punctuation">.</span><span class="token function">publications</span> <span class="token punctuation">&#123;</span> publicationContainer <span class="token operator">-></span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    <span class="token keyword">val</span> publicationName <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"xxx"</span></span></pre></td></tr><tr><td data-num="10"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>publicationContainer<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span>publicationName<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                        publicationContainer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                            publicationName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                            MavenPublication<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java</pre></td></tr><tr><td data-num="14"></td><td><pre>                        <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                            <span class="token function">with</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                                groupId <span class="token operator">=</span> mavenModel<span class="token punctuation">.</span>groupId</pre></td></tr><tr><td data-num="17"></td><td><pre>                                artifactId <span class="token operator">=</span> mavenModel<span class="token punctuation">.</span>artifactId</pre></td></tr><tr><td data-num="18"></td><td><pre>                                version <span class="token operator">=</span> mavenModel<span class="token punctuation">.</span>version</pre></td></tr><tr><td data-num="19"></td><td><pre>                                <span class="token function">from</span><span class="token punctuation">(</span>subProject<span class="token punctuation">.</span>components<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>buildTypeName<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                publishingExt<span class="token punctuation">.</span><span class="token function">repositories</span> <span class="token punctuation">&#123;</span> repositoryHandler <span class="token operator">-></span></pre></td></tr><tr><td data-num="25"></td><td><pre>                    repositoryHandler<span class="token punctuation">.</span><span class="token function">maven</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                        it<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span>MAVEN_PUBLISH_URL<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="project相关api"><a class="anchor" href="#project相关api">#</a> Project 相关 API</h2>
<blockquote>
<p>project.gradle 获得 gradle</p>
</blockquote>
<blockquote>
<p>project.<em>rootProject</em> != project   判断应用插件的是不是根项目</p>
</blockquote>
<blockquote>
<p>project.path ==&quot;:&quot;   说明是根项目</p>
</blockquote>
<blockquote>
<p>project.extensions.create(&quot;BuildAccExtension&quot;, BuildAccExtension::class.<em>java</em>)    创建 ext</p>
</blockquote>
<blockquote 可以通过it="" 参数拿到project="">
<p>project.afterEvaluate，是所有模块都已经配置完后才触发，如果注册了多个 project.afterEvaluate 回调，那么执行顺序等同于注册顺序</p>
<p>project.afterEvaluate</p>
</blockquote>
<blockquote>
<p>project.pluginManager.hasPlugin (&quot;maven-publish&quot;)   project.plugins.hasPlugin (&quot;com.android.application&quot;) 判断是否存在某个插件（必须在 project.afterEvaluate 后使用）</p>
</blockquote>
<blockquote>
<p>project.pluginManager.apply (&quot;maven-publish&quot;) apply 某个插件</p>
</blockquote>
<h2 id="gradle相关api"><a class="anchor" href="#gradle相关api">#</a> gradle 相关 API</h2>
<blockquote>
<p>通过 project.gradle 获得 gradle</p>
</blockquote>
<blockquote>
<p>每一次运行 gradle 任务，所有 gradle 文件获得的 gradle 变量都是同一个对象</p>
</blockquote>
<blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//setting.gradle.kts</span></pre></td></tr><tr><td data-num="2"></td><td><pre>gradle<span class="token punctuation">.</span><span class="token function">addBuildListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> BuildListener <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">settingsEvaluated</span><span class="token punctuation">(</span>settings<span class="token operator">:</span> Settings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addBuildListener--------settingsEvaluated"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">projectsLoaded</span><span class="token punctuation">(</span>gradle<span class="token operator">:</span> Gradle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addBuildListener--------projectsLoaded"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">projectsEvaluated</span><span class="token punctuation">(</span>gradle<span class="token operator">:</span> Gradle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addBuildListener--------projectsEvaluated"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">buildFinished</span><span class="token punctuation">(</span>result<span class="token operator">:</span> BuildResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addBuildListener--------buildFinished"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>gradle<span class="token punctuation">.</span><span class="token function">addProjectEvaluationListener</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span>ProjectEvaluationListener<span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">beforeEvaluate</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addProjectEvaluationListener--------beforeEvaluate----------- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">afterEvaluate</span><span class="token punctuation">(</span>project<span class="token operator">:</span> Project<span class="token punctuation">,</span> state<span class="token operator">:</span> ProjectState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"addProjectEvaluationListener--------afterEvaluate-----------</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">project</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token comment">//app build.gradle</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1---------rootProject"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>beforeEvaluate <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"4---------rootProject-beforeEvaluate"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"2---------rootProject"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="36"></td><td><pre>afterEvaluate <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"5---------rootProject-afterEvaluate"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"3---------rootProject"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token comment">//library1 build.gradle</span></pre></td></tr><tr><td data-num="42"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"1---------library1"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>beforeEvaluate <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"4---------library1-beforeEvaluate"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="46"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"2---------library1"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>afterEvaluate <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"5---------library1-afterEvaluate"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"3---------library1"</span></span><span class="token punctuation">)</span></pre></td></tr></table></figure></blockquote>
<pre><code>//////////////////////// 运行结果////////////////////////////////
addBuildListener--------settingsEvaluated
addBuildListener--------projectsLoaded

&gt; Configure project :
addProjectEvaluationListener--------beforeEvaluate----------- root project 'AarProject'
addProjectEvaluationListener--------afterEvaluate-----------root project 'AarProject'

&gt; Configure project :app
addProjectEvaluationListener--------beforeEvaluate----------- project ':app'
1---------rootProject
2---------rootProject
3---------rootProject
addProjectEvaluationListener--------afterEvaluate-----------project ':app'
5---------rootProject-afterEvaluate

&gt; Configure project :library1
addProjectEvaluationListener--------beforeEvaluate----------- project ':library1'
1---------library1
2---------library1
3---------library1
addProjectEvaluationListener--------afterEvaluate-----------project ':library1'
5---------library1-afterEvaluate

addBuildListener--------projectsEvaluated

&gt; Task :prepareKotlinBuildScriptModel UP-TO-DATE
addBuildListener--------buildFinished

BUILD SUCCESSFUL in 2s
</code></pre>
<p>3. 获得项目 gradle 版本</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> version <span class="token operator">=</span> runCatching<span class="token punctuation">&#123;</span>project<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>gradleVersion<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"."</span></span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token number">0</span></pre></td></tr></table></figure><p>4. 获得运行的任务名称</p>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre>List<span class="token operator">&lt;</span>TaskExecutionRequest<span class="token operator">></span> taskRequests <span class="token operator">=</span> gradle<span class="token punctuation">.</span>startParameter<span class="token punctuation">.</span><span class="token function">getTaskRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span>taskRequests<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    String taskName <span class="token operator">=</span> taskRequests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>taskName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"assembledebug"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        println  <span class="token interpolation-string"><span class="token string">"assembledebug"</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>6. 获得项目所有构建变体</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> appExtension <span class="token operator">=</span> runCatching <span class="token punctuation">&#123;</span> mAppProject<span class="token operator">?</span><span class="token punctuation">.</span>extensions<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">getByType</span><span class="token punctuation">(</span>AppExtension<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">getOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>appExtension<span class="token punctuation">.</span>applicationVariants<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span> applicationVariant <span class="token operator">-></span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>                                         <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="maven插件"><a class="anchor" href="#maven插件">#</a> Maven 插件</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTExNjQy">发布 aar 包到 maven 仓库以及 maven 插件 和 maven-publish 插件的区别</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamI1MS5uZXQvYXJ0aWNsZS8yNjMwMDMuaHRt">发布 Android library 到 Maven 解析</span></p>
<h2 id="dependency-以及-configurations"><a class="anchor" href="#dependency-以及-configurations">#</a> dependency 以及 configurations</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTA0MDg4NDQ2OTU5NjIz">Gradle 理解：configuration、dependency</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTIwNzY3NzUvYW5kcm9pZC1kaWZmZXJlbmNlLWJldHdlZW4tdGVzdGltcGxlbWVudGF0aW9uLWFuZC1hbmRyb2lkdGVzdGltcGxlbWVudGF0aW9uLWluLWI="> testImplementation 和 androidTestImplementation 的区别</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcy9ncmFkbGUlMjBjb25maWd1cmF0aW9ucy5hbGwlMjB2cyUyMGNvbmZpZ3VyYXRpb25z">configurations.all vs configurations</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9vdWJpbmRvLmdpdGh1Yi5pby8yMDE5LzA5LzA1LyVFNCVCOCU4MCVFNyVBRiU4NyVFNiU5NiU4NyVFNyVBQiVBMCVFNiVCNyVCMSVFNSU4NSVBNWdyYWRsZSVFRiVCQyU4OCVFNCVCOCU4QSVFNyVBRiU4NyVFRiVCQyU4OTolRTQlQkUlOUQlRTglQjUlOTYlRTYlOUMlQkElRTUlODglQjYv">一篇文章深入 gradle（上篇）: 依赖机制</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMzMyMDA1">Android gradle dependency tree change（依赖树变化）监控实现</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9nZW1pbml3ZW4uY29tL2FyY2hpdmVzLzEwNi5odG1sI2RpcmVjdG9yeTA3MjIwMTY4MjgzNjAyNDg2NA==">理解依赖 AAR 是怎么处理的，内有 gradle 源码链接</span></p>
<h2 id="命令"><a class="anchor" href="#命令">#</a> 命令</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//cmd 执行 graldew 命令时，会额外启动 Gradle Daemon 执行命令，重新跑一遍初始化阶段，配置阶段</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">fun</span> Project<span class="token punctuation">.</span><span class="token function">execCmd</span><span class="token punctuation">(</span>cmd<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">val</span> stdOut <span class="token operator">=</span> <span class="token function">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token comment">//project.exec 是以 project 对象的目录启动命令</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        project<span class="token punctuation">.</span><span class="token function">exec</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            it<span class="token punctuation">.</span>executable <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"sh"</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre>            it<span class="token punctuation">.</span>args <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"-c"</span></span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            it<span class="token punctuation">.</span>standardOutput <span class="token operator">=</span> stdOut</pre></td></tr><tr><td data-num="10"></td><td><pre>            it<span class="token punctuation">.</span>errorOutput <span class="token operator">=</span> stdOut</pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">val</span> result <span class="token operator">=</span> stdOut<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> result</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Exception<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token string-literal singleline"><span class="token string">""</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>window 系统下执行命令</p>
</blockquote>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre>String path <span class="token operator">=</span> project<span class="token punctuation">.</span>path</pre></td></tr><tr><td data-num="2"></td><td><pre>String cmd <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">"gradlew </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">path</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">:publishReleasePublicationToMavenRepository"</span></span></pre></td></tr><tr><td data-num="3"></td><td><pre>rootProject<span class="token punctuation">.</span>exec <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    commandLine <span class="token string">'cmd'</span><span class="token punctuation">,</span><span class="token string">'/c'</span><span class="token punctuation">,</span>cmd</pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>GIT 命令</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 判断某个模块是否有本地修改 </span></pre></td></tr><tr><td data-num="2"></td><td><pre>project<span class="token punctuation">.</span><span class="token function">execCmd</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"git -C </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">project<span class="token punctuation">.</span>projectDir<span class="token punctuation">.</span>absolutePath</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> status --porcelain"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 根据 commitId 获得 commit 的信息 (不包含作者，时间的)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>static def <span class="token function">getCommitMsg</span><span class="token punctuation">(</span>String commitId<span class="token punctuation">,</span> Gradle gradle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    String cmd <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"git log --pretty=format:\"%s\" </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">commitId</span></span><span class="token string"> -1"</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">execCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> gradle<span class="token punctuation">.</span>rootProject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 获得 project 最新的提交 CommitId</span></pre></td></tr><tr><td data-num="10"></td><td><pre>static def <span class="token function">getProjectLastCommitId</span><span class="token punctuation">(</span>String projectPath<span class="token punctuation">,</span> Gradle gradle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    String cmd <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"git log -n 1 --oneline --format=%H </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">projectPath</span></span><span class="token string">"</span></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">execCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> gradle<span class="token punctuation">.</span>rootProject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 获得文件每一行的 git 信息</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token function">execCmd</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"git blame config/aarPomConfig.yml"</span></span><span class="token punctuation">,</span> gradle<span class="token punctuation">.</span>rootProject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eachLine</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>gradle 命令传参</p>
</blockquote>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">.</span>/gradlew xxxtask <span class="token operator">-</span>Pc<span class="token operator">=</span><span class="token string">'aaa'</span></pre></td></tr><tr><td data-num="2"></td><td><pre>在Gradle命令中，<span class="token operator">-</span>Pc表示你正在设置一个名为<span class="token interpolation-string"><span class="token string">"c"</span></span>（或者在<span class="token operator">-</span>P后面的任何内容）的项目属性。Gradle允许你使用<span class="token operator">-</span>P选项将属性传递给构建脚本。</pre></td></tr><tr><td data-num="3"></td><td><pre>在你的例子中，你将属性<span class="token interpolation-string"><span class="token string">"c"</span></span>的值设置为字符串’aaa’。这意味着你的Gradle构建脚本可以在构建过程中使用这个名为<span class="token interpolation-string"><span class="token string">"c"</span></span>的属性及其值</pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 方式 1</span></pre></td></tr><tr><td data-num="5"></td><td><pre>project<span class="token punctuation">.</span><span class="token function">hasProperty</span><span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span> <span class="token operator">?</span> project<span class="token punctuation">.</span>c <span class="token punctuation">:</span> <span class="token string">'默认值'</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 方式 2</span></pre></td></tr><tr><td data-num="7"></td><td><pre>gradle<span class="token punctuation">.</span>startParameter<span class="token punctuation">.</span>projectProperties<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"c"</span></span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>父项目 task 中如何启动另一个子项目的 task</p>
<pre><code>1.使用cmd命令，但会起一个新的gradle环境执行命令
2.将子项目task内的代码封装在一个函数中，保存在project.ext.xxx中，然后父项目 project(&quot;:子项目&quot;).ext.xxx()
</code></pre>
<h2 id="有用方法集合"><a class="anchor" href="#有用方法集合">#</a> 有用方法集合</h2>
<p>1. 获取 local.properties 文件的值        <strong>gradle.properties 的值在 gradle 文件中可以通过变量名引用获取</strong></p>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">def</span> <span class="token function">getPropertyFromLocalProperties</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> Object defaultValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    File file <span class="token operator">=</span> project<span class="token punctuation">.</span>rootProject<span class="token punctuation">.</span><span class="token function">file</span><span class="token punctuation">(</span><span class="token string">'local.properties'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">newDataInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> defaultValue<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> defaultValue</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="groovy语法"><a class="anchor" href="#groovy语法">#</a> Groovy 语法</h2>
<blockquote>
<p>方法支持返回多个值，以 [] 包括起来，返回的是 list 集合，但调用的地方会自动解耦；</p>
</blockquote>
<pre><code>def A=&#123; String a ,String b -&gt;
    String c= a+b
    println(c)
&#125;
def B=&#123;
    return [&quot;a&quot;,&quot;b&quot;]
&#125;
A(B())
</code></pre>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native知识点</title>
    <url>/post/1dcdc51b.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHM=">JS 官方文档</span></p>
<p><a href="">TS 官方文档</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aC1oYW5zLnJlYWN0LmRldi9yZWZlcmVuY2UvcmVhY3QvdXNlUmVm">React 官方文档</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2xheW91dC1wcm9wcw==">React Native 官方文档</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzUzNTMxNg==">理解 JavaScript 的 async/await</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTA1Nzc4OTIyODUxMTM5NTk4">【TypeScript】keyof &amp; in 关键字详解</span></p>
<h2 id="第三方库"><a class="anchor" href="#第三方库">#</a> 第三方库</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDYyNzM1OTYzNzM0MTQ3MDc5I2hlYWRpbmctMTI=">一文弄懂 redux、react-redux 如何使用</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTFjdG8uY29tL2FydGljbGUvNzExMjU1Lmh0bWw=">在 React 中使用 Redux 的四种写法</span></p>
<p><span id="more"></span></p>
<h2 id="常见知识"><a class="anchor" href="#常见知识">#</a> 常见知识</h2>
<p><code>View</code>  标签视情况，可能会被优化，不会被转换为平台的 ViewGroup</p>
<p><code>View</code>  可以不需要宽高参数</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 对应 export </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> <span class="token constant">A</span> <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'xxxx'</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 对应 export default</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">import</span> <span class="token constant">B</span> <span class="token keyword">from</span> <span class="token string">'xxxx'</span></pre></td></tr></table></figure><p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTUxNjM4NzM2OTQ4NjkwOTUx">React 中 import 动态加载</span></p>
<blockquote>
<p>Rn 设计稿以 2x 的 px 为准；字体大小 fontSize 也是以设计稿以 2x 的 px 为准</p>
</blockquote>
<blockquote>
<p>RN+mobx 监听一个 state 修改另外的 state  ---- 使用 autoRun 函数</p>
</blockquote>
<h2 id="view属性"><a class="anchor" href="#view属性">#</a> View 属性</h2>
<h6 id="实现relatelayout效果"><a class="anchor" href="#实现relatelayout效果">#</a> 实现 RelateLayout 效果</h6>
<p>子 view 使用 <a href="https://reactnative.cn/docs/layout-props#alignself"> <code>alignSelf</code> </a> 属性选择位置</p>
<h6 id="实现framelayout效果"><a class="anchor" href="#实现framelayout效果">#</a> 实现 FrameLayout 效果</h6>
<p>两个需要重叠的 view 用一个 <code>View</code>  标签包含起来，需要重叠的子 view 使用 <a href="https://reactnative.cn/docs/layout-props#position"> <code>position</code> </a> 属性【absolute】</p>
<p>例如把按钮放在视图的底部：  position: 'absolute',  bottom:0</p>
<p>可以使用  <code>alignSelf</code>  实现水平居中</p>
<p>可以使用  <code>top: '50%'</code>  实现垂直居中</p>
<h6 id="实现linearlayout的weight效果"><a class="anchor" href="#实现linearlayout的weight效果">#</a> 实现 LinearLayout 的 weight 效果</h6>
<p>子 view 使用  <a href="https://reactnative.cn/docs/layout-props#flex"> <code>flex</code>  </a>属性选择大小</p>
<h6 id="实现linearlayout的横向布局"><a class="anchor" href="#实现linearlayout的横向布局">#</a> 实现 LinearLayout 的横向布局</h6>
<p>​	使用 <a href="https://reactnative.cn/docs/layout-props#flexdirection"> <code>flexDirection</code> </a> 属性</p>
<h6 id="控制子view的对其方式"><a class="anchor" href="#控制子view的对其方式">#</a> 控制子 View 的对其方式</h6>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2xheW91dC1wcm9wcyNqdXN0aWZ5Y29udGVudA==">justifyContent</span>  控制子元素在主轴的对齐方式</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2xheW91dC1wcm9wcyNhbGlnbml0ZW1z">alignItems</span> 控制子元素在交叉轴的对齐方式</p>
<p>例如父 View 是垂直展示 View， <code>justifyContent</code>  可以控制子 View 从底部开始展示， <code>alignItems</code>  可以控制子 View 水平居中</p>
<h6 id="image实现圆角"><a class="anchor" href="#image实现圆角">#</a> Image 实现圆角</h6>
<p><code>borderRadius</code>  设为宽高的一半</p>
<h6 id="text控件"><a class="anchor" href="#text控件">#</a> Text 控件</h6>
<p>文字颜色 使用  <code>color</code>  属性</p>
<p>文字居中   <code>textAlign: 'center'   textAlignVertical: 'center'</code></p>
<h6 id="flatlist"><a class="anchor" href="#flatlist">#</a> <a href="https://reactnative.cn/docs/flatlist"> <code>FlatList</code> </a> 实现分页展示</h6>
<ul>
<li>
<p>data: 用于指定 FlatList 要渲染的数据数组。</p>
</li>
<li>
<p>renderItem: 用于定义每个数据项的渲染方式的函数。</p>
</li>
<li>
<p>windowSize: 用于指定 FlatList 渲染窗口的大小，即同时渲染的数据项的数量。</p>
</li>
<li>
<p>removeClippedSubviews: 用于指定是否在数据项滚出视图时将其从 DOM 中移除，以提高性能。</p>
</li>
<li>
<p>pagingEnabled: 用于指定是否启用分页模式，即每次滚动只显示一个完整的数据项。</p>
</li>
<li>
<p>maxToRenderPerBatch 每次增量渲染的最大数量，性能优化</p>
</li>
<li>
<p>initialNumToRender  指定一开始渲染的元素数量，性能优化</p>
</li>
<li>
<p>onViewableItemsChanged 可见元素变化</p>
</li>
<li>
<p>initialScrollIndex 和 getItemLayout 配合使用</p>
</li>
<li>
<p>handleScrollBeginDrag    按住手指滑动马上触发，即使在最后一页继续滑动也会触发</p>
</li>
<li>
<p>onMomentumScrollEnd  与 handleScrollBeginDrag 对应，可能多次调用</p>
</li>
<li>
<p>onScroll 滑动触发，在最后一页继续滑动<strong>不会触发</strong></p>
</li>
</ul>
<h2 id="功能点"><a class="anchor" href="#功能点">#</a> 功能点</h2>
<h6 id="实现下拉提醒-已全部加载的toast"><a class="anchor" href="#实现下拉提醒-已全部加载的toast">#</a> 实现下拉提醒 已全部加载的 Toast</h6>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 使用 PanResponder 判断是否是下滑</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> panResponder <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    PanResponder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function-variable function">onMoveShouldSetPanResponder</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      <span class="token function-variable function">onStartShouldSetPanResponder</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="9"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>      <span class="token function-variable function">onMoveShouldSetPanResponderCapture</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function-variable function">onPanResponderGrant</span><span class="token operator">:</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> GestureResponderEvent<span class="token punctuation">,</span> gestureState<span class="token operator">:</span> PanResponderGestureState<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>gestureState<span class="token punctuation">.</span>vy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token comment">// 注册 onViewableItemsChanged 函数 获得当前显示的页数，isAtBottom 函数 判断是否是列表最后一页</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loadMoreEnable<span class="token punctuation">.</span>current <span class="token operator">&amp;&amp;</span> <span class="token function">isAtBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                    <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">)</span></pre></td></tr></table></figure><h6 id="手势事件-panresponder"><a class="anchor" href="#手势事件-panresponder">#</a> 手势事件  <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3pyYW1hbHMvYXJ0aWNsZS9kZXRhaWxzLzc4NDAzNTA4">PanResponder</span></h6>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 这个视图是否在触摸开始时想成为响应器？ </span></pre></td></tr><tr><td data-num="2"></td><td><pre>onStartShouldSetPanResponder<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onStartShouldSetPanResponder<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 所以如果一个父视图要防止子视图在触摸开始时成为响应器，它应该有一个 onStartShouldSetResponderCapture 处理程序，返回 true。</span></pre></td></tr><tr><td data-num="4"></td><td><pre>onStartShouldSetPanResponderCapture<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onStartShouldSetPanResponderCapture<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 当视图不是响应器时，该指令被在视图上移动的触摸调用：这个视图想 “声明” 触摸响应吗？</span></pre></td></tr><tr><td data-num="6"></td><td><pre>onMoveShouldSetPanResponder<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onMoveShouldSetPanResponder<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 所以如果一个父视图要防止子视图在移动开始时成为响应器，它应该有一个 onMoveShouldSetPanResponderCapture 处理程序，返回 true。</span></pre></td></tr><tr><td data-num="8"></td><td><pre>onMoveShouldSetPanResponderCapture<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onMoveShouldSetPanResponderCapture<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">// 当前有其他的东西成为响应器并且没有释放它。 </span></pre></td></tr><tr><td data-num="10"></td><td><pre>onPanResponderReject<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderReject<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment">// 视图现在正在响应触摸事件。这个时候要高亮标明并显示给用户正在发生的事情。</span></pre></td></tr><tr><td data-num="12"></td><td><pre>onPanResponderGrant<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderGrant<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 手势开始</span></pre></td></tr><tr><td data-num="14"></td><td><pre>onPanResponderStart<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderStart<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 手势结束</span></pre></td></tr><tr><td data-num="16"></td><td><pre>onPanResponderEnd<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderEnd<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 用户正移动他们的手指 </span></pre></td></tr><tr><td data-num="18"></td><td><pre>onPanResponderMove<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderMove<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 在触摸最后被引发，即 “touchUp” </span></pre></td></tr><tr><td data-num="20"></td><td><pre>onPanResponderRelease<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderRelease<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 其他的东西想成为响应器。这种视图应该释放应答吗？返回 true 就是允许释放 </span></pre></td></tr><tr><td data-num="22"></td><td><pre>onPanResponderTerminationRequest<span class="token operator">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onPanResponderTerminationRequest<span class="token punctuation">,</span></pre></td></tr></table></figure><p>异常正常滑动触发的事件顺序</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre>onMoveShouldSetPanResponderCapture</pre></td></tr><tr><td data-num="2"></td><td><pre>onPanResponderGrant</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">onPanResponderMove</span><span class="token punctuation">(</span>可能没有<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>onPanResponderEnd</pre></td></tr></table></figure><h6 id="动画基本用法"><a class="anchor" href="#动画基本用法">#</a> <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2FuaW1hdGVkIyVFOCU4NyVBQSVFNSVBRSU5QSVFNCVCOSU4OSVFNSU4QSVBOCVFNyU5NCVCQiVFNyVCQiU4NCVFNCVCQiVCNg==">动画基本用法</span></h6>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">MyView</span> <span class="token operator">=</span> <span class="token punctuation">(</span>prop<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token keyword">const</span> <span class="token punctuation">[</span>scaleValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animated</span><span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token keyword">const</span> <span class="token function-variable function">showAnimation</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Animated<span class="token punctuation">.</span><span class="token function">timing</span><span class="token punctuation">(</span>scaleValue<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      toValue<span class="token operator">:</span> <span class="token number">0.75</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>      duration<span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>      useNativeDriver<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>Animated<span class="token punctuation">.</span>Image</pre></td></tr><tr><td data-num="11"></td><td><pre>    source<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">0</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="12"></td><td><pre>    style<span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>swig￼<span class="token number">1</span><span class="token operator">--</span><span class="token operator">></span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token operator">/</span><span class="token operator">></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ol>
<li>动画值必须放在 state 中保存起来</li>
<li>放大，缩小动画必须放在 style 的 <code>transform</code>  属性上，透明度动画必须放在 style 的 <code>opacity</code>  属性上</li>
</ol>
<h6 id="软键盘"><a class="anchor" href="#软键盘">#</a> <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL25leHQva2V5Ym9hcmQ=">软键盘</span></h6>
<p><span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL25leHQva2V5Ym9hcmQjZGlzbWlzcw==">收起软键盘 </span>   <span class="exturl" data-url="aHR0cHM6Ly9yZWFjdG5hdGl2ZS5jbi9kb2NzL2tleWJvYXJkYXZvaWRpbmd2aWV3">处理软键盘遮挡问题</span></p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">&lt;</span>KeyboardAvoidingView</pre></td></tr><tr><td data-num="2"></td><td><pre>    behavior<span class="token operator">=</span><span class="token string">'position'</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    keyboardVerticalOffset<span class="token operator">=</span><span class="token number">40</span> <span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>KeyboardAvoidingView<span class="token operator">></span></pre></td></tr></table></figure><h2 id="问题场景"><a class="anchor" href="#问题场景">#</a> 问题场景</h2>
<h6 id="1不能在useeffectusecallback中定义一个回调形式的闭包去读取usestate的值用useref形式读取可能修改的变量"><a class="anchor" href="#1不能在useeffectusecallback中定义一个回调形式的闭包去读取usestate的值用useref形式读取可能修改的变量">#</a> 1. 不能在 useEffect,useCallback 中定义一个回调形式的闭包去读取 useState 的值，用 useRef 形式读取可能修改的变量</h6>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 错误写法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> <span class="token function-variable function">View</span> <span class="token operator">=</span> <span class="token punctuation">(</span>prop<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">const</span> <span class="token punctuation">[</span>followState<span class="token punctuation">,</span> setFollowState<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>isFollow<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">const</span> <span class="token function-variable function">listener</span> <span class="token operator">=</span> <span class="token punctuation">(</span>map<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">boolean</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">const</span> isFollow <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>uid<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>followState<span class="token punctuation">.</span>isFollow <span class="token operator">!=</span> isFollow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不能这样子去读取当前组件的 followState</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token function">setFollowState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>isFollow<span class="token operator">:</span> isFollow<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token function">addFollowListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token function">removeFollowListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token comment">// 因为 listener 对象只在页面加载完毕进行有且一次的初始化，无论后续 followState 怎么变化，listener 闭包里拿到的 followState 都是第一次的值</span></pre></td></tr></table></figure><h6 id="2flatlist全屏上下滑定位到初始渲染位置的场景需要设置initialscrollindex和getitemlayout属性"><a class="anchor" href="#2flatlist全屏上下滑定位到初始渲染位置的场景需要设置initialscrollindex和getitemlayout属性">#</a> 2.FlatList 全屏上下滑，定位到初始渲染位置的场景，需要设置 initialScrollIndex 和 getItemLayout 属性</h6>
<blockquote>
<p>但 item 的高度是通过一个全屏的 view 的 onLayout 方法确定下来的，在存在 StatusBar 场景下，onLayout 方法多次回调，返回的高度也是变化的，导致 FlatList 出现渲染偏移的问题</p>
</blockquote>
<p><em><strong>解决方法</strong>：给 FlatList 设置 key 属性，每一次高度变化，变化 key 属性，渲染一个全选的 FlatList</em></p>
<h6 id="3注意-booleanfalse-returns-true"><a class="anchor" href="#3注意-booleanfalse-returns-true">#</a> 3. 注意 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTY5Nzc1MDAvYm9vbGVhbmZhbHNlLXJldHVybnMtdHJ1ZQ==">Boolean('false') returns true</span></h6>
<h6 id="4-image的scource属性中不能使用state变量来动态切换图片"><a class="anchor" href="#4-image的scource属性中不能使用state变量来动态切换图片">#</a> 4. Image 的 scource 属性中不能使用 state 变量来动态切换图片</h6>
<pre><code class="language-react">// 不合法写法
&lt;Image  source=&#123;xxx ?require('../imgs/a.svg') : require('../imgs/b.svg')  &#125; /&gt;
//合法写法
&#123;xxx?(&lt;Image source=&#123;require('../imgs/a.svg')&#125;/&gt;):(&lt;Image source=&#123;require('../imgs/b.svg')&#125;/&gt;)&#125;
//或者在return块之前定义个const变量，return块中使用该变量
</code></pre>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>React-Native</category>
      </categories>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>ASM知识点</title>
    <url>/post/3098f3f8.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC8xNmVkNGQyMzNmZDE=">【Android】函数插桩（Gradle + ASM）</span></p>
<p>通过上面的大神教程，学习在自定义函数前后进行插桩，满足打点日志的需求。</p>
<p>但如果想要知道 APP 中什么时候调用系统的方法，例如想要知道 APP【哪些地方】【什么时候】调用了 context.getSystemService () 方法，以及当时的堆栈，</p>
<p>Hook 替换掉 context.getSystemService () 这一行代码为是最简单的操作</p>
<p><em>利用 ASM 的  <strong>AdviceAdapter</strong> 类和  <strong>INVOKESTATIC</strong>  操作码很容易就实现函数的 Hook 替换功能</em></p>
<p><span id="more"></span></p>
<h2 id="1自定义adviceadapter"><a class="anchor" href="#1自定义adviceadapter">#</a> 1. 自定义 AdviceAdapter</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token function">MethodHookAdapter</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    mv<span class="token operator">:</span> MethodVisitor<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    desc<span class="token operator">:</span> String<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    name<span class="token operator">:</span> String<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    access<span class="token operator">:</span> Int</pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">AdviceAdapter</span><span class="token punctuation">(</span>Opcodes<span class="token punctuation">.</span>ASM5<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> access<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">visitMethodInsn</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        opcode<span class="token operator">:</span> Int<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        owner<span class="token operator">:</span> String<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        name<span class="token operator">:</span> String<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        descriptor<span class="token operator">:</span> String<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        isInterface<span class="token operator">:</span> Boolean</pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isHook</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span>owner<span class="token punctuation">,</span>name<span class="token punctuation">,</span>descriptor<span class="token punctuation">,</span>isInterface<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token comment">// 满足 hook 条件，则替换成自定义的 static 函数</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                INVOKESTATIC<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                newOwner<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                newMethodName<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                newMethodDesc<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                <span class="token boolean">false</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span>opcode<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> name<span class="token punctuation">,</span> descriptor<span class="token punctuation">,</span> isInterface<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但对自定义 Hook 函数的 newMethodDesc 有一定的要求</p>
<pre><code>如果hook的函数是实例对象的函数，即操作码是INVOKESPECIAL。自定义Hook函数的参数列表必须是 [要Hook的对象类，Hook函数原本的参数列表]
如果hook的函数是静态函数，即操作码是INVOKESTATIC。自定义Hook函数的参数列表则保持一致    [Hook函数原本的参数列表]
</code></pre>
<p>用例代码：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HookA</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	</pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment">//hook A.a () 方法，参数列表最前面必须加个 A 的参数</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hookA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    </pre></td></tr><tr><td data-num="16"></td><td><pre>	<span class="token comment">//hook A.b () 方法，参数列表保持一致</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hookB</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="2hook参数列表为什么必须这样子设计"><a class="anchor" href="#2hook参数列表为什么必须这样子设计">#</a> 2.Hook 参数列表为什么必须这样子设计？</h2>
<h6 id="分析字节码-1"><a class="anchor" href="#分析字节码-1">#</a> <em>分析字节码 - 1</em></h6>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>void <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    Context context<span class="token operator">=</span> new <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 调用实例方法</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Object systemService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span>WINDOW_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 下面为上面 a 函数的字节码</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>method <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>V</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>registers <span class="token number">3</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">9</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 调用 Activity () 方法，将返回值放进 v0 寄存器中</span></pre></td></tr><tr><td data-num="15"></td><td><pre>new<span class="token operator">-</span>instance v0<span class="token punctuation">,</span> Landroid<span class="token operator">/</span>app<span class="token operator">/</span>Activity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 调用 v0 寄存器中的实例对象的 init 方法</span></pre></td></tr><tr><td data-num="17"></td><td><pre>invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Landroid<span class="token operator">/</span>app<span class="token operator">/</span>Activity<span class="token punctuation">;</span><span class="token operator">-></span><span class="token operator">&lt;</span><span class="token keyword">init</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>V</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">10</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>local v0<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"context"</span></span><span class="token operator">:</span>Landroid<span class="token operator">/</span>content<span class="token operator">/</span>Context<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 将字符串 "window" 赋值给寄存器 v1</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span><span class="token operator">-</span>string v1<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"window"</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 调用 v0 寄存器中的值的 getSystemService (String) 方法，参数内容是 v1 寄存器内的值</span></pre></td></tr><tr><td data-num="25"></td><td><pre>invoke<span class="token operator">-</span>virtual <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Landroid<span class="token operator">/</span>content<span class="token operator">/</span>Context<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">getSystemService</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 前一个方法调用的返回值存储到寄存器 v1 中。</span></pre></td></tr><tr><td data-num="27"></td><td><pre>move<span class="token operator">-</span>result<span class="token operator">-</span><span class="token keyword">object</span> v1</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">11</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">.</span>local v1<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"systemService"</span></span><span class="token operator">:</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span><span class="token operator">-</span>void</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">.</span>end method</pre></td></tr></table></figure><h6 id="分析字节码-2"><a class="anchor" href="#分析字节码-2">#</a> <em>分析字节码 - 2</em></h6>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>void <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    Context context<span class="token operator">=</span> new <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 调用静态方法</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    Object systemService <span class="token operator">=</span> Hook<span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span>Context<span class="token punctuation">.</span>WINDOW_SERVICE<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 下面为上面 a 函数的字节码</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">.</span>method <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>V</pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">.</span>registers <span class="token number">3</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">9</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 调用 Activity () 方法，将返回值放进 v0 寄存器中</span></pre></td></tr><tr><td data-num="15"></td><td><pre>new<span class="token operator">-</span>instance v0<span class="token punctuation">,</span> Landroid<span class="token operator">/</span>app<span class="token operator">/</span>Activity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token comment">// 调用 v0 寄存器中的实例对象的 init 方法</span></pre></td></tr><tr><td data-num="17"></td><td><pre>invoke<span class="token operator">-</span>direct <span class="token punctuation">&#123;</span>v0<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Landroid<span class="token operator">/</span>app<span class="token operator">/</span>Activity<span class="token punctuation">;</span><span class="token operator">-></span><span class="token operator">&lt;</span><span class="token keyword">init</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span>V</pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">10</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">.</span>local v0<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"context"</span></span><span class="token operator">:</span>Landroid<span class="token operator">/</span>content<span class="token operator">/</span>Context<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token comment">// 将字符串 "window" 赋值给寄存器 v1</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">const</span><span class="token operator">-</span>string v1<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"window"</span></span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token comment">// 调用静态方法 hook，参数内容是（v0 寄存器内的值，v1 寄存器内的值）</span></pre></td></tr><tr><td data-num="25"></td><td><pre>invoke<span class="token operator">-</span>static <span class="token punctuation">&#123;</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> Lcom<span class="token operator">/</span>test<span class="token operator">/</span>Hook<span class="token punctuation">;</span><span class="token operator">-></span><span class="token function">hook</span><span class="token punctuation">(</span>Landroid<span class="token operator">/</span>content<span class="token operator">/</span>Context<span class="token punctuation">;</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment">// 前一个方法调用的返回值存储到寄存器 v1 中。</span></pre></td></tr><tr><td data-num="27"></td><td><pre>move<span class="token operator">-</span>result<span class="token operator">-</span><span class="token keyword">object</span> v1</pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">.</span>line <span class="token number">11</span></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token punctuation">.</span>local v1<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"systemService"</span></span><span class="token operator">:</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">return</span><span class="token operator">-</span>void</pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">.</span>end method</pre></td></tr></table></figure><p><strong>可以看出  invoke-virtual {v0, v1}  和 invoke-static {v0, v1} 主要的区别是</strong>:</p>
<ol>
<li><strong>invoke-virtual 中的 v0 是作为实例对象的寄存器。相当于 --》  v0.fun (v1)</strong></li>
<li><strong>invoke-static 中的 v0 是作为参数的寄存器。相当于 --》  fun (v0 , v1)</strong></li>
</ol>
<p><strong>一个 invoke-virtual 场景下的函数调用，操作栈中一定有 1 + 参数个数个变量</strong></p>
<p><strong>一个 invoke-static 场景下的函数调用，操作栈中只有参数个数个变量</strong></p>
<p>回头看一下第一步的 Hook 代码，我们将 invoke-virtual 场景下的函数调用替换成 invoke-static 调用，所以 hook 类的静态函数必须多出一个参数来承接 <em><strong>实例对象变量</strong></em></p>
<h2 id="3再看一下两个场景下的asm码"><a class="anchor" href="#3再看一下两个场景下的asm码">#</a> 3. 再看一下两个场景下的 ASM 码</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Context</span> context<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 调用实例方法</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Object</span> systemService <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getSystemService</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">WINDOW_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 下面为 ASM 码</span></pre></td></tr><tr><td data-num="7"></td><td><pre>methodVisitor <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token constant">NEW</span><span class="token punctuation">,</span> <span class="token string">"android/app/Activity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">DUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESPECIAL</span><span class="token punctuation">,</span> <span class="token string">"android/app/Activity"</span><span class="token punctuation">,</span> <span class="token string">"&lt;init>"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//Hook 点，Hook 前的代码</span></pre></td></tr><tr><td data-num="16"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKEVIRTUAL</span><span class="token punctuation">,</span> <span class="token string">"android/content/Context"</span><span class="token punctuation">,</span> <span class="token string">"getSystemService"</span><span class="token punctuation">,</span> <span class="token string">"(Ljava/lang/String;)Ljava/lang/Object;"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">Context</span> context<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 调用静态方法</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">Object</span> systemService <span class="token operator">=</span> <span class="token class-name">Hook</span><span class="token punctuation">.</span><span class="token function">hook</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">WINDOW_SERVICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>methodVisitor <span class="token operator">=</span> classWriter<span class="token punctuation">.</span><span class="token function">visitMethod</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitTypeInsn</span><span class="token punctuation">(</span><span class="token constant">NEW</span><span class="token punctuation">,</span> <span class="token string">"android/app/Activity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">DUP</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESPECIAL</span><span class="token punctuation">,</span> <span class="token string">"android/app/Activity"</span><span class="token punctuation">,</span> <span class="token string">"&lt;init>"</span><span class="token punctuation">,</span> <span class="token string">"()V"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ALOAD</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitLdcInsn</span><span class="token punctuation">(</span><span class="token string">"window"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//Hook 点，Hook 后的代码</span></pre></td></tr><tr><td data-num="16"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMethodInsn</span><span class="token punctuation">(</span><span class="token constant">INVOKESTATIC</span><span class="token punctuation">,</span> <span class="token string">"com/Hook"</span><span class="token punctuation">,</span> <span class="token string">"hook"</span><span class="token punctuation">,</span> <span class="token string">"(Landroid/content/Context;Ljava/lang/String;)Ljava/lang/Object;"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitVarInsn</span><span class="token punctuation">(</span><span class="token constant">ASTORE</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitInsn</span><span class="token punctuation">(</span><span class="token constant">RETURN</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitMaxs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>methodVisitor<span class="token punctuation">.</span><span class="token function">visitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ASM</tag>
        <tag>HOOK</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView曝光踩坑-1</title>
    <url>/post/22258c7a.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTQ5MTg2ODg3NjA5MjIxMTMz">万字长文 - 史上最全 ConstraintLayout</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzQxMmQ1MTU1Lmh0bWw=">RecyclerView 曝光踩坑 - 2</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzM2MmE2MWMzLmh0bWw=">RecyclerView 曝光踩坑 - 3</span></p>
<p>基于 RecyclerView 1.2.1 版本分析</p>
<h2 id="1一次recyclerview的item曝光需求产生的bug对constraintlayout的分析"><a class="anchor" href="#1一次recyclerview的item曝光需求产生的bug对constraintlayout的分析">#</a> 1. 一次 Recyclerview 的 item 曝光需求产生的 BUG 对 ConstraintLayout 的分析</h2>
<p>曝光逻辑是在 ViewHolder 的 onViewAttachedToWindow 进行上报，</p>
<p>最后却发现 Recyclerview 第一次刷新数据时 发现不在屏幕上的 viewholder 也调用了 onViewAttachedToWindow 方法，导致多余非法上报</p>
<blockquote>
<p>&lt;font color=&quot;red&quot;&gt; 测试发现是部分 viewholder 快速进行了 onViewAttachedToWindow，然后 onViewDetachedFromWindow 的操作 &lt;/font&gt;</p>
</blockquote>
<p><span id="more"></span></p>
<p><strong>xml 布局</strong></p>
<p>&lt;img src=&quot;<span class="exturl" data-url="aHR0cHM6Ly9zMy5ibXAub3ZoL2ltZ3MvMjAyMy8wNS8xMi82ZGNkMTdkMzQ5ODAzYTdiLmpwZw==">https://s3.bmp.ovh/imgs/2023/05/12/6dcd17d349803a7b.jpg</span>&quot; style=&quot;zoom:80%;&quot; /&gt;</p>
<pre><code>class MyRecyclerView @JvmOverloads constructor(
    context: Context,
    attrs: AttributeSet? = null,
    defStyle: Int = 0
) : RecyclerView(context, attrs, defStyle) &#123;

    override fun onMeasure(widthSpec: Int, heightSpec: Int) &#123;
        super.onMeasure(widthSpec, heightSpec)
        Log.i(&quot;MyRecyclerView&quot;, &quot;$&#123;MeasureSpec.getMode(heightSpec)&#125; ,$&#123;MeasureSpec.getSize(heightSpec)&#125;&quot;)
    &#125;
&#125;
</code></pre>
<pre><code>MeasureSpec.EXACTLY   1073741824
MeasureSpec.AT_MOST   -2147483648
MeasureSpec.UNSPECIFIED  0
</code></pre>
<p>上面的布局看起来很正常，大多数场景下都可能用到这样子的布局，但就是这样子的布局导致的 Log 日志是</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token number">2023</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">21.830</span>  <span class="token number">3206</span><span class="token operator">-</span><span class="token number">3206</span>  MyRecyclerView          com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testcode                 I  <span class="token operator">-</span><span class="token number">2147483648</span> <span class="token punctuation">,</span><span class="token number">2151</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token number">2023</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">21.832</span>  <span class="token number">3206</span><span class="token operator">-</span><span class="token number">3206</span>  MyRecyclerView          com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testcode                 I  <span class="token number">1073741824</span> <span class="token punctuation">,</span><span class="token number">776</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token number">2023</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">21.847</span>  <span class="token number">3206</span><span class="token operator">-</span><span class="token number">3206</span>  MyRecyclerView          com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testcode                 I  <span class="token operator">-</span><span class="token number">2147483648</span> <span class="token punctuation">,</span><span class="token number">2151</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token number">2023</span><span class="token operator">-</span><span class="token number">05</span><span class="token operator">-</span><span class="token number">12</span> <span class="token number">17</span><span class="token operator">:</span><span class="token number">30</span><span class="token operator">:</span><span class="token number">21.849</span>  <span class="token number">3206</span><span class="token operator">-</span><span class="token number">3206</span>  MyRecyclerView          com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>testcode                 I  <span class="token number">1073741824</span> <span class="token punctuation">,</span><span class="token number">776</span></pre></td></tr></table></figure><p>进入 Activity，页面会被绘制两次，ConstraintLayout 也会绘制两次，所以形成了四次输出，我们只需要看第一和第二次输出</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI2Mjg3NDM1L2FydGljbGUvZGV0YWlscy8xMjMyNzQzNDI=">进入 Activity 时，为何页面布局内 View#onMeasure 会被调用两次</span></p>
<p>第一输出的是 MyRecyclerView 父布局的高度，这个是因为 ConstraintLayout 的子 view 相互影响布局，第一次无法确定高度导致的</p>
<p>第二次输出才是 MyRecyclerView 自身的高度</p>
<p>RecyclerView 的 onMeasure 方法</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">protected</span> void <span class="token function">onMeasure</span><span class="token punctuation">(</span>int widthSpec<span class="token punctuation">,</span> int heightSpec<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mLayout <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有 layoutmanager</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">defaultOnMeasure</span><span class="token punctuation">(</span>widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">isAutoMeasureEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 自动测量，系统的 layoutmanager 都是开启的，所以一般不进入该分支</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mHasFixedSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mRecycler<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">,</span> widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mAdapterUpdateDuringMeasure<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startInterceptRequestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onEnterLayoutOrScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processAdapterUpdatesAndSetAnimationFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">onExitLayoutOrScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mRunPredictiveAnimations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mInPreLayout <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mAdapterHelper<span class="token punctuation">.</span><span class="token function">consumeUpdatesInOnePass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mInPreLayout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mAdapterUpdateDuringMeasure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopInterceptRequestLayout</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mRunPredictiveAnimations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setMeasuredDimension</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mAdapter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mItemCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mAdapter<span class="token punctuation">.</span><span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mItemCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">startInterceptRequestLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mRecycler<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">,</span> widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">stopInterceptRequestLayout</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mInPreLayout <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 经常都是走这个分支</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            int widthMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>widthSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            int heightMode <span class="token operator">=</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">getMode</span><span class="token punctuation">(</span>heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">onMeasure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mRecycler<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">,</span> widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLastAutoMeasureSkippedDueToExact <span class="token operator">=</span> widthMode <span class="token operator">==</span> <span class="token number">1073741824</span> <span class="token operator">&amp;&amp;</span> heightMode <span class="token operator">==</span> <span class="token number">1073741824</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            <span class="token comment">// 当宽高都是 EXACTLY 时，直接 return</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mLastAutoMeasureSkippedDueToExact <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mAdapter <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>			<span class="token comment">// 走到这里说明 Recyclerivew 是不确定宽高，这时候 onMeasure 方法会调用 dispatchLayoutStep2，导致 addView</span></pre></td></tr><tr><td data-num="50"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mLayoutStep <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchLayoutStep1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">setMeasureSpecs</span><span class="token punctuation">(</span>widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mIsMeasuring <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchLayoutStep2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">setMeasuredDimensionFromChildren</span><span class="token punctuation">(</span>widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">shouldMeasureTwice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">setMeasureSpecs</span><span class="token punctuation">(</span>MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1073741824</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MeasureSpec<span class="token punctuation">.</span><span class="token function">makeMeasureSpec</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1073741824</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mIsMeasuring <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatchLayoutStep2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mLayout<span class="token punctuation">.</span><span class="token function">setMeasuredDimensionFromChildren</span><span class="token punctuation">(</span>widthSpec<span class="token punctuation">,</span> heightSpec<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre></pre></td></tr><tr><td data-num="65"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLastAutoMeasureNonExactMeasuredWidth <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mLastAutoMeasureNonExactMeasuredHeight <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMeasuredHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>当 RecyclerView 宽高不确定时，viewholder 的 onViewAttachedToWindow 是在 addView 时被调用，addView 是在 Recyclerview 的 onMeasuer 时被调用</strong></p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/05/12/63478300924c3186.jpg" alt="" /></p>
<p><strong>所以正是因为第一次传入的错误高度以及 Recyclerivew 不确定的宽高条件下，导致 RecyclerView 在 measure 阶段 add 了多余的 View，又在 layout 阶段拿到正确高度的影响下，detach 掉 导致的问题</strong></p>
<h2 id="解决方案让recyclerview的measure阶段不进行addview操作"><a class="anchor" href="#解决方案让recyclerview的measure阶段不进行addview操作">#</a> 解决方案（让 RecyclerView 的 measure 阶段不进行 addView 操作）</h2>
<p>RecyclerView 的 measure 阶段不进行 addView 操作  -》》measure 阶段能拿到 EXACTLY 的宽高</p>
<p>1. 不用 ConstraintLayout，使用 LinearLayout，让 RecyclerView 从始至终都拿到正确的布局高度</p>
<p>2. 破坏链式约束</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/05/12/38f2bd35454f0c3a.jpg" alt="" /></p>
<p>ConstraintLayout 内部不要形成链式的约束，这样子 ConstraintLayout 第一次就能知道 RecyclerView 需要的高度是多少</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
        <tag>ConstraintLayout</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView曝光踩坑-2</title>
    <url>/post/412d5155.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzIyMjU4YzdhLmh0bWw=">RecyclerView 曝光踩坑 - 1</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzM2MmE2MWMzLmh0bWw=">RecyclerView 曝光踩坑 - 3</span></p>
<p>基于 RecyclerView 1.2.1 版本分析</p>
<p><em>问题场景是 发现屏幕内的一个豆腐块调用 notifyItemChanged 后，会导致屏幕外的 viewHolder 的 onViewAttachedToWindow 也会被调用</em></p>
<p><span id="more"></span></p>
<h2 id="1notifyitemchanged导致不在屏幕上的viewholder曝光"><a class="anchor" href="#1notifyitemchanged导致不在屏幕上的viewholder曝光">#</a> 1.notifyItemChanged 导致不在屏幕上的 viewHolder 曝光</h2>
<p>RecyclerView 场景：</p>
<pre><code>-----------
| 1     2 |
| 3     4 |
| 5     6 |
| 7     8 |
----------
  9    10
</code></pre>
<p>当 notifyItemChanged 位置 1 时，&lt;font color=&quot;red&quot;&gt; 位置 9 和位置 10 的 onViewAttachedToWindow 会被调用 &lt;/font&gt;，导致不断上报错误的曝光数据。</p>
<p>特别是位置 1 需要持续刷新，调用 notifyItemChanged，上报的错误量不断增加。</p>
<p><em>前提：要了解 RecyclerView 基本的 Layout 逻辑</em></p>
<p><strong>基础调用链：</strong></p>
<p><strong>RecyclerView                        --                  dispatchLayout()</strong></p>
<p><strong>RecyclerView                        --                  dispatchLayoutStep1()</strong></p>
<p><strong>LinearLayoutManager        --                  onLayoutChildren()</strong></p>
<p><strong>LinearLayoutManager        --                  fill()</strong></p>
<p>分析：</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//LinearLayoutManager 类   fill 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> <span class="token function">fill</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>Recycler</span> recycler<span class="token punctuation">,</span> <span class="token class-name">LayoutState</span> layoutState<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>         <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span> <span class="token keyword">boolean</span> stopOnFocusable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  	<span class="token comment">// 可用空间</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">int</span> remainingSpace <span class="token operator">=</span> layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">+</span> layoutState<span class="token punctuation">.</span>mExtraFillSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//layout 完子 item 后，子 item 的相关数据的封装类</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">LayoutChunkResult</span> layoutChunkResult <span class="token operator">=</span> mLayoutChunkResult<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 不断地判断 可用空间，若大于零则不断加入 View</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mInfinite <span class="token operator">||</span> remainingSpace <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> layoutState<span class="token punctuation">.</span><span class="token function">hasMore</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 初始化 layoutChunkResult</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        layoutChunkResult<span class="token punctuation">.</span><span class="token function">resetInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token comment">// 正在布局子 item, 并将 layout 完，将子 item 的相关数据封装在 layoutChunkResult 中</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token function">layoutChunk</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> state<span class="token punctuation">,</span> layoutState<span class="token punctuation">,</span> layoutChunkResult<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        </pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutChunkResult<span class="token punctuation">.</span>mFinished<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token comment">// 增加偏移量</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        layoutState<span class="token punctuation">.</span>mOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed <span class="token operator">*</span> layoutState<span class="token punctuation">.</span>mLayoutDirection<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        </pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token comment">// 关键代码，提取 layout 的消耗空间，将可用空间不断减少</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// 是条件进入的，说明有些情况，即使我们 addView 了，也不会消耗可用空间，RecyclerView 会继续 while 循环 addView</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token comment">// 我们的 BUG 是因为第一个判断导致的，即 mIgnoreConsumed 为 ture。通常该变量都是 false 的</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>layoutChunkResult<span class="token punctuation">.</span>mIgnoreConsumed <span class="token operator">||</span> layoutState<span class="token punctuation">.</span>mScrapList <span class="token operator">!=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token operator">||</span> <span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">isPreLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">-=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>           	<span class="token comment">// 可用空间不断减少</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            remainingSpace <span class="token operator">-=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">!=</span> <span class="token class-name">LayoutState<span class="token punctuation">.</span>SCROLLING_OFFSET_NaN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutChunkResult<span class="token punctuation">.</span>mConsumed<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                layoutState<span class="token punctuation">.</span>mScrollingOffset <span class="token operator">+=</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token function">recycleByLayoutState</span><span class="token punctuation">(</span>recycler<span class="token punctuation">,</span> layoutState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stopOnFocusable <span class="token operator">&amp;&amp;</span> layoutChunkResult<span class="token punctuation">.</span>mFocusable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">return</span> start <span class="token operator">-</span> layoutState<span class="token punctuation">.</span>mAvailable<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>什么情况下 mIgnoreConsumed 是 true 呢，继续跟进 layoutChunk 函数</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//LinearLayoutManager 类   fill 函数</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">layoutChunk</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>Recycler</span> recycler<span class="token punctuation">,</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                 <span class="token class-name">LayoutState</span> layoutState<span class="token punctuation">,</span> <span class="token class-name">LayoutChunkResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">///...</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token class-name">View</span> view <span class="token operator">=</span> layoutState<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>recycler<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">LayoutParams</span> params <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">LayoutParams</span><span class="token punctuation">)</span> view<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>     <span class="token comment">// 如果该 view 是 remove 状态或者是 change 状态，将 mIgnoreConsumed 设置 false，不消化可用空间</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">isItemRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> params<span class="token punctuation">.</span><span class="token function">isItemChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        result<span class="token punctuation">.</span>mIgnoreConsumed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">///...</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>由上面可以看出，当对应的 view 是 change 状态时，addView 也不会消耗 RecyclerView 的可用空间，让 RecyclerView 可以 add 进更多的 View</p>
<h2 id="总结问题原因"><a class="anchor" href="#总结问题原因">#</a> 总结问题原因</h2>
<p>因为我们 notifyItemChanged 位置 1 导致布局重新绘制，同时将位置 1 的 view 设置成 change 状态。在绘制过程中，位置位置 1，2 所在的那一行豆腐块虽然被绘制了，但不消化可用空间的值，对应 RecyclerView 来说相当于多了一行豆腐块绘制空间，让位置 9，10 的豆腐块可以被 addView 和 attach。在后续 dispatchLayoutStep3 中中又会将不在屏幕的 view 移除掉。造成位置 9 和 10 的 viewholder 不断的 attach 和 detach。</p>
<h2 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h2>
<p>从代码上判断，这个是 RecyclerView 的正常绘制逻辑，无法避免。</p>
<p>RecyclerView 在 dispatchLayoutStep1 中多 add 一些 view，dispatchLayoutStep3 中将不合适的 view 移出去，达到动画效果。</p>
<p>dispatchLayoutStep1 和 dispatchLayoutStep3 都是在一个消息循环中完成的，所以我们可以通过 post 操作完成曝光和取消曝光的功能。</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> task<span class="token operator">=</span> Runnable <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token comment">// 曝光逻辑</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewAttachedToWindow</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> BaseViewHolder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewDetachedFromWindow</span><span class="token punctuation">(</span>holder<span class="token operator">:</span> BaseViewHolder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    holder<span class="token punctuation">.</span>itemView<span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView曝光踩坑-3</title>
    <url>/post/362a61c3.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzIyMjU4YzdhLmh0bWw=">RecyclerView 曝光踩坑 - 1</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9sYW5zaHVzaHVpLmdpdGh1Yi5pby9wb3N0LzQxMmQ1MTU1Lmh0bWw=">RecyclerView 曝光踩坑 - 2</span></p>
<p>背景： 使用 RecyclerView+PagerSnapHelper 实现一页一页滑动的效果。</p>
<p>使用 RecyclerView 的 smoothScrollToPosition 实现自动滑页功能。</p>
<p>当从第一页自动滑向第二页，第二页和第三页的都会被调用 onViewAttachedToWindow，导致多余页面上报。</p>
<p><span id="more"></span></p>
<h2 id="首先让我们看一下问题场景下的-debug-信息"><a class="anchor" href="#首先让我们看一下问题场景下的-debug-信息">#</a> 首先让我们看一下问题场景下的 DEBUG 信息</h2>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/08/07/5d9ab8ba137383e8.jpg" alt="" /></p>
<p>LinearLayoutManager 的 fill 函数是布局关键函数，不了解的先去了解一下，这里就不仔细讲了。</p>
<p>remainingSpace 是布局可用空间，截图数值为 265。是由 **【layoutState.mAvailable 的 1px】和【layoutState.mExtraFillSpace 的 264px】** 组成。</p>
<p><strong>我的用例场景一页宽度就是 264px</strong>。所以导致会加载进两个页面，导致问题的出现。</p>
<p>让我们来分析下 **【 layoutState.mAvailable 的 1px】 和 【layoutState.mExtraFillSpace 的 264px】**   是如何产生的？这有利于我们解决问题</p>
<h2 id="1分析smoothscrolltoposition实现逻辑"><a class="anchor" href="#1分析smoothscrolltoposition实现逻辑">#</a> 1. 分析 smoothScrollToPosition 实现逻辑</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//RecyclerView</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span><span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    mLayout<span class="token punctuation">.</span><span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> mState<span class="token punctuation">,</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">//LinearLayoutManager</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span> recyclerView<span class="token punctuation">,</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                                   <span class="token keyword">int</span> position<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">LinearSmoothScroller</span> linearSmoothScroller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinearSmoothScroller</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 设置目标位置</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    linearSmoothScroller<span class="token punctuation">.</span><span class="token function">setTargetPosition</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    linearSmoothScroller<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//SmoothScroller</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView</span> recyclerView<span class="token punctuation">,</span> <span class="token class-name">LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">// 停止上一个 mViewFlinger</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    recyclerView<span class="token punctuation">.</span>mViewFlinger<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    </pre></td></tr><tr><td data-num="21"></td><td><pre>	<span class="token comment">//google 建议我们每一次滑动都创建一个新的 SmoothScroller，LinearLayoutManager 正是这样子操作的，我们自定义 LayoutManger 注意一下</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mStarted<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">"An instance of "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" was started "</span></pre></td></tr><tr><td data-num="24"></td><td><pre>              <span class="token operator">+</span> <span class="token string">"more than once. Each instance of"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span></pre></td></tr><tr><td data-num="25"></td><td><pre>              <span class="token operator">+</span> <span class="token string">"is intended to only be used once. You should create a new instance for "</span></pre></td></tr><tr><td data-num="26"></td><td><pre>              <span class="token operator">+</span> <span class="token string">"each use."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    mRecyclerView <span class="token operator">=</span> recyclerView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    mLayoutManager <span class="token operator">=</span> layoutManager<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mTargetPosition <span class="token operator">==</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">NO_POSITION</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Invalid target position"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">// 通知 mRecyclerView 要滑动到的目前位置</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    mRecyclerView<span class="token punctuation">.</span>mState<span class="token punctuation">.</span>mTargetPosition <span class="token operator">=</span> mTargetPosition<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    mRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">// 标志为等待执行</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    mPendingInitialRun <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">// 这里很重要，会尝试在已有布局中找是否存在目标 View，找不到就是 null。  我们的案例是一页一页滑动的，所以是肯定找不到下一个页的 View</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    mTargetView <span class="token operator">=</span> <span class="token function">findViewByPosition</span><span class="token punctuation">(</span><span class="token function">getTargetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token comment">//onStart 空实现</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">// 最重要的是这里，调用 mViewFlinger 的 postOnAnimation 实现滑动</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">//ViewFlinger 就是个 Runnable, 下面会分析</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    mRecyclerView<span class="token punctuation">.</span>mViewFlinger<span class="token punctuation">.</span><span class="token function">postOnAnimation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre></pre></td></tr><tr><td data-num="47"></td><td><pre>    mStarted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>总结：调用 RecyclerView 的 smoothScrollToPosition 会一路跑到 SmoothScroller 的 start 方法，启用 ViewFlinger。</p>
<p>这里面最重要的逻辑是</p>
<ul>
<li>​     赋值 SmoothScroller 的 mTargetPosition，mPendingInitialRun 设为 true，标志为等待执行，并尝试给 mTargetView 赋值</li>
<li>​     调用 ViewFlinger 的 postOnAnimation 开始动画</li>
</ul>
<h2 id="2简单分析viewflinger"><a class="anchor" href="#2简单分析viewflinger">#</a> 2. 简单分析 ViewFlinger</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//RecyclerView 的内部类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">ViewFlinger</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token comment">// 第一段代码   尝试滑动消费，一旦 smoothScroller.onAnimation 被调用，isPendingInitialRun 设置成 false</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scroller<span class="token punctuation">.</span><span class="token function">computeScrollOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token comment">//......</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            smoothScroller<span class="token punctuation">.</span><span class="token function">onAnimation</span><span class="token punctuation">(</span>consumedX<span class="token punctuation">,</span> consumedY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token comment">//......</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token comment">// 第二段代码   如果 isPendingInitialRun 还是 true，即第一段代码没有被调用，   传入 0，0 ，让 smoothScroller 至少要被调用 1 次</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>smoothScroller <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> smoothScroller<span class="token punctuation">.</span><span class="token function">isPendingInitialRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            smoothScroller<span class="token punctuation">.</span><span class="token function">onAnimation</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><ul>
<li>ViewFlinger 是个 Runnable，主要看 run 方法，可以看出滑动的逻辑主要还是 Scroller。</li>
<li>但我们 smoothScrollToPosition 一路走下来，只是设置了 mTargetPosition，并不会对 ViewFlinger 的 mOverScroller 做出任何改变，它没有任何滑动数据，所以 scroller.computeScrollOffset () 会返回 false， smoothScroller.onAnimation 不会在第一段代码中被调用</li>
<li>走向了第二段代码，又跑回了 SmoothScroller 的 onAnimation 方法</li>
</ul>
<h2 id="3简单分析smoothscroller"><a class="anchor" href="#3简单分析smoothscroller">#</a> 3. 简单分析 SmoothScroller</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">onAnimation</span><span class="token punctuation">(</span><span class="token keyword">int</span> dx<span class="token punctuation">,</span> <span class="token keyword">int</span> dy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre> </pre></td></tr><tr><td data-num="3"></td><td><pre>	<span class="token comment">// 下面的 if 块存在可以让 LayoutManager 在正确的位置滚动 1 个像素方向，以便使 LayoutManager 绘制两页的视图，</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 因此 在进一步滚动之前可以找到目标视图。这样做是为了防止初始滚动距离滚动超过视图，</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 这会导致看起来很紧张的动画。</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mPendingInitialRun <span class="token operator">&amp;&amp;</span> mTargetView <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mLayoutManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">PointF</span> pointF <span class="token operator">=</span> <span class="token function">computeScrollVectorForPosition</span><span class="token punctuation">(</span>mTargetPosition<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pointF <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pointF<span class="token punctuation">.</span>x <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> pointF<span class="token punctuation">.</span>y <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            recyclerView<span class="token punctuation">.</span><span class="token function">scrollStep</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span>pointF<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">signum</span><span class="token punctuation">(</span>pointF<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    mPendingInitialRun <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>google 的注释解答了一切</p>
<p>如果这个 SmoothScroller 【从来没有运行过】 &amp;&amp;【还找不到目前 View】，将会调用 recyclerView.scrollStep 向正确方向滑动 1px。</p>
<p><strong>&lt;font color=&quot;#FF0000&quot;&gt; 这个就是 layoutState.mAvailable 的 1px 由来 &lt;/font&gt;</strong></p>
<h2 id="4分析从scrollstep到最重要的fill方法调用链"><a class="anchor" href="#4分析从scrollstep到最重要的fill方法调用链">#</a> 4. 分析从 scrollStep 到最重要的 fill 方法调用链</h2>
<pre><code>--recyclerView.scrollStep(1px)
--layoutManager.scrollHorizontallyBy(1px)
--layoutManager.scrollBy(1px)
     --updateLayoutState(1px)
        -- calculateExtraLayoutSpace()
           --getExtraLayoutSpace()  
 --layoutManager.fill(RecyclerView.Recycler recycler, LayoutState layoutState,State state, boolean stopOnFocusable)
</code></pre>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateLayoutState</span><span class="token punctuation">(</span><span class="token keyword">int</span> layoutDirection<span class="token punctuation">,</span> <span class="token keyword">int</span> requiredSpace<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                               <span class="token keyword">boolean</span> canUseExistingSpace<span class="token punctuation">,</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">//mAvailable 设置为 1px</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    mLayoutState<span class="token punctuation">.</span>mAvailable <span class="token operator">=</span> requiredSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 计算额外需要空间</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">calculateExtraLayoutSpace</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> mReusableIntPair<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">//mExtraFillSpace 设置为 264px</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    mLayoutState<span class="token punctuation">.</span>mExtraFillSpace <span class="token operator">=</span> mReusableIntPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">calculateExtraLayoutSpace</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                                         <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extraLayoutSpace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">int</span> extraLayoutSpaceStart <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">int</span> extraLayoutSpaceEnd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">// 计算额外需要空间</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">int</span> extraScrollSpace <span class="token operator">=</span> <span class="token function">getExtraLayoutSpace</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mLayoutState<span class="token punctuation">.</span>mLayoutDirection <span class="token operator">==</span> <span class="token class-name">LayoutState</span><span class="token punctuation">.</span><span class="token constant">LAYOUT_START</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        extraLayoutSpaceStart <span class="token operator">=</span> extraScrollSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        extraLayoutSpaceEnd <span class="token operator">=</span> extraScrollSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    extraLayoutSpace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> extraLayoutSpaceStart<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    extraLayoutSpace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> extraLayoutSpaceEnd<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">getExtraLayoutSpace</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 这个也是 ViewPager2 实现多页加载的核心函数</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">// 如果有目标位置，返回 RecyclerView 的宽度 / 高度，否则返回 0</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">.</span><span class="token function">hasTargetScrollPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> mOrientationHelper<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​    到此为之 ，remainingSpace 的 265【layoutState.mAvailable 的 1px 和 layoutState.mExtraFillSpace 的 264px 组成】是如何生成知道了。</p>
<ol>
<li>步骤 1 .smoothScrollToPosition 调用，设置了 targetPosition，但因为只有一页 View，是找不到 mTargetView。调用 ViewFlinger 滑动，</li>
<li>步骤 2. 但 ViewFlinger 没有滑动数据，调用 SmoothScroller 的 onAnimation (0,0) 方法</li>
<li>步骤 3.SmoothScroller 如果还没有运行过，且找不到 mTargetView，会向滑动方向滑动 1px。mLayoutState.mAvailable=1px</li>
<li>步骤 4. 因为 targetPosition 不是空，会增加一页额外空间。  mLayoutState.mExtraFillSpace = 一页空间；</li>
<li>步骤 5. fill View 时，1px + 一页空间 会导致加入两个页面</li>
</ol>
<h2 id="解决方法"><a class="anchor" href="#解决方法">#</a> 解决方法</h2>
<p>从第三步分析解决，只有找不到 mTargetView 时，才会走下面步骤的逻辑。那我们只要提前让 mTargetView 不为 null 就行了。</p>
<p>我们学习一下源码的思路，在调用 smoothScrollToPosition 滑向下一页前，手动滑动 1px，让目标 View 提前出现在屏幕上，这样子 smoothScrollToPosition 调用时就 mTargetView 就能被找到，不是 null 了</p>
<p>滑向下一页的正确代码：</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>recyclerView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">scrollBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>recyclerView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">smoothScrollToPosition</span><span class="token punctuation">(</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>解决方案很简单，就一行代码，但知道怎么解决却花了几天时间研究 RecyclerView 源码   。。。。。。。。。。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
      </tags>
  </entry>
  <entry>
    <title>网络加载点9图的补充</title>
    <url>/post/eb603a17.html</url>
    <content><![CDATA[<p>参考文档：</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTQ3NDU4MzE2MTAzODExMTA4">对嘛！这才是从网络加载点 9 图的正确姿势</span></p>
<p>去看上面的文档了解，这个博客文只是些个人记录</p>
<p>目前方案是调用 AAPT 预处理完后再上传后台</p>
<p><span id="more"></span></p>
<h2 id="开始"><a class="anchor" href="#开始">#</a> 开始</h2>
<h3 id="1制作点9图"><a class="anchor" href="#1制作点9图">#</a> 1. 制作点 9 图</h3>
<p>傻瓜式教程</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bmJpbmthbmcvYXJ0aWNsZS9kZXRhaWxzLzc3MzMxNzE4">Android studio 中.9 图片的含义及制作教程</span></p>
<h3 id="2aapt命令"><a class="anchor" href="#2aapt命令">#</a> 2.AAPT 命令</h3>
<pre><code>C:\Users\AppData\Local\Android\Sdk\build-tools\31.0.0\aapt.exe c -v -S  . -C .\9out
</code></pre>
<p>将该命令打包成 cmd 文件，与要处理的点 9 图处于同一个目录，运行即可（将 aapt 目录改为自己的对应目录）</p>
<p>上面命令调用 AAPT 处理资源，将有黑边的点 9 图转换为正常 PNG</p>
<h3 id="2获得点9图对应的bitmap"><a class="anchor" href="#2获得点9图对应的bitmap">#</a> 2. 获得点 9 图对应的 Bitmap</h3>
<p>参考文档方案测试不行，因此我的处理是不让 Glide 生成 Bitmap，只是下载文件，然后 BitmapFactory 转为 Bitmap</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"><span>n</span></figcaption><table><tr><td data-num="1"></td><td><pre>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token function">asFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      SimpleTarget<span class="token operator">&lt;</span>File<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>          <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> File<span class="token punctuation">,</span> p1<span class="token operator">:</span> Transition<span class="token operator">&lt;</span><span class="token keyword">in</span> File<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>              <span class="token keyword">val</span> bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFile</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>absolutePath<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>              <span class="token keyword">val</span> chunk <span class="token operator">=</span> bitmap<span class="token punctuation">.</span>ninePatchChunk</pre></td></tr><tr><td data-num="9"></td><td><pre>              <span class="token keyword">val</span> drawable <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>NinePatch<span class="token punctuation">.</span><span class="token function">isNinePatchChunk</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                  <span class="token function">NinePatchDrawable</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>resources<span class="token punctuation">,</span> bitmap<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> <span class="token function">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                  <span class="token function">BitmapDrawable</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>resources<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>              bgView<span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>&lt;font color='red'&gt; 感觉好像都搞定了。。。。。  但还剩下个 Bitmap 的密度问题 &lt;/font&gt;</p>
<h3 id="3获得正确密度尺寸的bitmap"><a class="anchor" href="#3获得正确密度尺寸的bitmap">#</a> 3. 获得正确密度尺寸的 Bitmap</h3>
<p>BitmapFactory.decodeFile (String pathName)  方法的调用不会根据手机尺寸进行图片的缩放</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NldmVuc3VuZGFyay9hcnRpY2xlL2RldGFpbHMvNzYxNjQ1MA==">屏幕密度掺入 BitmapFactory 里 decodeFile 与 decodeResource 的差异</span></p>
<p>这样子会导致一个问题</p>
<p>假如我们有个气泡右上角有个 50x50 px 的皇冠小 icon，我们想要的效果.9 图的效果肯定是</p>
<ol>
<li>在一倍密度的手机下皇冠大小是 50x50 px，剩下的气泡部分由可拉伸的区域填补</li>
<li>在二倍密度的手机下皇冠大小是 100x100 px，剩下的气泡部分由可拉伸的区域填补</li>
<li>在三倍密度的手机下皇冠大小是 150x150 px，剩下的气泡部分由可拉伸的区域填补</li>
</ol>
<p>直接调用 BitmapFactory.decodeFile (String pathName)  会导致在任何尺寸的手机上气泡皇冠的大小都是 50 X 50 px。所以我们要根据手机的尺寸进行图片的缩放</p>
<p>修改第二步代码为：</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">.</span><span class="token function">asFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      SimpleTarget<span class="token operator">&lt;</span>File<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>          <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onResourceReady</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> File<span class="token punctuation">,</span> p1<span class="token operator">:</span> Transition<span class="token operator">&lt;</span><span class="token keyword">in</span> File<span class="token operator">></span><span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>              opt<span class="token punctuation">.</span>inDensity <span class="token operator">=</span> <span class="token number">320</span> <span class="token comment">// 这是因为我的原始图片是个二倍图 160*2</span></pre></td></tr><tr><td data-num="8"></td><td><pre>              opt<span class="token punctuation">.</span>inTargetDensity <span class="token operator">=</span> BasicConfig<span class="token punctuation">.</span>appContext<span class="token punctuation">.</span>resources<span class="token punctuation">.</span>displayMetrics<span class="token punctuation">.</span>densityDpi</pre></td></tr><tr><td data-num="9"></td><td><pre>              <span class="token keyword">val</span> bitmap <span class="token operator">=</span> BitmapFactory<span class="token punctuation">.</span><span class="token function">decodeFile</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span>absolutePath<span class="token punctuation">,</span> opt<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>              <span class="token keyword">val</span> chunk <span class="token operator">=</span> bitmap<span class="token punctuation">.</span>ninePatchChunk</pre></td></tr><tr><td data-num="11"></td><td><pre>              <span class="token keyword">val</span> drawable <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>NinePatch<span class="token punctuation">.</span><span class="token function">isNinePatchChunk</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                  <span class="token function">NinePatchDrawable</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>resources<span class="token punctuation">,</span> bitmap<span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> <span class="token function">Rect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>              <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                  <span class="token function">BitmapDrawable</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>resources<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>              <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>              bgView<span class="token punctuation">.</span><span class="token function">setImageDrawable</span><span class="token punctuation">(</span>drawable<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>          <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>opt.inDensity = 160 * 你的图片是几倍图  。我的情况是设计提供的是二倍图，所以设置为 320</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>点9图</tag>
      </tags>
  </entry>
  <entry>
    <title>C++知识点</title>
    <url>/post/44bbaae6.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTRiZW5uaWFvLmNvbS9jcHAvcnVtZW4vMi8=">C++ 基础教程</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXBpcmVmLmNvbS9jcHAtemgvaW5kZXguaHRtbA==">C++ 参考手册 API</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY21ha2UvQ01ha2UtcHJpbWVyLw==">CMake 保姆级教程</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vdGVuZ3ppamlhbi9wLzE3NDczMjQ4Lmh0bWw=">C++ 单例模式的几种实现方式</span></p>
<p><span id="more"></span></p>
<h2 id="java-和-c-对比"><a class="anchor" href="#java-和-c-对比">#</a> Java 和 C++ 对比</h2>
<blockquote>
<p>C++ 类继承也有修饰词 关键字 class 时默认的继承方式是 private， 使用 struct 时默认的继承方式是 public</p>
</blockquote>
<blockquote>
<p>this 并不是一个常规变量，而是一个 <strong>右值</strong>，所以不能取得 <code>this</code>  的地址.(不能 <code>&amp;this</code> , 左值右值的区别就在于是否可以取地址)</p>
</blockquote>
<h2 id="基础开发特点"><a class="anchor" href="#基础开发特点">#</a> 基础开发特点</h2>
<h3 id="基础语法"><a class="anchor" href="#基础语法">#</a> 基础语法：</h3>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL3VzaW5nLw==">using 语法和 typedef 语法区别</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL251bGxwdHIv">nullptr 和 NULL 的区别</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuNTRiZW5uaWFvLmNvbS92aWV3LzYzMjYuaHRtbA==">C++ 命名空间（namespace）</span></p>
</blockquote>
<blockquote>
<p><a href="https://www.apiref.com/cpp-zh/cpp/types/is_enum.html">std::is_enum   检查  <code>T</code>  是否为枚举类型</a></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vUUctd2h6L3AvNDUwOTcxMC5odG1s">强制类型转换操作符 static_cast</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yNDE0Mjcw">存储固定集合中的任意类型的值 std::variant</span></p>
</blockquote>
<h3 id="方法与类"><a class="anchor" href="#方法与类">#</a> 方法与类：</h3>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL2xhbWJkYS8=">Lambda 表达式</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL2NvbnN0cnVjdC8jMi0lRTclQkIlQTclRTYlODklQkYlRTYlOUUlODQlRTklODAlQTAlRTUlODclQkQlRTYlOTUlQjA=">继承构造函数的使用方法是这样的：通过使用 using 类名：：构造函数名</span></p>
</blockquote>
<h2 id="业务开发特点"><a class="anchor" href="#业务开发特点">#</a> 业务开发特点</h2>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL2NvbnZlcnQv">数值类型和字符串之间的转换: to_string , stoi</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9zdWJpbmd3ZW4uY24vY3BwL1Iv">使用 R“()” 定义原始字面量</span></p>
</blockquote>
<blockquote>
<p>测试数据时如果需要在头文件中定义并实现函数，为了避免函数重复定义导致编译失败，方法可以用 inline 修饰</p>
</blockquote>
<h4 id="unordered_map知识"><a class="anchor" href="#unordered_map知识">#</a> unordered_map 知识</h4>
<blockquote>
<p>unordered_map 用 [] 访问，但 key 不存在时，访问仍然成功，取得 value 对象默认构造的值</p>
</blockquote>
<blockquote>
<p>enum 可以直接作为 map 的 key，却不能直接作为 unordered_map 的 key。</p>
</blockquote>
<blockquote>
<p>value 不能是抽象类，针对这场景需要用到指针或者智能指针 shared_ptr</p>
</blockquote>
<h2 id="问题场景"><a class="anchor" href="#问题场景">#</a> 问题场景</h2>
<h6 id=""><a class="anchor" href="#">#</a> </h6>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>CPP</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>CPP</tag>
      </tags>
  </entry>
  <entry>
    <title>Swiper踩坑</title>
    <url>/post/df89432a.html</url>
    <content><![CDATA[<h2 id="崩溃场景"><a class="anchor" href="#崩溃场景">#</a> 崩溃场景</h2>
<p><strong>API12</strong>  使用 Swiper 时，LazyForEach 数据源只有两个时，出现崩溃问题</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">Swiper</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>swiperController<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token function">LazyForEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> material<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>          <span class="token function">Image</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>materialUrl<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token string">"100%"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token string">"100%"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">borderRadius</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">objectFit</span><span class="token punctuation">(</span>ImageFit<span class="token punctuation">.</span>Fill<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">margin</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> right<span class="token operator">:</span> <span class="token number">16</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token punctuation">.</span><span class="token function">onAppear</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> material<span class="token punctuation">,</span> index<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> item<span class="token punctuation">.</span>materialId <span class="token operator">+</span> item<span class="token punctuation">.</span>materialUrl <span class="token operator">+</span> index<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">nextMargin</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>      <span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>产生<strong> cppcrash</strong> 错误</p>
<pre><code>LastFatalMessage:[default] CheckThread:179 Fatal: ecma_vm cannot run in multi-thread! thread:56712 currentThread:56718
Fault thread info:
Tid:56718, Name:IPC_3_56718
#00 pc 000000000018bc34 /system/lib/ld-musl-aarch64.so.1(raise+188)(dff3f628ef1cb60aabb8cc2d2e61e14f)
#01 pc 000000000013bc94 /system/lib/ld-musl-aarch64.so.1(abort+20)(dff3f628ef1cb60aabb8cc2d2e61e14f)
#02 pc 000000000022d308 /system/lib64/platformsdk/libark_jsruntime.so(panda::ecmascript::EcmaVM::CheckThread() const+640)(2703d118189f95d1fb2d3432ed2e1047)
#03 pc 00000000003d300c /system/lib64/platformsdk/libark_jsruntime.so(panda::ecmascript::JSThread::DoStackLimitCheck()+108)(2703d118189f95d1fb2d3432ed2e1047)
#04 pc 00000000002aa128 /system/lib64/platformsdk/libark_jsruntime.so(panda::ecmascript::EcmaInterpreter::Execute(panda::ecmascript::EcmaRuntimeCallInfo*)+44)(2703d118189f95d1fb2d3432ed2e1047)
#05 pc 0000000000469614 /system/lib64/platformsdk/libark_jsruntime.so(panda::FunctionRef::Call(panda::ecmascript::EcmaVM const*, panda::Local, panda::Local const*, int)+1028)(2703d118189f95d1fb2d3432ed2e1047)
#06 pc 0000000002036ebc /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::Framework::JsiFunction::Call(OHOS::Ace::Framework::JsiRef, int, OHOS::Ace::Framework::JsiRef*) const+192)(2d4db53d434edf487ecf2f7927f07ec5)
#07 pc 0000000001d18774 /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::Framework::JSLazyForEachBuilder::OnGetTotalCount()+332)(2d4db53d434edf487ecf2f7927f07ec5)
#08 pc 0000000000fa25dc /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::NG::FrameProxy::Build()+220)(2d4db53d434edf487ecf2f7927f07ec5)
#09 pc 0000000000f9c6f0 /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::NG::FrameProxy::GetFrameNodeByIndex(unsigned int, bool)+128)(2d4db53d434edf487ecf2f7927f07ec5)
#10 pc 0000000000f9c628 /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::NG::FrameNode::GetOrCreateChildByIndex(unsigned int, bool)+40)(2d4db53d434edf487ecf2f7927f07ec5)
#11 pc 00000000015c4da0 /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::NG::SwiperPattern::UpdateCaptureSource(std::__h::shared_ptr, int, int)+212)(2d4db53d434edf487ecf2f7927f07ec5)
#12 pc 00000000015e5124 /system/lib64/platformsdk/libace_compatible.z.so(std::__h::__function::__func, void (std::__h::shared_ptr)&gt;::operator()(std::__h::shared_ptr&amp;&amp;) (.7f942ca2a7203f34493c004262d05158)+148)(2d4db53d434edf487ecf2f7927f07ec5)
#13 pc 000000000097d548 /system/lib64/platformsdk/libace_compatible.z.so(OHOS::Ace::NG::(anonymous namespace)::NormalCaptureCallback::OnSurfaceCapture(std::__h::shared_ptr)+96)(2d4db53d434edf487ecf2f7927f07ec5)
#14 pc 00000000001d86cc /system/lib64/librender_service_base.z.so(OHOS::Rosen::RSRenderServiceClient::TriggerSurfaceCaptureCallback(unsigned long, OHOS::Media::PixelMap*)+624)(7c4044516e61d05c580e81308171fc27)
#15 pc 00000000001ec7cc /system/lib64/librender_service_base.z.so(OHOS::Rosen::RSSurfaceCaptureCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&amp;, OHOS::MessageParcel&amp;, OHOS::MessageOption&amp;)+292)(7c4044516e61d05c580e81308171fc27)
#16 pc 0000000000033bc4 /system/lib64/platformsdk/libipc_core.z.so(OHOS::IPCObjectStub::SendRequest(unsigned int, OHOS::MessageParcel&amp;, OHOS::MessageParcel&amp;, OHOS::MessageOption&amp;)+1820)(20be1d35a25563c9f63e5fc74056f22d)
#17 pc 0000000000056128 /system/lib64/platformsdk/libipc_core.z.so(OHOS::BinderInvoker::OnTransaction(unsigned char const*)+1220)(20be1d35a25563c9f63e5fc74056f22d)
#18 pc 00000000000567fc /system/lib64/platformsdk/libipc_core.z.so(OHOS::BinderInvoker::HandleCommandsInner(unsigned int)+368)(20be1d35a25563c9f63e5fc74056f22d)
#19 pc 0000000000055240 /system/lib64/platformsdk/libipc_core.z.so(OHOS::BinderInvoker::HandleCommands(unsigned int)+60)(20be1d35a25563c9f63e5fc74056f22d)
#20 pc 000000000005506c /system/lib64/platformsdk/libipc_core.z.so(OHOS::BinderInvoker::StartWorkLoop()+120)(20be1d35a25563c9f63e5fc74056f22d)
#21 pc 000000000005693c /system/lib64/platformsdk/libipc_core.z.so(OHOS::BinderInvoker::JoinThread(bool)+92)(20be1d35a25563c9f63e5fc74056f22d)
#22 pc 00000000000439a4 /system/lib64/platformsdk/libipc_core.z.so(OHOS::IPCWorkThread::ThreadHandler(void*)+624)(20be1d35a25563c9f63e5fc74056f22d)
#23 pc 00000000001adcc8 /system/lib/ld-musl-aarch64.so.1(start+236)(dff3f628ef1cb60aabb8cc2d2e61e14f)
#24 pc 00000000000a0508 /system/lib/ld-musl-aarch64.so.1(dff3f628ef1cb60aabb8cc2d2e61e14f)
</code></pre>
<h2 id="问题代码定位"><a class="anchor" href="#问题代码定位">#</a> 问题代码定位</h2>
<p>从崩溃日志可以看到是因为 Swper 和 lazyForEach 引发的崩溃</p>
<p>最终定位到 调用了 Swiper 的 nextMargin 方法和 loop 方法导致的，<strong>两个方法删除其中之一就正常展示了</strong></p>
<p>nextMargin 方法是为了 ui 效果，能在 Swiper 一页中展示下一页的一部分，即可以展示 1.3 个视图。</p>
<p>loop 方法是为了无限循环滑动</p>
<h2 id="问题修复"><a class="anchor" href="#问题修复">#</a> 问题修复</h2>
<ul>
<li>初步猜测是因为 Swiper 要在一页展示 1.2 个视图，LazyForEach 会根据 key 复用视图，因为数据源只有两个，在页面，还没有被回收的视图也被 Swiper 复用导致崩溃</li>
</ul>
<p>测试失败：lazyForEach 每次都返回独一无二的 key，让 item 的复用失效，结果还是会导致崩溃</p>
<ul>
<li>API12 文档： <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMtVjUvdHMtY29udGFpbmVyLXN3aXBlci1WNSNaSC1DTl9UT1BJQ18wMDAwMDAxODQ3MjA5ODY4X19sb29w">在 LazyForEach 懒循环加载模式下，加载的组件数量建议大于 5 个</span>。</li>
</ul>
<p>测试成功，原因未知</p>
<p><strong>总结：Swiper+LazyForEach 的场景下，如果同时调用了 nextMargin 方法和 loop 方法，确保数据源大于 5 个</strong></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Harmony</category>
      </categories>
      <tags>
        <tag>崩溃</tag>
      </tags>
  </entry>
  <entry>
    <title>开发问题记录</title>
    <url>/post/c5f6341f.html</url>
    <content><![CDATA[<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDQxNzM5NTg1OTQ4MjIxNDcw">form-urlencoded 方式的 form 请求，后端接到的 “+” 号会转成空格</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3BvcHB5bWlsYW4vYXJ0aWNsZS9kZXRhaWxzLzEwNzQ2ODIzMA==">charles 本地代理（map local）接口数据产生的跨域问题解决办法</span></p>
</blockquote>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>开发问题记录</tag>
      </tags>
  </entry>
  <entry>
    <title>Harmony知识点</title>
    <url>/post/3066680b.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLWd1aWRlcy1WMi9hcmt0cy1iYXNpYy1zeW50YXgtMDAwMDAwMTUwNDY1MDA1Ny1WMg==">ArkTS 基础语法</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMvNF80X3U1YmI5X3U1NjY4X3U3ZWM0X3U0ZWY2LTAwMDAwMDE4NjI2ODc2Mzc=">ArkTS 容器组件</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMvNV8yX3U5MDFhX3U3NTI4X3U1YzVlX3U2MDI3LTAwMDAwMDE4NjI2ODc1MzM=">ArkTS 组件的通用属性</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRlZS5jb20vb3Blbmhhcm1vbnkvZG9jcy9ibG9iL21hc3Rlci96aC1jbi9hcHBsaWNhdGlvbi1kZXYvcXVpY2stc3RhcnQvYXJrdHMtbW9yZS1jYXNlcy5tZA==">ArkTS 语法规则下将 TS 代码适配成 ArkTS 代码的建议</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJrdWkuY2x1Yi8=">《ArkUI 实战》</span></p>
<p><a href="https://developer.huawei.com/consumer/cn/doc/best-practices-V5/bpta-ui-dynamic-operations-V5"><strong>声明式 UI 中实现组件动态创建</strong></a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MzA0NTM4MTk5MTQ5NDEyNDE1P3NlYXJjaElkPTIwMjQwNTA5MTEyMDMwMjg3MkM2Rjg1NjgyMzQ4NzZFNkM=">鸿蒙开发之 android 开发人员指南《基础知识》</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLWd1aWRlcy1WMi91aWFiaWxpdHktb3ZlcnZpZXctMDAwMDAwMTQ3Nzk4MDkyOS1WMg==">UIAbility 组件概述</span></p>
<p><span id="more"></span></p>
<h2 id="android-和-鸿蒙对标的配置"><a class="anchor" href="#android-和-鸿蒙对标的配置">#</a> Android 和 鸿蒙对标的配置</h2>
<blockquote>
<p>match_parent  ==  width(&quot;100%&quot;)    wrap_content ==  height('auto')</p>
</blockquote>
<blockquote>
<p>weight 1 ==  flexGrow(1)</p>
</blockquote>
<blockquote>
<p>宽是 1dp 的空白 View  ==  Blank ().width (1).height (&quot;100%&quot;)</p>
</blockquote>
<blockquote>
<p>FrameLayout ==  Stack 组件</p>
</blockquote>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//View 实现居中对齐  </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">Flex</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>justifyContent <span class="token operator">:</span>FlexAlign<span class="token punctuation">.</span>Center<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="基础开发特点"><a class="anchor" href="#基础开发特点">#</a> 基础开发特点</h2>
<blockquote>
<p>子组件定义的变量都可以通过父组件传递过来，不仅限于 prop 和 state 变量，普通变量也可以，这是选填参数</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:center">子组件 \ 父组件</th>
<th>普通变量</th>
<th>prop 变量</th>
<th>state 变量</th>
<th>link 变量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">普通变量</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
</tr>
<tr>
<td style="text-align:center">prop 变量</td>
<td>值传递，不同对象</td>
<td>值传递，不同对象</td>
<td>值传递，不同对象</td>
<td>值传递，不同对象</td>
</tr>
<tr>
<td style="text-align:center">state 变量</td>
<td>值传递，不同对象</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
</tr>
<tr>
<td style="text-align:center">link 变量</td>
<td>不允许</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
<td>引用传递，同对象</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>子组件定义的普遍变量，link 变量 = 引用传递  ；子组件定义的 prop 变量 = 值传递（不同对象）  ；</strong></p>
<p><strong>子组件定义的 state 变量 = 看情况，如果是父组件的普遍变量，则是值传递，否则是引用传递  ；</strong></p>
</blockquote>
<blockquote>
<p>'@Link', '@Consume',  '@ObjectLink' 装饰的变量不能初始化，必须由父组件传递过来，这也是父组件必传参数</p>
<p>'@State', '@StorageLink', '@StorageProp', '@LocalStorageLink', '@LocalStorageProp' and '@Provide' 必须本地初始化</p>
</blockquote>
<blockquote>
<p>在 aboutToAppear 方法内时，组件内的参数都已经由父组件初始化好了</p>
</blockquote>
<blockquote>
<p>鸿蒙 监听一个 state 修改另外的 state。使用 watch 装饰器</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLWd1aWRlcy1WMi9hcmt0cy1yZW5kZXJpbmctY29udHJvbC1sYXp5Zm9yZWFjaC0wMDAwMDAxNTI0NDE3MjEzLVYy">LazyForEach 必须使用 DataChangeListener 对象来进行更新，第一个参数 dataSource 使用状态变量时，状态变量改变不会触发 LazyForEach 的 UI 刷新</span></p>
</blockquote>
<blockquote>
<p>@Watch 设置的函数是同步调用的，即修改 @prop 变量后会马上调用改函数，然后再执行修改 prop 变量的下一行代码</p>
</blockquote>
<blockquote>
<p>子组件的 prop 变量是由父组件的 prop 或者 state 变量传递的情况下，如果父组件修改了变量，子组件的 prop 变量修改是在下一次的事件循环中修改，即如果子组件设置了 watch， 顺序是 .1. 父组件修改变量 2. 执行父组件修改变量的下面代码 3. 执行子组件的 watch 函数</p>
</blockquote>
<blockquote>
<p>API12   自定义构建函数的参数传递不能是 state 参数；因为<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLWd1aWRlcy1WMi9hcmt0cy1idWlsZGVyLTAwMDAwMDE1MjQxNzY5ODEtVjIjc2VjdGlvbjE3NzE1MTg2MTAzNTM=">调用 @Builder 装饰的函数默认按值传递</span>。当传递的参数为状态变量时，状态变量的改变不会引起 @Builder 方法内的 UI 刷新。 有这种使用场景抽象成组件，不要用 @Builder 装饰的函数。</p>
</blockquote>
<h2 id="业务开发特点"><a class="anchor" href="#业务开发特点">#</a> 业务开发特点</h2>
<blockquote>
<p>borderRadius 设置的圆角不会限制内部组件，内部组件的四个角会超出圆角范围！！</p>
<p>采用 <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMvdHMtdW5pdmVyc2FsLWF0dHJpYnV0ZXMtc2hhcnAtY2xpcHBpbmctMDAwMDAwMTgxNTkyNzUyMA==">clip (true) 方法</span></p>
</blockquote>
<blockquote>
<p>CustomDialogController 可以重复 open，传入的 builder 函数会被重复调用，但其他传入参数是不会变化，例如 传入 isModal 参数是个函数，也不会被调用，只会使用第一次调用的值</p>
</blockquote>
<blockquote>
<p>组件默认拦截点击事件 ，可通过 enable 方法设置</p>
</blockquote>
<blockquote>
<p>NavDestination 只能有一个子组件，如果有多个子组件，下面的组件不会展示</p>
</blockquote>
<blockquote>
<p>@Prop 装饰变量时会进行深拷贝，<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMtVjUvanMtYXBpcy1pbWFnZS1WNSNwaXhlbG1hcDc=">PixelMap</span> 由于有部分实现在 Native 侧，因此无法在 ArkTS 侧通过深拷贝获得完整的数据。所以子组件 prop 变量中如果有 PixelMap 变量，无法通过父组件传递图像数据，导致子组件无法展示图片。<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLWd1aWRlcy1WNS9hcmt0cy1wcm9wLVY1">限制条件</span></p>
<p>解决方案：</p>
<p>1. 不使用 prop 装饰器，使用 link 装饰器或者不使用装饰器</p>
<p>2. 子组件 prop 变量中不定义 PixelMap 变量，而定义返回 PixelMap 变量的匿名函数</p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXJrdWkuY2x1Yi9jaGFwdGVyMi8yXzNfcmVzb3VyY2UuaHRtbCNfMi0zLTQtJUU4JUI1JTg0JUU2JUJBJTkwJUU3JUFFJUExJUU3JTkwJTg2JUU1JTk5JUE4">通过 resourceManager 访问字符串资源</span></p>
</blockquote>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9kb2MvaGFybW9ueW9zLXJlZmVyZW5jZXMtVjUvanMtYXBpcy11dGlsLVY1I3V0aWxmb3JtYXQ5">ts 中没有 string.format 方法，所以鸿蒙提供了 util 工具函数</span></p>
</blockquote>
<h2 id="高级知识"><a class="anchor" href="#高级知识">#</a> 高级知识</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuaHVhd2VpLmNvbS9jb25zdW1lci9jbi9mb3J1bS90b3BpYy8wMjA4MTUzMTY0NjAyODU3ODE0">基于 C++ 能力的资源访问</span></p>
<p><a href="https://developer.huawei.com/consumer/cn/forum/topic/0204150545294348010"><strong>基于 Navigation 的路由管理</strong></a></p>
<h2 id="问题场景"><a class="anchor" href="#问题场景">#</a> 问题场景</h2>
<h6 id="1-api12-auto属性太坑了-强烈推荐不使用-问题会导致父view的高度不会随着子view变化"><a class="anchor" href="#1-api12-auto属性太坑了-强烈推荐不使用-问题会导致父view的高度不会随着子view变化">#</a> 1. API12   Auto 属性太坑了 ，强烈推荐不使用。问题：会导致父 view 的高度不会随着子 view 变化</h6>
<h6 id="2-父组件不允许传普通变量给子组件的link变量正常来说编译器会报错但在builder装饰器方法内不会报错要注意这一点"><a class="anchor" href="#2-父组件不允许传普通变量给子组件的link变量正常来说编译器会报错但在builder装饰器方法内不会报错要注意这一点">#</a> 2. 父组件不允许传普通变量给子组件的 link 变量，正常来说编译器会报错，但在 Builder 装饰器方法内不会报错，要注意这一点</h6>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Harmony</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>鸿蒙</tag>
      </tags>
  </entry>
  <entry>
    <title>JS，TS 知识点</title>
    <url>/post/dc4ac76f.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHM=">JS 官方文档</span></p>
<p><a href="">TS 官方文档</a></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cubG9kYXNoanMuY29tLw==">Lodash 高性能的 JavaScript 实用工具库</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwNzUzNTMxNg==">理解 JavaScript 的 async/await</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTA1Nzc4OTIyODUxMTM5NTk4">【TypeScript】keyof &amp; in 关键字详解</span></p>
<p><span id="more"></span></p>
<h2 id="踩坑问题"><a class="anchor" href="#踩坑问题">#</a> 踩坑问题</h2>
<blockquote>
<p>注意 <span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTY5Nzc1MDAvYm9vbGVhbmZhbHNlLXJldHVybnMtdHJ1ZQ==">Boolean('false') returns true</span></p>
</blockquote>
<blockquote>
<p>使用 encodeURIComponent 代替 encodeURI 。encodeURIComponent 函数则更为严格，它会对 URL 中的所有特殊字符进行编码</p>
</blockquote>
<blockquote>
<p>proto3 碰上  <code>JSON.stringify</code>  ，默认将 enums 转为 String <span class="exturl" data-url="aHR0cHM6Ly9wcm90b2J1Zi5kZXYvcHJvZ3JhbW1pbmctZ3VpZGVzL3Byb3RvMy8janNvbg==">官方文档</span>    对象 obj 中定义了一个 toJSON 方法 可以影响 <code>JSON.stringify</code>  输出</p>
</blockquote>
<blockquote>
<p>JSON.stringify 方法在处理 Map 对象时会将其转换为空对象。处理方案：转一层数组</p>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">const</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token operator">&lt;</span>string<span class="token punctuation">,</span> boolean<span class="token operator">></span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure></blockquote>
<blockquote>
<p>... 操作符对基础变量是深复制，但对于 object 变量是浅复制</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    a<span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    b<span class="token operator">:</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        b<span class="token operator">:</span><span class="token string">""</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> b<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>a<span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>b<span class="token punctuation">.</span>a<span class="token operator">=</span><span class="token string">"abc"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>b<span class="token punctuation">.</span>b<span class="token punctuation">.</span>b<span class="token operator">=</span><span class="token string">"bbb"</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//&#123;"a":"","b":&#123;"b":"bbb"&#125;&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//&#123;"a":"abc","b":&#123;"b":"bbb"&#125;&#125;</span></pre></td></tr></table></figure></blockquote>
<blockquote>
<p>JSON.stringify 会打印 null ，不会打印 undefined</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    a<span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">const</span> b<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    a<span class="token operator">:</span><span class="token keyword">undefined</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//&#123;"a":null&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//&#123;&#125;</span></pre></td></tr></table></figure></blockquote>
<blockquote>
<p>null ==  undefined 返回 true             null === undefined 返回 false</p>
</blockquote>
<h2 id="知识点"><a class="anchor" href="#知识点">#</a> 知识点</h2>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xOTQwNzc1">JS 中的块级作用域，var、let、const 三者的区别</span></p>
</blockquote>
<blockquote>
<p><em>定义接口时</em>，属性间不用写 <code>,</code>  分隔符   ； 但实现接口时需要加上分隔符</p>
</blockquote>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 定义</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">FlexStyle</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    borderLeftWidth<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    borderRightWidth<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 实现</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> a<span class="token operator">:</span> FlexStyle <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    borderLeftWidth<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    borderRightWidth<span class="token operator">:</span> <span class="token number">6</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p>因为 JS 中没有接口的概念，所以 ts 中判断一个对象是不是实现某个接口，只能通过断言 <code>as</code>  来实现，不能通过 <code>instanceof</code>    <span class="exturl" data-url="aHR0cHM6Ly90cy54Y2F0bGl1LmNvbS9iYXNpY3MvdHlwZS1hc3NlcnRpb24uaHRtbCMlRTUlQjAlODYlRTQlQjglODAlRTQlQjglQUElRTglODElOTQlRTUlOTAlODglRTclQjElQkIlRTUlOUUlOEIlRTYlOTYlQUQlRTglQTglODAlRTQlQjglQkElRTUlODUlQjYlRTQlQjglQUQlRTQlQjglODAlRTQlQjglQUElRTclQjElQkIlRTUlOUUlOEI=">文档</span></p>
</blockquote>
<blockquote>
<p>当一个组件参数是接口时，创造一个组件不能直接传接口实例，要使用 {...interfaeA} 将接口实例解耦后传入</p>
</blockquote>
<blockquote>
<p>判断一个变量是不是函数     if (typeof (animal as Fish).swim === 'function')</p>
</blockquote>
<blockquote>
<p>obj 对象被用作 if 语句的条件。如果 obj 对象存在（即非 null 和非 undefined），则条件为真。否则，条件为假</p>
</blockquote>
<blockquote>
<p>?? 是空值合并操作符。它用于检查一个值是否为 null 或 undefined，如果是的话就返回另一个指定的默认值</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> result <span class="token operator">=</span> someValue <span class="token operator">??</span> defaultValue<span class="token punctuation">;</span></pre></td></tr></table></figure></blockquote>
<blockquote>
<p>??= 类似于？？，但是如果左侧的值为 null 或 undefined，则会将右侧的值赋给左侧的变量。</p>
<figure class="highlight typescript"><figcaption data-lang="typescript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">let</span> myVar<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>myVar <span class="token operator">??=</span> <span class="token string">"default"</span><span class="token punctuation">;</span></pre></td></tr></table></figure></blockquote>
<blockquote>
<p>代替 kotlin  <code>?: </code> 操作符的方法   表达式对象 || 0，如果对象被视为真（truthy），则整个表达式的结果将是该对象。如果对象被视为假（falsy），则整个表达式的结果将是 0</p>
</blockquote>
<blockquote>
<p>虽然没有 kotlin  <code>?: </code> 操作符，但有  <code>boolean ? A : B </code> 操作符</p>
</blockquote>
<blockquote>
<p>异步的箭头函数 const myfunc  = async () =&gt; {}</p>
</blockquote>
<blockquote>
<p>declare type AType = keyof typeof BClass</p>
<p><code>typeof</code>  操作符用于获取一个对象的类型， <code>keyof</code>  操作符则用于获取该类型的所有属性名。</p>
<p>这行代码的整体含义是：我们正在定义一个类型别名  <code>AType</code> ，它的值是  <code>BClass</code>  对象的所有属性名。</p>
</blockquote>
<blockquote>
<figure class="highlight javascript"><figcaption data-lang="javascript"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token function-variable function">add</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sss'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token comment">// 一般简写成</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">const</span> a<span class="token operator">=</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'sss'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></blockquote>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>知识点</tag>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>踩坑记录和偏门代码</title>
    <url>/post/d533c7c1.html</url>
    <content><![CDATA[<h1 id="踩坑"><a class="anchor" href="#踩坑">#</a> 踩坑</h1>
<h3 id="1numberformat导致精度丢失"><a class="anchor" href="#1numberformat导致精度丢失">#</a> 1.NumberFormat 导致精度丢失</h3>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3VtbWVyZGF5MTUyL3AvMTQyMDIyNjcuaHRtbA==">利用 BigDecimal 类巧妙处理 Double 类型精度丢失</span></p>
<p><span id="more"></span></p>
<h4 id="问题案例"><a class="anchor" href="#问题案例">#</a> 问题案例</h4>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token number">103.765</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">val</span> formatter <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getNumberInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 返回的是 DecimalFormat 类</span></pre></td></tr><tr><td data-num="3"></td><td><pre>formatter<span class="token punctuation">.</span>roundingMode <span class="token operator">=</span> RoundingMode<span class="token punctuation">.</span>HALF_UP</pre></td></tr><tr><td data-num="4"></td><td><pre>formatter<span class="token punctuation">.</span>maximumFractionDigits <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>formatter<span class="token punctuation">.</span>minimumFractionDigits <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>formatter<span class="token punctuation">.</span>isGroupingUsed <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">val</span> result <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>   <span class="token comment">// 结果是 103.76 并不是 103.77</span></pre></td></tr></table></figure><p>上面代码想实现 【四舍五入，保留两位小数】的功能，结果却和预期不一样</p>
<h4 id="问题分析"><a class="anchor" href="#问题分析">#</a> 问题分析</h4>
<p>查看 DecimalFormat 类 format 方法原理</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">StringBuffer</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">Object</span> number<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                                 <span class="token class-name">StringBuffer</span> toAppendTo<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                                 <span class="token class-name">FieldPosition</span> pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">instanceof</span> <span class="token class-name">Long</span> <span class="token operator">||</span> number <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        number <span class="token keyword">instanceof</span> <span class="token class-name">Short</span> <span class="token operator">||</span> number <span class="token keyword">instanceof</span> <span class="token class-name">Byte</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        number <span class="token keyword">instanceof</span> <span class="token class-name">AtomicInteger</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        number <span class="token keyword">instanceof</span> <span class="token class-name">AtomicLong</span> <span class="token operator">||</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">(</span>number <span class="token keyword">instanceof</span> <span class="token class-name">BigInteger</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>         <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">)</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span>bitLength <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">)</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">instanceof</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BigDecimal</span><span class="token punctuation">)</span>number<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">instanceof</span> <span class="token class-name">BigInteger</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span><span class="token punctuation">)</span>number<span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>number <span class="token keyword">instanceof</span> <span class="token class-name">Number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 传入的是 float，走到了这里 </span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Number</span><span class="token punctuation">)</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> toAppendTo<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cannot format given Object as a Number"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看见 ，传入 float 时，会强转为 Number 类调用 doubleValue 方法获得值进行后续操作；就是 float 转 double 出现精度丢失</p>
<blockquote>
<p>103.765 变成了 103.76499938964844，再四舍五入 就变成了 103.76</p>
</blockquote>
<h3 id="问题解决"><a class="anchor" href="#问题解决">#</a> 问题解决</h3>
<blockquote>
<p>使用 BigDecimal 类</p>
</blockquote>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> d <span class="token operator">=</span> <span class="token number">103.765</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">val</span> formatter <span class="token operator">=</span> NumberFormat<span class="token punctuation">.</span><span class="token function">getNumberInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>formatter<span class="token punctuation">.</span>roundingMode <span class="token operator">=</span> RoundingMode<span class="token punctuation">.</span>HALF_UP</pre></td></tr><tr><td data-num="4"></td><td><pre>formatter<span class="token punctuation">.</span>maximumFractionDigits <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="5"></td><td><pre>formatter<span class="token punctuation">.</span>minimumFractionDigits <span class="token operator">=</span> <span class="token number">2</span></pre></td></tr><tr><td data-num="6"></td><td><pre>formatter<span class="token punctuation">.</span>isGroupingUsed <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">val</span> result <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token function">BigDecimal</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">d</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 正常返回 103.77</span></pre></td></tr></table></figure><h2 id="2android-非45度倍数角度渐变引起的崩溃"><a class="anchor" href="#2android-非45度倍数角度渐变引起的崩溃">#</a> 2.Android 非 45 度倍数角度渐变引起的崩溃</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDk3MDYwNDg5NTQwMTQxMDky">Android 非 45 度倍数角度渐变引起的崩溃</span></p>
<h1 id="偏门代码"><a class="anchor" href="#偏门代码">#</a> 偏门代码</h1>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NodXlvdXlpbmdoZS9hcnRpY2xlL2RldGFpbHMvMTE1MjQ5NjU5">TouchDelegate 扩展点击区域</span></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>踩坑</tag>
      </tags>
  </entry>
  <entry>
    <title>KSP知识点</title>
    <url>/post/8ff11c1.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTU3ODgxNDA3MDU3NTU5NTg5">使用 KSP 处理注解和生成 Kotlin 代码</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0phaWxlZEJpcmQvQXJvdXRlcktzcENvbXBpbGVy">KSP 化的 ARoute 库</span></p>
<p><span id="more"></span></p>
<blockquote>
<p>KSP 打印日志需要使用 warn 才能看见</p>
</blockquote>
<h2 id="1添加插件依赖"><a class="anchor" href="#1添加插件依赖">#</a> 1. 添加插件依赖</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 网上的参考模块都是通过 plugins 闭包引入 </span></pre></td></tr><tr><td data-num="2"></td><td><pre>plugins <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token operator">..</span><span class="token punctuation">.</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">id</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"com.google.devtools.ksp"</span></span><span class="token punctuation">)</span> version <span class="token string-literal singleline"><span class="token string">"1.7.10-1.0.6"</span></span><span class="token comment">// 引入 ksp 插件</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>但如果要把 ksp 配置抽离成一个单独的 gradle 文件，就只能用  <code>apply plugin: &quot;com.google.devtools.ksp&quot;</code>  的方式，但这之前必须添加插件脚本依赖</p>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 根目录的 build.gradle   添加依赖的插件 - 旧的写法</span></pre></td></tr><tr><td data-num="2"></td><td><pre>buildscript <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    dependencies <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token comment">// 需要和 kotlin 版本对应</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        classpath  “com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>ksp<span class="token punctuation">:</span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>devtools<span class="token punctuation">.</span>ksp<span class="token punctuation">.</span>gradle<span class="token punctuation">.</span>plugin<span class="token punctuation">:</span><span class="token punctuation">$</span>versions<span class="token punctuation">.</span>ksp”</pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="2module目录的buildgradle-添加kotlin插件"><a class="anchor" href="#2module目录的buildgradle-添加kotlin插件">#</a> 2.module 目录的 build.gradle 添加 kotlin 插件</h2>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre>apply plugin<span class="token punctuation">:</span> <span class="token string">'kotlin-android'</span></pre></td></tr></table></figure><h2 id="3因为ksp需要配置的对象有点重复所以抽象成一个gradle脚本"><a class="anchor" href="#3因为ksp需要配置的对象有点重复所以抽象成一个gradle脚本">#</a> 3. 因为 ksp 需要配置的对象有点重复，所以抽象成一个 gradle 脚本</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>apply plugin<span class="token operator">:</span> <span class="token string">"com.google.devtools.ksp"</span> <span class="token comment">// 这一行的代码在第一步操作下才能这么编写</span></pre></td></tr><tr><td data-num="2"></td><td><pre>android <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    ksp <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"moduleName"</span><span class="token punctuation">,</span> project<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    buildTypes<span class="token punctuation">.</span>all <span class="token punctuation">&#123;</span> type <span class="token operator">-></span></pre></td></tr><tr><td data-num="7"></td><td><pre>        sourceSets <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>srcDirs <span class="token operator">+=</span> <span class="token string">"build/generated/ksp/$&#123;type.name&#125;/kotlin"</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>dependencies <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    ksp <span class="token function">project</span><span class="token punctuation">(</span><span class="token string">":xxx-compiler-ksp"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="4module目录的buildgradle-添加自定义的gradle脚本"><a class="anchor" href="#4module目录的buildgradle-添加自定义的gradle脚本">#</a> 4.module 目录的 build.gradle 添加自定义的 gradle 脚本</h2>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre>apply from<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">rootDir</span></span><span class="token string">/xxxx.gradle"</span></span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>KSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue知识点</title>
    <url>/post/7abbf13b.html</url>
    <content><![CDATA[<p>小知识点</p>
<p><span id="more"></span></p>
<blockquote>
<p>1. 插值语法  双括号用于标签体</p>
</blockquote>
<blockquote>
<p>2. 指令语法  用于标签属性   标签里属性用变量赋值不能直接用双括号，必须使用：前置，这样子的双引号内的内容就被当成表达式</p>
</blockquote>
<pre><code class="language-vue">&lt;a v-bind:href=&quot;url&quot;/&gt;   //简写等同于 &lt;a :href=&quot;url&quot;/&gt; 
</code></pre>
<blockquote>
<p>v-bind:xx 单向数据绑定  ；v-model:value 双向数据绑定，只能用在表单类标签，可以简写成 v-model, 因为默认收集的就是 value 值</p>
</blockquote>
<pre><code class="language-vue">&lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;/&gt;   //简写等同于  &lt;input type=&quot;text&quot; v-model=&quot;name&quot;/&gt;  
</code></pre>
<blockquote>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2FuZ3lpbmdibG9jay9wLzE1Mzk4NDU2Lmh0bWw=">Vue .sync 修饰符与 this.$emit (update:xxx) </span></p>
</blockquote>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Notification知识点</title>
    <url>/post/6082b58e.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuaHVhd2VpY2xvdWQuY29tL2Jsb2dzLzM2MjMwNQ==">Android 通知 Notification 使用全解析，看这篇就够了</span></p>
<p><span id="more"></span></p>
<h2 id="前台服务"><a class="anchor" href="#前台服务">#</a> 前台服务</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnRjZGV2ZWxvcGVyLmNuL2NuL2NvbW11bml0eS9ibG9nLzI1NzU5">安卓 9 以上，在后台使用麦克风或摄像头功能，必须启动一个前台服务</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC82NTI1MTAyNDM=">Android 后台应用开启前台服务 Android8 到 12 梳理</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vZ3VpZGUvY29tcG9uZW50cy9mb3JlZ3JvdW5kLXNlcnZpY2VzI3dpdS1yZXN0cmljdGlvbnM=">官方限制文档</span></p>
<ol>
<li>
<p>因为安卓 9 才需要启动前台服务，而安卓 8.0 以上就必须指定 NotificationChannel，所以 NotificationChannel 是必须存在的，不用分版本判断创建</p>
</li>
<li>
<p>案例的 NotificationCompat.Builder 创建还缺少其他必要参数</p>
<pre><code>       val builder: NotificationCompat.Builder = NotificationCompat.Builder(baseContext, CHANNEL_ID)
                    .setSmallIcon(xxx)
                    .setContentTitle(&quot;前台服务&quot;)
                    .setContentText(&quot;正在使用麦克风&quot;)
</code></pre>
</li>
</ol>
<p>3.<span class="exturl" data-url="aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzE4NTAyNTIvaG93LXRvLWtpbGwtYS1mb3JlZ3JvdW5kLXNlcnZpY2UtYWxvbmctd2l0aC10aGUtYXBwbGljYXRpb24=">app 被强杀时，前台服务会被重新创建，不会自动停止</span>   方法：onTaskRemoved 方法中调用 stopSelf</p>
<p>​</p>
<h2 id="常见问题"><a class="anchor" href="#常见问题">#</a> 常见问题</h2>
<p>1.setSmallIcon 方法没有效果，展示效果为白色方块  <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ludmVydGFzZS9yZWFjdC1uYXRpdmUtZmlyZWJhc2UvaXNzdWVzLzE3OTY=">问题讨论</span></p>
<p>解决方案：生成单独的通知图标透明文件  <span class="exturl" data-url="aHR0cHM6Ly9yb21hbm51cmlrLmdpdGh1Yi5pby9BbmRyb2lkQXNzZXRTdHVkaW8vaWNvbnMtbm90aWZpY2F0aW9uLmh0bWw=">官方网站</span></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Notification</tag>
      </tags>
  </entry>
  <entry>
    <title>View知识点</title>
    <url>/post/4c65a511.html</url>
    <content><![CDATA[<p><span id="more"></span></p>
<h2 id="快速找到是哪个view消费了点击事件"><a class="anchor" href="#快速找到是哪个view消费了点击事件">#</a> 快速找到是哪个 View 消费了点击事件</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Activity   </span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token operator">:</span> MotionEvent<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">val</span> re <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dispatchTouchEvent</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">val</span> decView <span class="token operator">=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>decorView <span class="token keyword">as</span> ViewGroup<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">val</span> mFirstTouchTargetF <span class="token operator">=</span> ViewGroup<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"mFirstTouchTarget"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    mFirstTouchTargetF<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">var</span> first <span class="token operator">=</span> mFirstTouchTargetF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>decView<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">var</span> consumeView<span class="token operator">:</span> View <span class="token operator">=</span> decView</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">val</span> viewF <span class="token operator">=</span> first<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"child"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        viewF<span class="token punctuation">.</span>isAccessible <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        consumeView <span class="token operator">=</span> viewF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token keyword">as</span> View</pre></td></tr><tr><td data-num="13"></td><td><pre>        first <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>consumeView <span class="token keyword">is</span> ViewGroup<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            mFirstTouchTargetF<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>consumeView<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">null</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    MLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"consumeView is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">consumeView</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">return</span> re</pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="布局问题"><a class="anchor" href="#布局问题">#</a> 布局问题</h2>
<ol>
<li>
<p>RelativeLayout 的 wrap_content 会导致 layout_marginBottom 属性失效</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3c5NTg3OTY2MzYvYXJ0aWNsZS9kZXRhaWxzLzUyOTIxNTg0">RelativeLayout 的 layout_marginBottom 属性失效问题</span></p>
</li>
<li>
<p>外层 LinearLayout 的宽是 wrap_content 情况下，内层 LinearLayout 的宽是 match_parent 不能铺满屏幕，只能达到 wrap_content 的效果。为了达到铺满屏幕的效果，内层使用宽是 match_parent 的 RelateLayout 控件</p>
</li>
</ol>
<h2 id="view事件传递"><a class="anchor" href="#view事件传递">#</a> View 事件传递</h2>
<p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2xpYmluYmluMTQ3MjU2MzY5L2FydGljbGUvZGV0YWlscy83OTkxMTI3Ng==">Android 中 onTouch，onTouchEvent，onClick 优先级</span></p>
<blockquote>
<p>当 ViewGroup 设置了 setOnClickListener，setOnTouchListener 返回 false （View 也是一样的逻辑）</p>
<pre><code>MyViewGroup-- dispatchTouchEvent
MyViewGroup-- setOnTouchListener
MyViewGroup-- onTouchEvent--ACTION_DOWN--true

MyViewGroup-- dispatchTouchEvent
MyViewGroup-- setOnTouchListener
MyViewGroup-- onTouchEvent--ACTION_UP--true

MyViewGroup-- setOnClickListener
</code></pre>
<p>当 ViewGroup 不设置 setOnClickListener，setOnTouchListener 返回 false</p>
<pre><code>MyViewGroup-- dispatchTouchEvent
MyViewGroup-- setOnTouchListener
MyViewGroup-- onTouchEvent--ACTION_DOWN--false
</code></pre>
<p><strong>可以看出 setOnClickListener 会影响 onTouchEvent 的返回值，导致消费事件</strong></p>
</blockquote>
<blockquote>
<p>当 ViewGroup 设置了 setOnClickListener，setOnTouchListener 返回 false</p>
<p>当 View 设置了 setOnClickListener，setOnTouchListener 返回 false</p>
<pre><code>MyViewGroup-- dispatchTouchEvent
MyView-- dispatchTouchEvent
MyView-- setOnTouchListener
MyView-- onTouchEvent--ACTION_DOWN--true

MyViewGroup-- dispatchTouchEvent
MyView-- dispatchTouchEvent
MyView-- setOnTouchListener
MyView-- onTouchEvent--ACTION_UP--true

MyView-- setOnClickListener
</code></pre>
<p><strong>可以看出 优先触发子 View 的 dispatchTouchEvent，不触发父 ViewGroup 的 setOnTouchListener</strong> <strong>反正就是优先子类</strong></p>
</blockquote>
<blockquote>
<p><strong>触发的子 View 的 setOnClickListener，父 ViewGroup 的 setOnClickListener 不会触发</strong>，</p>
<p><strong>不可能触发两个 View 的 click 事件，因为一个 Click 事件是在 UP 事件触发的，只能由一个 View 接受事件序列，即使 UP 事件场景 onTouchEvent 方法返回 false，给上层触发，生层也没有 PRESS 标识，无法触发点击事件</strong></p>
</blockquote>
<p>当 ViewGroup setOnTouchListener 返回 false</p>
<p>当 View  setOnTouchListener 返回 false</p>
<pre><code>MyViewGroup-- dispatchTouchEvent
MyView-- dispatchTouchEvent
MyView-- setOnTouchListener
MyView-- onTouchEvent--ACTION_DOWN--false
MyViewGroup-- setOnTouchListener
 MyViewGroup-- onTouchEvent--ACTION_DOWN--false
</code></pre>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>View</tag>
      </tags>
  </entry>
  <entry>
    <title>Comparator知识点</title>
    <url>/post/c4311606.html</url>
    <content><![CDATA[<h2 id="1comparator接口-compare方法实现返回值探究"><a class="anchor" href="#1comparator接口-compare方法实现返回值探究">#</a> 1.Comparator 接口  compare 方法实现返回值探究</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre>object <span class="token operator">:</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>            override fun <span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token operator">:</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">,</span> o2<span class="token operator">:</span> <span class="token class-name">Object</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Int</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">return</span> <span class="token number">01.</span>xxx <span class="token operator">-</span><span class="token number">02.</span>xxx</pre></td></tr></table></figure><p>代表着升序队列，xx 属性越小的排在越前面 ，适用场景</p>
<ol>
<li>xxx 属性代表着进场顺序，而队列需要 FIFO</li>
<li>xxx 属性代表着创建时间，而队列需要先创建先出</li>
</ol>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">return</span> <span class="token number">02.</span>xxx <span class="token operator">-</span><span class="token number">01.</span>xxx</pre></td></tr></table></figure><p>代表着降序队列，xx 属性越大的排在越前面 ，适用场景</p>
<ol>
<li>xxx 属性代表着优先级，而队列是高优先级队列</li>
</ol>
<p><span id="more"></span></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Comparator</tag>
      </tags>
  </entry>
  <entry>
    <title>DialogFragment知识点</title>
    <url>/post/6b67b819.html</url>
    <content><![CDATA[<h2 id="生命周期"><a class="anchor" href="#生命周期">#</a> 生命周期</h2>
<pre><code>2019-03-10 14:19:10.971 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onAttach
2019-03-10 14:19:10.971 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onCreate
2019-03-10 14:19:10.972 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onCreateDialog
2019-03-10 14:19:10.972 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onCreateView
2019-03-10 14:19:10.994 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onActivityCreated
2019-03-10 14:19:11.186 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onStart
2019-03-10 14:19:11.186 22626-22626/org.lym.sourcecodeparse D/DialogFragment: onResume
</code></pre>
<p><span id="more"></span></p>
<h2 id="oncreatedialog调用时机为什么比oncreateview快"><a class="anchor" href="#oncreatedialog调用时机为什么比oncreateview快">#</a> onCreateDialog 调用时机为什么比 onCreateView 快</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//FragmentStateManager 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">createView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 这里触发 onCreateDialog</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token class-name">LayoutInflater</span> layoutInflater <span class="token operator">=</span> mFragment<span class="token punctuation">.</span><span class="token function">performGetLayoutInflater</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        mFragment<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 这里触发 onCreateView</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    mFragment<span class="token punctuation">.</span><span class="token function">performCreateView</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> mFragment<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//fragment 类</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token class-name">LayoutInflater</span> <span class="token function">performGetLayoutInflater</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mLayoutInflater <span class="token operator">=</span> <span class="token function">onGetLayoutInflater</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">return</span> mLayoutInflater<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">//DialogFragment 类   重写了 fragment 的 onGetLayoutInflater 方法</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">LayoutInflater</span> <span class="token function">onGetLayoutInflater</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">prepareDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDialog <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        layoutInflater <span class="token operator">=</span> layoutInflater<span class="token punctuation">.</span><span class="token function">cloneInContext</span><span class="token punctuation">(</span>mDialog<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> layoutInflater<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareDialog</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Bundle</span> savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    mDialog <span class="token operator">=</span> <span class="token function">onCreateDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="关键点"><a class="anchor" href="#关键点">#</a> 关键点</h2>
<h6 id="requestfeature方法必须在oncreateview方法之前调用"><a class="anchor" href="#requestfeature方法必须在oncreateview方法之前调用">#</a> requestFeature 方法必须在 onCreateView 方法之前调用</h6>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Dialog <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>        <span class="token keyword">val</span> dialog <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        dialog<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token function">requestFeature</span><span class="token punctuation">(</span>Window<span class="token punctuation">.</span>FEATURE_NO_TITLE<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> dialog</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​</p>
<h6 id="setlayoutsetgravity等改变ui的方法必须在onstart中调用不能在oncreatedialog中调用"><a class="anchor" href="#setlayoutsetgravity等改变ui的方法必须在onstart中调用不能在oncreatedialog中调用">#</a> setLayout，setGravity 等改变 UI 的方法必须在 onStart 中调用，不能在 onCreateDialog 中调用</h6>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//Window 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">final</span> <span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> attrs <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    attrs<span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    attrs<span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">dispatchWindowAttributesChanged</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 下发 attrs</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//Dialog 类</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onWindowAttributesChanged</span><span class="token punctuation">(</span><span class="token class-name">WindowManager<span class="token punctuation">.</span>LayoutParams</span> params<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDecor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 这里的判断是关键</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        mWindowManager<span class="token punctuation">.</span><span class="token function">updateViewLayout</span><span class="token punctuation">(</span>mDecor<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看出 setLayout 等方法必须在 mDecor 有值时调用才有效，在 onCreateDialog 方法被调用时 mDecor 为 null，无法进行 UI 的设置</p>
<h5 id="mdecor初始化的时机"><a class="anchor" href="#mdecor初始化的时机">#</a> mDecor 初始化的时机</h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//DialogFragment 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mDialog <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        mDialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//Dialog 类</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    mDecor <span class="token operator">=</span> mWindow<span class="token punctuation">.</span><span class="token function">getDecorView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看出 mDecor 在 onStart 方法后才会赋值</p>
<h6 id="dialog不拦截区域外的点击事件"><a class="anchor" href="#dialog不拦截区域外的点击事件">#</a> dialog 不拦截区域外的点击事件</h6>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setFlags</span><span class="token punctuation">(</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCH_MODAL<span class="token punctuation">,</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCH_MODAL<span class="token punctuation">)</span></pre></td></tr></table></figure><h5 id="dialogfragment制作的toast模板可以出现在dialog之上且不影响activity的点击事件"><a class="anchor" href="#dialogfragment制作的toast模板可以出现在dialog之上且不影响activity的点击事件">#</a> <strong>DialogFragment 制作的 Toast 模板：(可以出现在 dialog 之上，且不影响 Activity 的点击事件)</strong></h5>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> MyToast <span class="token operator">:</span> <span class="token function">DialogFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token keyword">val</span> TAG <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">"MyToast"</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span>value<span class="token operator">:</span> Any<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">val</span> dialog <span class="token operator">=</span> <span class="token function">MyToast</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            dialog<span class="token punctuation">.</span>arguments <span class="token operator">=</span> <span class="token function">Bundle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token function">putInt</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"value"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            dialog<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>fm <span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"Tosat"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateView</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        inflater<span class="token operator">:</span> LayoutInflater<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        container<span class="token operator">:</span> ViewGroup<span class="token operator">?</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">)</span><span class="token operator">:</span> View<span class="token operator">?</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">val</span> view <span class="token operator">=</span> inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>view<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> view</pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreateDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">:</span> Dialog <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">val</span> dialog <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreateDialog</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        dialog<span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 去除 title 样式，必须写在 onViewCreated 之前</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token function">requestFeature</span><span class="token punctuation">(</span>Window<span class="token punctuation">.</span>FEATURE_NO_TITLE<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> dialog</pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        dialog<span class="token operator">?</span><span class="token punctuation">.</span>window<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token comment">// 去除灰色背景</span></pre></td></tr><tr><td data-num="34"></td><td><pre>            <span class="token function">clearFlags</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_DIM_BEHIND<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 传递点击事件到 Activity</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token function">setFlags</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCH_MODAL<span class="token punctuation">,</span>WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>FLAG_NOT_TOUCH_MODAL<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token comment">// 背景</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token function">ColorDrawable</span><span class="token punctuation">(</span><span class="token number">0x00000000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token comment">// 设置宽高</span></pre></td></tr><tr><td data-num="40"></td><td><pre>            <span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">.</span>dpInt<span class="token punctuation">,</span> WindowManager<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token comment">// 位置</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token function">setGravity</span><span class="token punctuation">(</span>Gravity<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>        <span class="token comment">// 不可取消</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        isCancelable <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token operator">:</span> View<span class="token punctuation">,</span> savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onViewCreated</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> savedInstanceState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token comment">// 处理逻辑</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token comment">// 启动定时器调用 dismissWithAlpha</span></pre></td></tr><tr><td data-num="56"></td><td><pre>        lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="57"></td><td><pre>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="58"></td><td><pre>            <span class="token function">dismissWithAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="61"></td><td><pre></pre></td></tr><tr><td data-num="62"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">dismissWithAlpha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">val</span> animator <span class="token operator">=</span> ObjectAnimator<span class="token punctuation">.</span><span class="token function">ofFloat</span><span class="token punctuation">(</span>view<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"alpha"</span></span><span class="token punctuation">,</span> <span class="token number">1.0f</span><span class="token punctuation">,</span> <span class="token number">0f</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        animator<span class="token punctuation">.</span>duration <span class="token operator">=</span> <span class="token number">320</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        animator<span class="token punctuation">.</span><span class="token function">doOnEnd</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="66"></td><td><pre>           <span class="token keyword">if</span> <span class="token punctuation">(</span>fragmentManager <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="67"></td><td><pre>               <span class="token comment">// 加个 null 判断 因为有个定时器逻辑，最容易发生 Fragment not associated with a fragment manager.</span></pre></td></tr><tr><td data-num="68"></td><td><pre>                <span class="token function">dismissAllowingStateLoss</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        animator<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    </pre></td></tr><tr><td data-num="74"></td><td><pre>     <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        animator<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>DialogFragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Fragment知识点</title>
    <url>/post/1733ce00.html</url>
    <content><![CDATA[<h2 id="1关键节点"><a class="anchor" href="#1关键节点">#</a> 1. 关键节点</h2>
<p>Fragment 调用生命周期最近的方法</p>
<p>androidx.fragment.app.FragmentStateManager#moveToExpectedState</p>
<p><span id="more"></span></p>
<h2 id="2commit与commitnow的区别"><a class="anchor" href="#2commit与commitnow的区别">#</a> 2.Commit 与 CommitNow 的区别</h2>
<ol>
<li>
<p>commit() &gt;&gt; enqueueAction() &gt;&gt; scheduleCommit() &gt;&gt; execPendingActions()</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">scheduleCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">boolean</span> postponeReady <span class="token operator">=</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            mPostponedTransactions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mPostponedTransactions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">boolean</span> pendingReady <span class="token operator">=</span> mPendingActions <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> mPendingActions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>postponeReady <span class="token operator">||</span> pendingReady<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            mHost<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeCallbacks</span><span class="token punctuation">(</span>mExecCommit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            mHost<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>mExecCommit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li>
</ol>
<p>​</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Runnable</span> mExecCommit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">execPendingActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>可以看到 commit 方法利用 Handler 机制， 是异步的，所以不清楚 fragment 什么时候被添加上，不清楚生命周期什么时候被调用</p>
<p>2.commitNow() &gt;&gt;  execSingleAction() &gt;&gt;  removeRedundantOperationsAndExecute() &gt;&gt; executeOpsTogether()</p>
<p>删除部分代码，贴入 executeOpsTogether 重要部分代码</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>newState <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">computeExpectedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>                    stateWasChanged <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>                    <span class="token keyword">int</span> nextStep<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                        nextStep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                        <span class="token keyword">switch</span> <span class="token punctuation">(</span>nextStep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureInflatedView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activityCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到 commitNow 是同步的，连同 Fragment 的各个生命周期 OnCreate，OnCreateView 都会在同一个 Looper 消息循环中被调用</p>
<p>因此在一些迫切需要立刻展示的场景，可以使用 commitNow 或者 commitNowAllowingStateLoss</p>
<h2 id="3fragment-onresume调用时view的windowtoken是空的吗"><a class="anchor" href="#3fragment-onresume调用时view的windowtoken是空的吗">#</a> 3.Fragment onResume 调用时，view 的 WindowToken 是空的吗？</h2>
<p><em>答案：不一定，如果 activity 的 window 没在屏幕上时，那么 token 就是空的；如果是 activity 的 window 已经在屏幕上时，再创建显示一个 fragment，此时 token 就不是空的</em></p>
<h5 id="fragment是在activity的oncreate方法时加入场景下-fragment的onresume方法调用路径"><a class="anchor" href="#fragment是在activity的oncreate方法时加入场景下-fragment的onresume方法调用路径">#</a> Fragment 是在 Activity 的 onCreate 方法时加入场景下，Fragment 的 onResume 方法调用路径</h5>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/06/12/3dd9a65d555145c1.jpg" alt="" /></p>
<p>可以看到 Fragment 的 onResume 是在同一个消息循环中，跟着 Activity 的 onResume 方法调用的，</p>
<p>我们都知道 Activity 的 onResume 方法调用，activity 的 view 是还没有 add 到 window 上的，所以导致 fragment 的 view 有没有 add 到 window 上，没有 token</p>
<h5 id="fragment-的view是什么时候add的"><a class="anchor" href="#fragment-的view是什么时候add的">#</a> Fragment 的 view 是什么时候 add 的？</h5>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//FragmentStateManager 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">createView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mContainer <span class="token operator">=</span> container<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">//Fragment 的 onCreateView 被调用</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span><span class="token function">performCreateView</span><span class="token punctuation">(</span>layoutInflater<span class="token punctuation">,</span> container<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mView <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mView<span class="token punctuation">.</span><span class="token function">setSaveFromParentEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mView<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span>fragment_container_view_tag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment">// 加入父布局</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragmentStore<span class="token punctuation">.</span><span class="token function">findFragmentIndexInContainer</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mContainer<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mView<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token comment">//Fragment 的 onViewCreated 被调用</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span><span class="token function">performViewCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mDispatcher<span class="token punctuation">.</span><span class="token function">dispatchOnFragmentViewCreated</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mView<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mSavedFragmentState<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到虽然 Fragment 的 view 在 createView 时就 add 到 mContainer 上，但可惜 mContainer 还没有 add 到 window 上，所以导致一直到 onResume 时，也拿不到 token</p>
<p>知识场景：Fragment onResume 调用时，利用 fragment 的 view 显示一个 popupwindow 可能会因为拿不到 token 导致崩溃</p>
<pre><code>android.view.WindowManager$BadTokenException: Unable to add window -- token null is not valid; is your activity running?
</code></pre>
<p>解决方法：post 一下再显示 popupwindow</p>
<h2 id="探究activity-oncreate方法中-commit-fragment-场景下fragment的生命周期"><a class="anchor" href="#探究activity-oncreate方法中-commit-fragment-场景下fragment的生命周期">#</a> 探究 activity onCreate 方法中 commit fragment 场景下，fragment 的生命周期</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//FragmentActivity 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragments<span class="token punctuation">.</span><span class="token function">noteStateNotSaved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mStopped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>mCreated<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mCreated <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>mFragments<span class="token punctuation">.</span><span class="token function">dispatchActivityCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//this.dispatchStateChange(4);</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragments<span class="token punctuation">.</span><span class="token function">execPendingActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragmentLifecycleRegistry<span class="token punctuation">.</span><span class="token function">handleLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Event</span><span class="token punctuation">.</span><span class="token constant">ON_START</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span>mFragments<span class="token punctuation">.</span><span class="token function">dispatchStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this.dispatchStateChange(5);</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//FragmentStateManager 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">moveToExpectedState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        nextStep <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">switch</span><span class="token punctuation">(</span>nextStep<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">attach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">ensureInflatedView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">createView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">activityCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span>mFragment<span class="token punctuation">.</span>mState <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到除了 fragment 的 onResume 方法外，所有创建的生命周期都在 Activity 的 onStart () 中被调用。</p>
<p>其实 Activity 的 onCreate 方法也会调用 this.dispatchStateChange (1)，但我们的场景 onCreate 被调用时才进行 commit，导致此时还没有任何的 fragment。所有都生命周期堆积在 Activity 的 onStart () 中被调用</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Fragment</tag>
      </tags>
  </entry>
  <entry>
    <title>Flow知识点</title>
    <url>/post/58bbdd0e.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTg5NTM2ODc2MDk2OTEzNDM5">【Kotlin Flow】 一眼看全 ——Flow 操作符大全</span></p>
<h1 id="flow-的collect的正常用法"><a class="anchor" href="#flow-的collect的正常用法">#</a> Flow 的 collect 的正常用法</h1>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre>mainScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    flow<span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token comment">//do something</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>mainScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    flow2<span class="token punctuation">.</span><span class="token function">collect</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token comment">//do something</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>flow 的 collect 是个 suspend 函数，内部逻辑是个 while (true) 死循环，所以不能在 collect 之后写任何代码，因为执行不到</p>
<p><span id="more"></span></p>
<p>下面为 <strong>SharedFlowImpl</strong> 的代码</p>
<pre><code>override suspend fun collect(collector: FlowCollector&lt;T&gt;): Nothing &#123;
    val slot = allocateSlot()
    try &#123;
        if (collector is SubscribedFlowCollector) collector.onSubscription()
        val collectorJob = currentCoroutineContext()[Job]
        while (true) &#123;
            var newValue: Any?
            while (true) &#123;
                newValue = tryTakeValue(slot) // attempt no-suspend fast path first
                if (newValue !== NO_VALUE) break
                awaitValue(slot) // await signal that the new value is available
            &#125;
            collectorJob?.ensureActive()
            collector.emit(newValue as T)
        &#125;
    &#125; finally &#123;
        freeSlot(slot)
    &#125;
&#125;
</code></pre>
<p>&lt;font color='red'&gt; 如果需要 collect 一个 flow，需要单独起一个协程，该协程内只能 collect 一个 flow，不能在 collect 函数后面加任何代码 &lt;/font&gt;</p>
<h1 id="zip操作符和combine操作符区别"><a class="anchor" href="#zip操作符和combine操作符区别">#</a> <em>zip</em> 操作符和<em> combine</em> 操作符区别</h1>
<ol>
<li>
<p>zip 要求 ：两个流发送数据的次数必须一致，1+1 合并成新的数据</p>
<p>​     如果 A 流发两个数据，B 流发一个数据，则 A 流的第二个数据因为找不到 B 流的对应数据，不会触发 zip 流的合并发送</p>
</li>
<li>
<p>combine 要求：没啥要求，两个流任意一个流的数据刷新，combine 流都会取两个流的最新值进行合并</p>
</li>
</ol>
<h1 id="tryemit方法"><a class="anchor" href="#tryemit方法">#</a> tryEmit 方法</h1>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * Tries to emit a [value] to this shared flow without suspending. It returns `true` if the value was</pre></td></tr><tr><td data-num="3"></td><td><pre>     * emitted successfully (see below). When this function returns `false`, it means that a call to a plain [emit]</pre></td></tr><tr><td data-num="4"></td><td><pre>     * function would suspend until there is buffer space available.</pre></td></tr><tr><td data-num="5"></td><td><pre>     *</pre></td></tr><tr><td data-num="6"></td><td><pre>     * This call can return `false` only when the [BufferOverflow] strategy is</pre></td></tr><tr><td data-num="7"></td><td><pre>     * [SUSPEND][BufferOverflow.SUSPEND] **and** there are subscribers collecting this shared flow.</pre></td></tr><tr><td data-num="8"></td><td><pre>     *</pre></td></tr><tr><td data-num="9"></td><td><pre>     * If there are no subscribers, the buffer is not used.</pre></td></tr><tr><td data-num="10"></td><td><pre>     * Instead, the most recently emitted value is simply stored into</pre></td></tr><tr><td data-num="11"></td><td><pre>     * the replay cache if one was configured, displacing the older elements there,</pre></td></tr><tr><td data-num="12"></td><td><pre>     * or dropped if no replay cache was configured. In any case, `tryEmit` returns `true`.</pre></td></tr><tr><td data-num="13"></td><td><pre>     *</pre></td></tr><tr><td data-num="14"></td><td><pre>     * This method is **thread-safe** and can be safely invoked from concurrent coroutines without</pre></td></tr><tr><td data-num="15"></td><td><pre>     * external synchronization.</pre></td></tr><tr><td data-num="16"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">tryEmit</span><span class="token punctuation">(</span>value<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> Boolean</pre></td></tr></table></figure><p><strong>慎用 tryEmit，看备注可知，当 strategy 是 BufferOverflow.SUSPEND 时（默认策略），且有 subscribers 时 就会发送失败，返回 false</strong></p>
<h1 id="stateflow-data-class-的问题"><a class="anchor" href="#stateflow-data-class-的问题">#</a> StateFlow + data class 的问题</h1>
<p>data class 重写了 equal，判断每个属性是否相等，而不是判断内存地址</p>
<p>而 StateFlow 发现 新旧数据 equal 时则不会发送新数据</p>
<h1 id="livedata和stateflow-优缺点"><a class="anchor" href="#livedata和stateflow-优缺点">#</a> LiveData 和 StateFlow 优缺点</h1>
<ul>
<li>
<p><code>StateFlow</code>  需要将初始状态传递给构造函数，而  <code>LiveData</code>  不需要</p>
</li>
<li>
<p>LiveData 观察者的回调永远发生在主线程；value 是 nullable 的； <code>LiveData</code>  是不防抖的； <code>LiveData</code>  的  <code>transformation</code>  工作在主线程</p>
</li>
<li>
<p>Flow 属于 Kotlin 协程的一部分，仅 Kotlin 使用；value 空安全；防抖；提供很多操作符支持切换线程</p>
</li>
<li>
<p>当 View 进入  <code>STOPPED</code>  状态时， <code>LiveData.observe()</code>  会自动取消注册使用方，而从  <code>StateFlow</code>  或任何其他数据流收集数据的操作并不会自动停止。如需实现相同的行为，您需要从  <code>Lifecycle.repeatOnLifecycle</code>  块收集数据流。</p>
</li>
</ul>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Flow</tag>
      </tags>
  </entry>
  <entry>
    <title>Glide知识点</title>
    <url>/post/692dc279.html</url>
    <content><![CDATA[<h1 id="glideokhttp3"><a class="anchor" href="#glideokhttp3">#</a> Glide+OKHTTP3</h1>
<h2 id="1glide-接入okhttp3"><a class="anchor" href="#1glide-接入okhttp3">#</a> 1.Glide 接入 OKHttp3</h2>
<figure class="highlight groovy"><figcaption data-lang="groovy"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">api</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"com.github.bumptech.glide:glide:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">glide_version</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">exclude</span><span class="token punctuation">(</span>group<span class="token punctuation">:</span> <span class="token string">'androidx.annotation'</span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token string">'annotation'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token function">implementation</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">"com.github.bumptech.glide:okhttp3-integration:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">glide_version</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    exclude group<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"com.squareup.okhttp3"</span></span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"okhttp"</span></span></pre></td></tr><tr><td data-num="6"></td><td><pre>    exclude group<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"com.android.support"</span></span></pre></td></tr><tr><td data-num="7"></td><td><pre>    exclude group<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"com.squareup.okio"</span></span><span class="token punctuation">,</span> module<span class="token punctuation">:</span> <span class="token interpolation-string"><span class="token string">"okio"</span></span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>api <span class="token interpolation-string"><span class="token string">"com.squareup.okhttp3:okhttp:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression">okhttp_version</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span></pre></td></tr></table></figure><p><span id="more"></span></p>
<h2 id="2okhttp3-integration核心代码"><a class="anchor" href="#2okhttp3-integration核心代码">#</a> 2.okhttp3-integration 核心代码</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@GlideModule</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">OkHttpLibraryGlideModule</span> <span class="token keyword">extends</span> <span class="token class-name">LibraryGlideModule</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerComponents</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Glide</span> glide<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Registry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    registry<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">GlideUrl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpUrlLoader<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3替换自定义的okhttpclient"><a class="anchor" href="#3替换自定义的okhttpclient">#</a> 3. 替换自定义的 OKHttpClient</h2>
<p>第二步可以看出，arr 中使用的是 LibraryGlideModule，项目中使用自定义的 AppGlideModule，就可以比 LibraryGlideModule 更晚执行，从而替代自定义的 OKHttpClient</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@GlideModule</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">MyGlideModule</span> <span class="token keyword">extends</span> <span class="token class-name">AppGlideModule</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerComponents</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Glide</span> glide<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Registry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpClient<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">Call<span class="token punctuation">.</span>Factory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        registry<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">GlideUrl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">OkHttpUrlLoader<span class="token punctuation">.</span>Factory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="4glidemodule的registercomponents方法是什么时候被调用的"><a class="anchor" href="#4glidemodule的registercomponents方法是什么时候被调用的">#</a> 4.GlideModule 的 registerComponents 方法是什么时候被调用的？</h2>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/07/31/c035ed8ed3cd009e.jpg" alt="" /></p>
<p>可以看出是图片下载被解析时，调用 getRegistry 方法时，如果还未初始化，就会走初始化逻辑，调用 registerComponents</p>
<h1 id="glideokhttp3-线程池分析"><a class="anchor" href="#glideokhttp3-线程池分析">#</a> Glide+OKHttp3 线程池分析</h1>
<h2 id="1glide线程池"><a class="anchor" href="#1glide线程池">#</a> 1.Glide 线程池</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//com.bumptech.glide.GlideBuilder</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Glide</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GlideModule</span><span class="token punctuation">></span></span> manifestModules<span class="token punctuation">,</span> <span class="token class-name">AppGlideModule</span> annotationGeneratedGlideModule<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 图片下载线程池</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sourceExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        sourceExecutor <span class="token operator">=</span> <span class="token class-name">GlideExecutor</span><span class="token punctuation">.</span><span class="token function">newSourceExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>	<span class="token comment">// 硬盘解析线程池</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>diskCacheExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        diskCacheExecutor <span class="token operator">=</span> <span class="token class-name">GlideExecutor</span><span class="token punctuation">.</span><span class="token function">newDiskCacheExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>	<span class="token comment">// 动画解析线程池</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>animationExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        animationExecutor <span class="token operator">=</span> <span class="token class-name">GlideExecutor</span><span class="token punctuation">.</span><span class="token function">newAnimationExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><img data-src="https://s3.bmp.ovh/imgs/2023/08/16/f29dedbeb0a190b2.jpg" alt="" /></p>
<p>图片下载线程池是个【核心 4 线程，最多 4 线程】的线程池</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/08/16/c4fcc46afe34fc6e.jpg" alt="" /></p>
<p>硬盘解析线程池是个【核心 1 线程，最多 1 线程】的线程池</p>
<p><img data-src="https://s3.bmp.ovh/imgs/2023/08/16/9d4c9903a1a4901e.jpg" alt="" /></p>
<p>动画解析线程池是个【核心 2 线程，最多 2 线程】的线程池</p>
<ol>
<li><em><strong>在未接入 OKHttp3 时，Source 线程池用于下载图片，可以看出最多支持 4 个图片同时下载</strong></em></li>
<li><em><strong>在接入 OKHttp3 时，Source 线程池用于向 OKHttp3 线程池提交下载任务获得 InputStream 基本是瞬间完成提交任务，等 Okhttp3 下载回调，所以下载图片取决于 OKHttp3 配置</strong></em></li>
</ol>
<h2 id="2okhttp3线程池"><a class="anchor" href="#2okhttp3线程池">#</a> 2.OkHttp3 线程池</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> executorService<span class="token operator">:</span> ExecutorService</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executorServiceOrNull <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        executorServiceOrNull <span class="token operator">=</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Int<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>                                                   <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">okHttpName</span></span><span class="token string"> Dispatcher"</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">return</span> executorServiceOrNull<span class="token operator">!!</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//okhttp3.Dispatcher</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">promoteAndExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assertThreadDoesntHoldLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">val</span> executableCalls <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>AsyncCall<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">val</span> isRunning<span class="token operator">:</span> Boolean</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">val</span> i <span class="token operator">=</span> readyAsyncCalls<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">val</span> asyncCall <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span>size <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequests<span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">// 最多支持 64 个请求</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncCall<span class="token punctuation">.</span>callsPerHost<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequestsPerHost<span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token comment">// 每个 Host 最多支持 5 个请求</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>            i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            asyncCall<span class="token punctuation">.</span>callsPerHost<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            executableCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>asyncCall<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>asyncCall<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        isRunning <span class="token operator">=</span> <span class="token function">runningCallsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until executableCalls<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">val</span> asyncCall <span class="token operator">=</span> executableCalls<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        asyncCall<span class="token punctuation">.</span><span class="token function">executeOn</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> isRunning</pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>OKhttp3 线程池是无限制的，但最多同时支持 64 个请求，每个 Host 同时最多支持 5 个请求</p>
<h1 id="glide-into后图片加载时间"><a class="anchor" href="#glide-into后图片加载时间">#</a> Glide into () 后图片加载时间</h1>
<h2 id="需要有具体的宽高-glide才会加载图片"><a class="anchor" href="#需要有具体的宽高-glide才会加载图片">#</a> <em><strong>需要有具体的宽高， glide 才会加载图片</strong></em></h2>
<p>如果设置了 RequestOptions 的 override 方法，则直接调用 onSizeReady，否则设置 target 的回调监听</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//com.bumptech.glide.request.SingleRequest</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Util</span><span class="token punctuation">.</span><span class="token function">isValidDimensions</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token function">onSizeReady</span><span class="token punctuation">(</span>overrideWidth<span class="token punctuation">,</span> overrideHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token comment">// 设置回调</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        target<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSizeReady</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    loadStatus <span class="token operator">=</span>engine<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="viewtarget啥时候会返回合适的宽高"><a class="anchor" href="#viewtarget啥时候会返回合适的宽高">#</a> ViewTarget 啥时候会返回合适的宽高？</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">SizeReadyCallback</span> cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> currentWidth <span class="token operator">=</span> <span class="token function">getTargetWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> currentHeight <span class="token operator">=</span> <span class="token function">getTargetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 判断目前是否有合适的宽高，是则直接返回</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isViewStateAndSizeValid</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        cb<span class="token punctuation">.</span><span class="token function">onSizeReady</span><span class="token punctuation">(</span>currentWidth<span class="token punctuation">,</span> currentHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cbs<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        cbs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">// 设置 addOnPreDrawListener，View 绘制前回调</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutListener <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token class-name">ViewTreeObserver</span> observer <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getViewTreeObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        layoutListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SizeDeterminerLayoutListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        observer<span class="token punctuation">.</span><span class="token function">addOnPreDrawListener</span><span class="token punctuation">(</span>layoutListener<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getTargetHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">int</span> verticalPadding <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> view<span class="token punctuation">.</span><span class="token function">getPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">LayoutParams</span> layoutParams <span class="token operator">=</span> view<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">int</span> layoutParamSize <span class="token operator">=</span> layoutParams <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> layoutParams<span class="token punctuation">.</span>height <span class="token operator">:</span> <span class="token constant">PENDING_SIZE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">getTargetDimen</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> layoutParamSize<span class="token punctuation">,</span> verticalPadding<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getTargetDimen</span><span class="token punctuation">(</span><span class="token keyword">int</span> viewSize<span class="token punctuation">,</span> <span class="token keyword">int</span> paramSize<span class="token punctuation">,</span> <span class="token keyword">int</span> paddingSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">//params 的宽高是固定值</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> adjustedParamSize <span class="token operator">=</span> paramSize <span class="token operator">-</span> paddingSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adjustedParamSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> adjustedParamSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">//View 正打算 layout 布局，返回 PENDING_SIZE 表示目前的宽高不合适，等待 PreDrawListener 回调</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>waitForLayout <span class="token operator">&amp;&amp;</span> view<span class="token punctuation">.</span><span class="token function">isLayoutRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> <span class="token constant">PENDING_SIZE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">//View 存在宽高数据，因为这个宽高数据可能是脏数据，所以放这么后面</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">int</span> adjustedViewSize <span class="token operator">=</span> viewSize <span class="token operator">-</span> paddingSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>adjustedViewSize <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">return</span> adjustedViewSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token comment">//view 目前没有请求 layout 布局，且宽高是 WRAP_CONTENT，返回屏幕宽高的最大值</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>view<span class="token punctuation">.</span><span class="token function">isLayoutRequested</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> paramSize <span class="token operator">==</span> <span class="token class-name">LayoutParams</span><span class="token punctuation">.</span><span class="token constant">WRAP_CONTENT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">getMaxDisplayLength</span><span class="token punctuation">(</span>view<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">// 返回 PENDING_SIZE 表示目前的宽高不合适，等待 PreDrawListener 回调</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">return</span> <span class="token constant">PENDING_SIZE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​    <strong>into 后宽高数据的获取逻辑</strong>：</p>
<ol>
<li>RequestOptions 存在 overrideWidth, overrideHeight</li>
<li>params 的宽高是固定值</li>
<li>viewTarget 的 waitForLayout 是 true，且正打算 layout 布局，则等待 PreDrawListener 回调（waitForLayout 无设置默认值，boolean 默认值是 false）</li>
<li>view 存在真实的宽高数据</li>
<li>view 目前没有请求 layout 布局，且宽高是 WRAP_CONTENT，返回屏幕宽高的最大值</li>
<li>等待 PreDrawListener 回调</li>
</ol>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Glide</tag>
      </tags>
  </entry>
  <entry>
    <title>MAT使用技巧</title>
    <url>/post/4f06ab99.html</url>
    <content><![CDATA[<h2 id="1mat打开报错-memoryanalyzer指定jdk版本"><a class="anchor" href="#1mat打开报错-memoryanalyzer指定jdk版本">#</a> 1.MAT 打开报错    <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2VwaXRvbWl6ZWx1L2FydGljbGUvZGV0YWlscy8xMTgyOTQ0MzI=">MemoryAnalyzer 指定 JDK 版本</span></h2>
<h2 id="2hprof-转为mat能读取的格式-android-studio导出hprof到mat工具流程"><a class="anchor" href="#2hprof-转为mat能读取的格式-android-studio导出hprof到mat工具流程">#</a> 2.Hprof 转为 MAT 能读取的格式 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RhbmdlZGVndXNoaS9hcnRpY2xlL2RldGFpbHMvODMwMTU2MTI=">Android studio 导出 hprof 到 MAT 工具流程</span></h2>
<h2 id="3对比多个hprof文件-使用mat比较多个hprof文件"><a class="anchor" href="#3对比多个hprof文件-使用mat比较多个hprof文件">#</a> 3. 对比多个 Hprof 文件 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21sZHhzL2FydGljbGUvZGV0YWlscy84OTM0OTA0NA==">使用 MAT 比较多个 hprof 文件</span></h2>
<p><span id="more"></span></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>MAT</tag>
      </tags>
  </entry>
  <entry>
    <title>Span知识点</title>
    <url>/post/p8hxlm4c.html</url>
    <content><![CDATA[<p><span id="more"></span></p>
<h6 id="linkmovementmethod问题点"><a class="anchor" href="#linkmovementmethod问题点">#</a> LinkMovementMethod 问题点：</h6>
<p>当 clickSpan 连着 imageSpan 时，点击 imageSpan 很容易就触发到 clickspan 的点击逻辑</p>
<p>特别是文本发生换行时，clickSpan 连着 imageSpan，此时 imagespan 处于行尾时，很容易触发该问题</p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iODdkZGRmMDJlMDQ=">ImageSpan 点击事件位置偏移问题</span></p>
<p>上面的博客提供了 BUG 原因和解决方案</p>
<h2 id="自定义linkmovementmethod"><a class="anchor" href="#自定义linkmovementmethod">#</a> 自定义 LinkMovementMethod</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMovementMethod</span> <span class="token keyword">extends</span> <span class="token class-name">ScrollingMovementMethod</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CLICK</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">UP</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">DOWN</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">HIDE_FLOATING_TOOLBAR_DELAY_MS</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canSelectArbitrarily</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">handleMovementKey</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> keyCode<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> movementMetaState<span class="token punctuation">,</span> <span class="token class-name">KeyEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>keyCode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">case</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">KEYCODE_DPAD_CENTER</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">case</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">KEYCODE_ENTER</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token function">metaStateHasNoModifiers</span><span class="token punctuation">(</span>movementMetaState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">KeyEvent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DOWN</span> <span class="token operator">&amp;&amp;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                            event<span class="token punctuation">.</span><span class="token function">getRepeatCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token constant">CLICK</span><span class="token punctuation">,</span> widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">handleMovementKey</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> keyCode<span class="token punctuation">,</span> movementMetaState<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">up</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token constant">UP</span><span class="token punctuation">,</span> widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">down</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token constant">DOWN</span><span class="token punctuation">,</span> widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token constant">UP</span><span class="token punctuation">,</span> widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">left</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">right</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token constant">DOWN</span><span class="token punctuation">,</span> widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">right</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="65"></td><td><pre></pre></td></tr><tr><td data-num="66"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token keyword">int</span> what<span class="token punctuation">,</span> <span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token class-name">Layout</span> layout <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token keyword">int</span> padding <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">getTotalPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                      widget<span class="token punctuation">.</span><span class="token function">getTotalPaddingBottom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token keyword">int</span> areaTop <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">int</span> areaBot <span class="token operator">=</span> areaTop <span class="token operator">+</span> widget<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> padding<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>        <span class="token keyword">int</span> lineTop <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getLineForVertical</span><span class="token punctuation">(</span>areaTop<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">int</span> lineBot <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getLineForVertical</span><span class="token punctuation">(</span>areaBot<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="76"></td><td><pre></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token keyword">int</span> first <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getLineStart</span><span class="token punctuation">(</span>lineTop<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token keyword">int</span> last <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getLineEnd</span><span class="token punctuation">(</span>lineBot<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token class-name">ClickableSpan</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpans</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> last<span class="token punctuation">,</span> <span class="token class-name">ClickableSpan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="81"></td><td><pre></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">getSelectionStart</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">getSelectionEnd</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token keyword">int</span> selStart <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token keyword">int</span> selEnd <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre></pre></td></tr><tr><td data-num="88"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selStart <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">getSpanStart</span><span class="token punctuation">(</span><span class="token constant">FROM_BELOW</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>                selStart <span class="token operator">=</span> selEnd <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="93"></td><td><pre></pre></td></tr><tr><td data-num="94"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selStart <span class="token operator">></span> last<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="95"></td><td><pre>            selStart <span class="token operator">=</span> selEnd <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>selEnd <span class="token operator">&lt;</span> first<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="97"></td><td><pre>            selStart <span class="token operator">=</span> selEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>what<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            <span class="token keyword">case</span> <span class="token constant">CLICK</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="101"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>selStart <span class="token operator">==</span> selEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="104"></td><td><pre></pre></td></tr><tr><td data-num="105"></td><td><pre>                <span class="token class-name">ClickableSpan</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpans</span><span class="token punctuation">(</span>selStart<span class="token punctuation">,</span> selEnd<span class="token punctuation">,</span> <span class="token class-name">ClickableSpan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre></pre></td></tr><tr><td data-num="107"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>links<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="108"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="110"></td><td><pre></pre></td></tr><tr><td data-num="111"></td><td><pre>                <span class="token class-name">ClickableSpan</span> link <span class="token operator">=</span> links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre><span class="token comment">//                if (link instanceof TextLinkSpan) &#123;</span></pre></td></tr><tr><td data-num="113"></td><td><pre><span class="token comment">//                    ((TextLinkSpan) link).onClick(widget, TextLinkSpan.INVOCATION_METHOD_KEYBOARD);</span></pre></td></tr><tr><td data-num="114"></td><td><pre><span class="token comment">//                &#125; else &#123;</span></pre></td></tr><tr><td data-num="115"></td><td><pre><span class="token comment">//                    link.onClick(widget);</span></pre></td></tr><tr><td data-num="116"></td><td><pre><span class="token comment">//                &#125;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>                link<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="119"></td><td><pre></pre></td></tr><tr><td data-num="120"></td><td><pre>            <span class="token keyword">case</span> <span class="token constant">UP</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="121"></td><td><pre>                <span class="token keyword">int</span> bestStart<span class="token punctuation">,</span> bestEnd<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre>                bestStart <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                bestEnd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="125"></td><td><pre></pre></td></tr><tr><td data-num="126"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>                    <span class="token keyword">int</span> end <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpanEnd</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="128"></td><td><pre></pre></td></tr><tr><td data-num="129"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">&lt;</span> selEnd <span class="token operator">||</span> selStart <span class="token operator">==</span> selEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>end <span class="token operator">></span> bestEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                            bestStart <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpanStart</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>                            bestEnd <span class="token operator">=</span> end<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="135"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="136"></td><td><pre></pre></td></tr><tr><td data-num="137"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bestStart <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>                    <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> bestEnd<span class="token punctuation">,</span> bestStart<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="141"></td><td><pre></pre></td></tr><tr><td data-num="142"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="143"></td><td><pre></pre></td></tr><tr><td data-num="144"></td><td><pre>            <span class="token keyword">case</span> <span class="token constant">DOWN</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="145"></td><td><pre>                bestStart <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="146"></td><td><pre>                bestEnd <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="147"></td><td><pre></pre></td></tr><tr><td data-num="148"></td><td><pre>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>                    <span class="token keyword">int</span> start <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpanStart</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre></pre></td></tr><tr><td data-num="151"></td><td><pre>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> selStart <span class="token operator">||</span> selStart <span class="token operator">==</span> selEnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> bestStart<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="153"></td><td><pre>                            bestStart <span class="token operator">=</span> start<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre>                            bestEnd <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpanEnd</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="155"></td><td><pre>                        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>                    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="158"></td><td><pre></pre></td></tr><tr><td data-num="159"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bestEnd <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="160"></td><td><pre>                    <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> bestStart<span class="token punctuation">,</span> bestEnd<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="161"></td><td><pre>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="162"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="163"></td><td><pre></pre></td></tr><tr><td data-num="164"></td><td><pre>                <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="166"></td><td><pre></pre></td></tr><tr><td data-num="167"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre></pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="171"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">onTouchEvent</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> buffer<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="172"></td><td><pre>                                <span class="token class-name">MotionEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>        <span class="token keyword">int</span> action <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="174"></td><td><pre></pre></td></tr><tr><td data-num="175"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span><span class="token constant">ACTION_UP</span> <span class="token operator">||</span> action <span class="token operator">==</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DOWN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>            <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>            <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> event<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre></pre></td></tr><tr><td data-num="179"></td><td><pre>            x <span class="token operator">-=</span> widget<span class="token punctuation">.</span><span class="token function">getTotalPaddingLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>            y <span class="token operator">-=</span> widget<span class="token punctuation">.</span><span class="token function">getTotalPaddingTop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre></pre></td></tr><tr><td data-num="182"></td><td><pre>            x <span class="token operator">+=</span> widget<span class="token punctuation">.</span><span class="token function">getScrollX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="183"></td><td><pre>            y <span class="token operator">+=</span> widget<span class="token punctuation">.</span><span class="token function">getScrollY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="184"></td><td><pre></pre></td></tr><tr><td data-num="185"></td><td><pre>            <span class="token class-name">Layout</span> layout <span class="token operator">=</span> widget<span class="token punctuation">.</span><span class="token function">getLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="186"></td><td><pre>            <span class="token keyword">int</span> line <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getLineForVertical</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>            <span class="token keyword">int</span> off <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getOffsetForHorizontal</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="188"></td><td><pre>            <span class="token comment">// 该 off 所在字符的水平偏移</span></pre></td></tr><tr><td data-num="189"></td><td><pre>            <span class="token keyword">float</span> xLeft <span class="token operator">=</span> layout<span class="token punctuation">.</span><span class="token function">getPrimaryHorizontal</span><span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>xLeft <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="191"></td><td><pre>                off <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="192"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="193"></td><td><pre>                off <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="194"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="195"></td><td><pre>            <span class="token class-name">ClickableSpan</span><span class="token punctuation">[</span><span class="token punctuation">]</span> links <span class="token operator">=</span> buffer<span class="token punctuation">.</span><span class="token function">getSpans</span><span class="token punctuation">(</span>off<span class="token punctuation">,</span> off<span class="token punctuation">,</span> <span class="token class-name">ClickableSpan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="196"></td><td><pre></pre></td></tr><tr><td data-num="197"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>links<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="198"></td><td><pre>                <span class="token class-name">ClickableSpan</span> link <span class="token operator">=</span> links<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span><span class="token constant">ACTION_UP</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="200"></td><td><pre><span class="token comment">//                    if (link instanceof TextLinkSpan) &#123;</span></pre></td></tr><tr><td data-num="201"></td><td><pre><span class="token comment">//                        ((TextLinkSpan) link).onClick(</span></pre></td></tr><tr><td data-num="202"></td><td><pre><span class="token comment">//                                widget, TextLinkSpan.INVOCATION_METHOD_TOUCH);</span></pre></td></tr><tr><td data-num="203"></td><td><pre><span class="token comment">//                    &#125; else &#123;</span></pre></td></tr><tr><td data-num="204"></td><td><pre><span class="token comment">//                        link.onClick(widget);</span></pre></td></tr><tr><td data-num="205"></td><td><pre><span class="token comment">//                    &#125;</span></pre></td></tr><tr><td data-num="206"></td><td><pre>                    link<span class="token punctuation">.</span><span class="token function">onClick</span><span class="token punctuation">(</span>widget<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="207"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>action <span class="token operator">==</span> <span class="token class-name">MotionEvent</span><span class="token punctuation">.</span><span class="token constant">ACTION_DOWN</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="208"></td><td><pre><span class="token comment">//                    if (widget.getContext().getApplicationInfo().targetSdkVersion</span></pre></td></tr><tr><td data-num="209"></td><td><pre><span class="token comment">//                            >= Build.VERSION_CODES.P) &#123;</span></pre></td></tr><tr><td data-num="210"></td><td><pre><span class="token comment">//                        // Selection change will reposition the toolbar. Hide it for a few ms for a</span></pre></td></tr><tr><td data-num="211"></td><td><pre><span class="token comment">//                        // smoother transition.</span></pre></td></tr><tr><td data-num="212"></td><td><pre><span class="token comment">//                        widget.hideFloatingToolbar(HIDE_FLOATING_TOOLBAR_DELAY_MS);</span></pre></td></tr><tr><td data-num="213"></td><td><pre><span class="token comment">//                    &#125;</span></pre></td></tr><tr><td data-num="214"></td><td><pre>                    <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">setSelection</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="215"></td><td><pre>                            buffer<span class="token punctuation">.</span><span class="token function">getSpanStart</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="216"></td><td><pre>                            buffer<span class="token punctuation">.</span><span class="token function">getSpanEnd</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="217"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="218"></td><td><pre>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="219"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="220"></td><td><pre>                <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">removeSelection</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="222"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="223"></td><td><pre></pre></td></tr><tr><td data-num="224"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onTouchEvent</span><span class="token punctuation">(</span>widget<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="225"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="226"></td><td><pre></pre></td></tr><tr><td data-num="227"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="228"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> widget<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="229"></td><td><pre>        <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">removeSelection</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="230"></td><td><pre>        text<span class="token punctuation">.</span><span class="token function">removeSpan</span><span class="token punctuation">(</span><span class="token constant">FROM_BELOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="231"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="232"></td><td><pre></pre></td></tr><tr><td data-num="233"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="234"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTakeFocus</span><span class="token punctuation">(</span><span class="token class-name">TextView</span> view<span class="token punctuation">,</span> <span class="token class-name">Spannable</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> dir<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>        <span class="token class-name">Selection</span><span class="token punctuation">.</span><span class="token function">removeSelection</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre></pre></td></tr><tr><td data-num="237"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>dir <span class="token operator">&amp;</span> <span class="token class-name">View</span><span class="token punctuation">.</span><span class="token constant">FOCUS_BACKWARD</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>            text<span class="token punctuation">.</span><span class="token function">setSpan</span><span class="token punctuation">(</span><span class="token constant">FROM_BELOW</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Spannable</span><span class="token punctuation">.</span><span class="token constant">SPAN_POINT_POINT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="239"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="240"></td><td><pre>            text<span class="token punctuation">.</span><span class="token function">removeSpan</span><span class="token punctuation">(</span><span class="token constant">FROM_BELOW</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="243"></td><td><pre></pre></td></tr><tr><td data-num="244"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MovementMethod</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="245"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sInstance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="246"></td><td><pre>            sInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicChatMovementMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="247"></td><td><pre></pre></td></tr><tr><td data-num="248"></td><td><pre>        <span class="token keyword">return</span> sInstance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="249"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="250"></td><td><pre></pre></td></tr><tr><td data-num="251"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">PublicChatMovementMethod</span> sInstance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="252"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token constant">FROM_BELOW</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NoCopySpan<span class="token punctuation">.</span>Concrete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="253"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="支持gif播放的textview和span"><a class="anchor" href="#支持gif播放的textview和span">#</a> 支持 GIF 播放的 TextView 和 Span</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> SpanTextView <span class="token annotation builtin">@JvmOverloads</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    context<span class="token operator">:</span> Context<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    attrs<span class="token operator">:</span> AttributeSet<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    defStyle<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">TextView</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> defStyle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> hasSpanCallback <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> isSpanAttached <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> spanCallbacks<span class="token operator">:</span> Array<span class="token operator">&lt;</span>SpanCallback<span class="token operator">></span><span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAttachedToWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttachedToWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDetachedFromWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDetachedFromWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onStartTemporaryDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onStartTemporaryDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onFinishTemporaryDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onFinishTemporaryDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token operator">:</span> CharSequence<span class="token punctuation">,</span> type<span class="token operator">:</span> BufferType<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token comment">// 防止重复设置 text 导致 span 中反复调用生命周期方法</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            <span class="token keyword">return</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">val</span> wasSpanAttached <span class="token operator">=</span> isSpanAttached</pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSpanCallback <span class="token operator">&amp;&amp;</span> wasSpanAttached<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>text <span class="token keyword">is</span> Spanned<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>                spanCallbacks <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">getSpans</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> text<span class="token punctuation">.</span>length<span class="token punctuation">,</span> SpanCallback<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="46"></td><td><pre>                hasSpanCallback <span class="token operator">=</span> spanCallbacks<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="47"></td><td><pre>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> ArrayIndexOutOfBoundsException<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>                <span class="token comment">//</span></pre></td></tr><tr><td data-num="49"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>            spanCallbacks <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="52"></td><td><pre>            hasSpanCallback <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="53"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> type<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="55"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSpanCallback <span class="token operator">&amp;&amp;</span> wasSpanAttached<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>            <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="57"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="59"></td><td><pre></pre></td></tr><tr><td data-num="60"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        spanCallbacks<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>            it<span class="token punctuation">.</span><span class="token function">onAttach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="63"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        isSpanAttached <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        spanCallbacks<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            it<span class="token punctuation">.</span><span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        isSpanAttached <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="73"></td><td><pre></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token keyword">interface</span> SpanCallback <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">fun</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>textView<span class="token operator">:</span> TextView<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token keyword">fun</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="78"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token function">GIFImageSpan</span><span class="token punctuation">(</span>d<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">CustomImageSpan</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">,</span> SpanTextView<span class="token punctuation">.</span><span class="token function">SpanCallback</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">var</span> curDrawableCallback<span class="token operator">:</span> Drawable<span class="token punctuation">.</span>Callback<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAttach</span><span class="token punctuation">(</span>textView<span class="token operator">:</span> TextView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">val</span> textViewRef <span class="token operator">=</span> <span class="token function">WeakReference</span><span class="token punctuation">(</span>textView<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">(</span>drawable <span class="token keyword">as</span><span class="token operator">?</span> GifDrawable<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            curDrawableCallback <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Drawable<span class="token punctuation">.</span><span class="token function">Callback</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invalidateDrawable</span><span class="token punctuation">(</span>who<span class="token operator">:</span> Drawable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                    textViewRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">scheduleDrawable</span><span class="token punctuation">(</span>who<span class="token operator">:</span> Drawable<span class="token punctuation">,</span> what<span class="token operator">:</span> Runnable<span class="token punctuation">,</span> `<span class="token keyword">when</span>`<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>                <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">unscheduleDrawable</span><span class="token punctuation">(</span>who<span class="token operator">:</span> Drawable<span class="token punctuation">,</span> what<span class="token operator">:</span> Runnable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            drawable<span class="token punctuation">.</span>callback <span class="token operator">=</span> curDrawableCallback</pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDetach</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token punctuation">(</span>drawable <span class="token keyword">as</span><span class="token operator">?</span> GifDrawable<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>                <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        curDrawableCallback <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="支持上下偏移的span"><a class="anchor" href="#支持上下偏移的span">#</a> 支持上下偏移的 Span</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">VerticalOffsetSpan</span> <span class="token keyword">extends</span> <span class="token class-name">ReplacementSpan</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> offsetPx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> textSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">VerticalOffsetSpan</span><span class="token punctuation">(</span><span class="token keyword">int</span> textSize<span class="token punctuation">,</span> <span class="token keyword">int</span> offsetPx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>offsetPx <span class="token operator">=</span> offsetPx<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>textSize <span class="token operator">=</span> textSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSize</span><span class="token punctuation">(</span><span class="token class-name">Paint</span> paint<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token class-name">Paint<span class="token punctuation">.</span>FontMetricsInt</span> fm<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>textSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>paint<span class="token punctuation">.</span><span class="token function">measureText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Canvas</span> canvas<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> text<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                     <span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> bottom<span class="token punctuation">,</span> <span class="token class-name">Paint</span> paint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        paint<span class="token punctuation">.</span><span class="token function">setTextSize</span><span class="token punctuation">(</span>textSize<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        canvas<span class="token punctuation">.</span><span class="token function">drawText</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> offsetPx<span class="token punctuation">,</span> paint<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Span</tag>
      </tags>
  </entry>
  <entry>
    <title>PopUpWindow知识点</title>
    <url>/post/p8hxlm47.html</url>
    <content><![CDATA[<h2 id="popupwindow基础用法"><a class="anchor" href="#popupwindow基础用法">#</a> PopUpWindow 基础用法</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 继承 PopupWindow</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">class</span> <span class="token function">MyPopupWindow</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">PopupWindow</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    </pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">init</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token function">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        contentView <span class="token operator">=</span> view</pre></td></tr><tr><td data-num="7"></td><td><pre>        width <span class="token operator">=</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT</pre></td></tr><tr><td data-num="8"></td><td><pre>        height <span class="token operator">=</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>WRAP_CONTENT</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">fun</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token function">showAtLocation</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> Gravity<span class="token punctuation">.</span>CENTER<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><span id="more"></span></p>
<h4 id="问题1丢失contentview设置的宽度"><a class="anchor" href="#问题1丢失contentview设置的宽度">#</a> 问题 1：丢失 contentView 设置的宽度</h4>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//PopupWindow</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> void <span class="token function">preparePopup</span><span class="token punctuation">(</span>WindowManager<span class="token punctuation">.</span>LayoutParams p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mBackground <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 背景图不为空，将创建背景 View</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        mBackgroundView <span class="token operator">=</span> <span class="token function">createBackgroundView</span><span class="token punctuation">(</span>mContentView<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        mBackgroundView<span class="token punctuation">.</span><span class="token function">setBackground</span><span class="token punctuation">(</span>mBackground<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不设置背景图时，contentView 就是背景 View</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        mBackgroundView <span class="token operator">=</span> mContentView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    mDecorView <span class="token operator">=</span> <span class="token function">createDecorView</span><span class="token punctuation">(</span>mBackgroundView<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment">// 将 contentView 加入背景 ViewGroud 中</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">// 如果设置的 contentView 的高是 WRAP_CONTENT，将不改变 contentView 的高</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token comment">// 否则将 contentView 的高以 MATCH_PARENT 加入背景 ViewGroud 中</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 而宽度锁死为 MATCH_PARENT</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">private</span> PopupBackgroundView <span class="token function">createBackgroundView</span><span class="token punctuation">(</span>View contentView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token keyword">final</span> ViewGroup<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> mContentView<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">final</span> int height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutParams <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> layoutParams<span class="token punctuation">.</span>height <span class="token operator">==</span> WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        height <span class="token operator">=</span> WRAP_CONTENT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        height <span class="token operator">=</span> MATCH_PARENT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">final</span> PopupBackgroundView backgroundView <span class="token operator">=</span> new <span class="token function">PopupBackgroundView</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">final</span> PopupBackgroundView<span class="token punctuation">.</span>LayoutParams listParams <span class="token operator">=</span> new PopupBackgroundView<span class="token punctuation">.</span><span class="token function">LayoutParams</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        MATCH_PARENT<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    backgroundView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>contentView<span class="token punctuation">,</span> listParams<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token keyword">return</span> backgroundView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token comment">// 将背景 View 加入 DecorView 中</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 如果设置的 contentView 的高是 WRAP_CONTENT，背景 View 的高也是 WRAP_CONTENT</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">// 否则将背景 View 的高将以 MATCH_PARENT 加入背景 ViewGroud 中</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token comment">// 而背景 View 宽度锁死为 MATCH_PARENT</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token keyword">private</span> PopupDecorView <span class="token function">createDecorView</span><span class="token punctuation">(</span>View contentView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">final</span> ViewGroup<span class="token punctuation">.</span>LayoutParams layoutParams <span class="token operator">=</span> mContentView<span class="token punctuation">.</span><span class="token function">getLayoutParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token keyword">final</span> int height<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutParams <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> layoutParams<span class="token punctuation">.</span>height <span class="token operator">==</span> WRAP_CONTENT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        height <span class="token operator">=</span> WRAP_CONTENT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        height <span class="token operator">=</span> MATCH_PARENT<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token keyword">final</span> PopupDecorView decorView <span class="token operator">=</span> new <span class="token function">PopupDecorView</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    decorView<span class="token punctuation">.</span><span class="token function">addView</span><span class="token punctuation">(</span>contentView<span class="token punctuation">,</span> MATCH_PARENT<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    decorView<span class="token punctuation">.</span><span class="token function">setClipChildren</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    decorView<span class="token punctuation">.</span><span class="token function">setClipToPadding</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token keyword">return</span> decorView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token comment">//DecorView 将以设置 PopupWindow 的宽高加入 window 中</span></pre></td></tr></table></figure><p><strong>总结</strong></p>
<p>宽度：</p>
<ol>
<li>背景 View 宽度  MATCH_PARENT</li>
<li>contentView 宽度  MATCH_PARENT</li>
</ol>
<p>高度：</p>
<p>如果 contentView 高度 是  WRAP_CONTENT</p>
<ol>
<li>contentView 高度 是  WRAP_CONTENT</li>
<li>​     背景 View 高度 是  WRAP_CONTENT</li>
</ol>
<p>否则</p>
<ol>
<li>​    contentView 高度 是  MATCH_PARENT</li>
<li>​    背景 View 高度 是  MATCH_PARENT</li>
</ol>
<p><strong>由上面可以看出，contentView 宽度数据被完全丢失，因此如果 contentView 存在具体的宽度数据，必须挪到 PopupWindow 的宽度属性上</strong></p>
<h4 id="当popupwindow的宽度设置为wrap_content-而contentview的宽度锁死为match_parent那弹窗的宽度是什么呢"><a class="anchor" href="#当popupwindow的宽度设置为wrap_content-而contentview的宽度锁死为match_parent那弹窗的宽度是什么呢">#</a> 当 PopupWindow 的宽度设置为 WRAP_CONTENT ，而 contentView 的宽度锁死为 MATCH_PARENT，那弹窗的宽度是什么呢？</h4>
<p>做个实验便知道：PopupWindow 宽是 WRAP_CONTENT -》DecorView 的宽是 WRAP_CONTENT</p>
<p>FrameLayout 宽是 WRAP_CONTENT ，而它子 View（ConstraintLayout）是 MATCH_PARENT 时，子 View（ConstraintLayout）的宽度将是 WRAP_CONTENT 的形式展示。</p>
<h2 id="popupwindow如何全屏"><a class="anchor" href="#popupwindow如何全屏">#</a> PopupWindow 如何全屏</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">setBackgroundDrawable</span><span class="token punctuation">(</span><span class="token function">ColorDrawable</span><span class="token punctuation">(</span>Color<span class="token punctuation">.</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre>isFocusable <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// 为了支持返回键响应</span></pre></td></tr><tr><td data-num="3"></td><td><pre>isClippingEnabled <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">// 为了覆盖到状态栏</span></pre></td></tr><tr><td data-num="4"></td><td><pre>width <span class="token operator">=</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT</pre></td></tr><tr><td data-num="5"></td><td><pre>height <span class="token operator">=</span> ViewGroup<span class="token punctuation">.</span>LayoutParams<span class="token punctuation">.</span>MATCH_PARENT</pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>PopUpWindow</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView首次加载图片展示完成时机</title>
    <url>/post/94cfd8e0.html</url>
    <content><![CDATA[<p>突然接到一个需求，要知道一个 RecyclerView 刚打开时，第一次加载时屏幕上所有子 item 的封面图片下载完成的时机</p>
<p><span id="more"></span></p>
<h2 id="开始"><a class="anchor" href="#开始">#</a> 开始</h2>
<h3 id="1目前屏幕上recyclerview所有可见viewholder"><a class="anchor" href="#1目前屏幕上recyclerview所有可见viewholder">#</a> 1. 目前屏幕上 RecyclerView 所有可见 viewHolder</h3>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"><span>n</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> manager <span class="token operator">=</span>recyclerview<span class="token punctuation">.</span><span class="token function">layoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">val</span> first <span class="token operator">=</span> <span class="token function">findFirstVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">val</span> last <span class="token operator">=</span> <span class="token function">findLastVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> first<span class="token operator">..</span>last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">val</span> viewHolder <span class="token operator">=</span> recyclerView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">findViewHolderForAdapterPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> </pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="2图片下载完成时机glide"><a class="anchor" href="#2图片下载完成时机glide">#</a> 2. 图片下载完成时机（Glide）</h3>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"><span>n</span></figcaption><table><tr><td data-num="1"></td><td><pre>Glide<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span>coverView<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>cover<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">DrawableImageViewTarget</span><span class="token punctuation">(</span>coverView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token operator">:</span> Drawable<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 此时已完成图片展示</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h3 id="3最重要的是知道什么时候调用第一步获得recyclerview第一次加载完成后屏幕上所有可见viewholder"><a class="anchor" href="#3最重要的是知道什么时候调用第一步获得recyclerview第一次加载完成后屏幕上所有可见viewholder">#</a> 3. 最重要的是知道什么时候调用第一步，获得 Recyclerview 第一次加载完成后屏幕上所有可见 viewHolder</h3>
<h6 id="答案是-自定义gridlayoutmanager-重写onlayoutcompleted方法"><a class="anchor" href="#答案是-自定义gridlayoutmanager-重写onlayoutcompleted方法">#</a> 答案是 自定义 GridLayoutManager ，重写 onLayoutCompleted 方法</h6>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"><span>n</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token function">MyGridLayoutManager</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token operator">?</span><span class="token punctuation">,</span> spanSize<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">GridLayoutManager</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> spanSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token comment">// 是否已经是首次加载</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">var</span> isAlreadyRecordCover <span class="token operator">=</span> <span class="token boolean">false</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> recyclerView<span class="token operator">:</span> RecyclerView<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">var</span> coverUrls <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onAttachedToWindow</span><span class="token punctuation">(</span>view<span class="token operator">:</span> RecyclerView<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAttachedToWindow</span><span class="token punctuation">(</span>view<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        recyclerView <span class="token operator">=</span> view</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>	<span class="token comment">// 该方法被调用时，已完成布局，结合自定义变量 isAlreadyRecordCover，实现获得第一次加载的数据</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onLayoutCompleted</span><span class="token punctuation">(</span>state<span class="token operator">:</span> RecyclerView<span class="token punctuation">.</span>State<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onLayoutCompleted</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isAlreadyRecordCover<span class="token punctuation">)</span> <span class="token keyword">return</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">val</span> first <span class="token operator">=</span> <span class="token function">findFirstVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">val</span> last <span class="token operator">=</span> <span class="token function">findLastVisibleItemPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> last <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 不等于 - 1 才说明 Recyclerview 真的有数据</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            isAlreadyRecordCover <span class="token operator">=</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> first<span class="token operator">..</span>last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>                <span class="token keyword">val</span> viewHolder <span class="token operator">=</span> recyclerView<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">findViewHolderForAdapterPosition</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token comment">// 通过 viewHolder 获得并记录封面 url</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                coverUrls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="34"></td><td><pre>     * 步骤 2 的需要通知的方法</pre></td></tr><tr><td data-num="35"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token keyword">fun</span> <span class="token function">reportCoverShow</span><span class="token punctuation">(</span>cover<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>coverUrls<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>cover<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            coverUrls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cover<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>coverUrls<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                <span class="token comment">// 此时封面数据已全部展示</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>知道怎么实现后感觉挺简单的，较难的是想到解决思路</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>RecyclerView</tag>
        <tag>RecyclerView首次加载</tag>
      </tags>
  </entry>
  <entry>
    <title>SnapHelper知识点</title>
    <url>/post/f6744f64.html</url>
    <content><![CDATA[<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 快速滑动时触发</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSnapPosition</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityX<span class="token punctuation">,</span><span class="token keyword">int</span> velocityY<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment">// 缓慢滑动时触发  </span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">findSnapView</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span></pre></td></tr></table></figure><p><span id="more"></span></p>
<p><em>默认的 PagerSnapHelper 是通过内部的 findCenterView 方法找到距离 RecyclerView 中点最近的 View</em></p>
<p>但如果有需求需要一页一页滑动，但滑动到三分之一处就切换页面，那默认的 PagerSnapHelper 无法处理，它是滑动到二分之一才进行页面切换。这就需要我们自定义 PagerSnapHelper</p>
<h2 id="1自定义三分之一滑动的pagersnaphelper"><a class="anchor" href="#1自定义三分之一滑动的pagersnaphelper">#</a> 1. 自定义三分之一滑动的 PagerSnapHelper</h2>
<p>大部分都是复制默认的 PagerSnapHelper ，只需要改动 findCenterView 方法</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/*</pre></td></tr><tr><td data-num="2"></td><td><pre> * Copyright 2018 The Android Open Source Project</pre></td></tr><tr><td data-num="3"></td><td><pre> *</pre></td></tr><tr><td data-num="4"></td><td><pre> * Licensed under the Apache License, Version 2.0 (the "License");</pre></td></tr><tr><td data-num="5"></td><td><pre> * you may not use this file except in compliance with the License.</pre></td></tr><tr><td data-num="6"></td><td><pre> * You may obtain a copy of the License at</pre></td></tr><tr><td data-num="7"></td><td><pre> *</pre></td></tr><tr><td data-num="8"></td><td><pre> *      http://www.apache.org/licenses/LICENSE-2.0</pre></td></tr><tr><td data-num="9"></td><td><pre> *</pre></td></tr><tr><td data-num="10"></td><td><pre> * Unless required by applicable law or agreed to in writing, software</pre></td></tr><tr><td data-num="11"></td><td><pre> * distributed under the License is distributed on an "AS IS" BASIS,</pre></td></tr><tr><td data-num="12"></td><td><pre> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</pre></td></tr><tr><td data-num="13"></td><td><pre> * See the License for the specific language governing permissions and</pre></td></tr><tr><td data-num="14"></td><td><pre> * limitations under the License.</pre></td></tr><tr><td data-num="15"></td><td><pre> */</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lanshushui</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span></span><span class="token class-name">PointF</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">DisplayMetrics</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">View</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">android<span class="token punctuation">.</span>view<span class="token punctuation">.</span></span><span class="token class-name">ViewGroup</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>recyclerview<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">LinearSmoothScroller</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>recyclerview<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">OrientationHelper</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>recyclerview<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">RecyclerView</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">androidx<span class="token punctuation">.</span>recyclerview<span class="token punctuation">.</span>widget<span class="token punctuation">.</span></span><span class="token class-name">SnapHelper</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">tv<span class="token punctuation">.</span>athena<span class="token punctuation">.</span>util<span class="token punctuation">.</span>common<span class="token punctuation">.</span></span><span class="token class-name">ScreenUtils</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="34"></td><td><pre> * Implementation of the &#123;@link SnapHelper&#125; supporting pager style snapping in either vertical or</pre></td></tr><tr><td data-num="35"></td><td><pre> * horizontal orientation.</pre></td></tr><tr><td data-num="36"></td><td><pre> *</pre></td></tr><tr><td data-num="37"></td><td><pre> * &lt;p></pre></td></tr><tr><td data-num="38"></td><td><pre> * &lt;p></pre></td></tr><tr><td data-num="39"></td><td><pre> * PagerSnapHelper can help achieve a similar behavior to</pre></td></tr><tr><td data-num="40"></td><td><pre> * &#123;@link androidx.viewpager.widget.ViewPager&#125;. Set both &#123;@link RecyclerView&#125; and the items of the</pre></td></tr><tr><td data-num="41"></td><td><pre> * &#123;@link RecyclerView.Adapter&#125; to have</pre></td></tr><tr><td data-num="42"></td><td><pre> * &#123;@link android.view.ViewGroup.LayoutParams#MATCH_PARENT&#125; height and width and then attach</pre></td></tr><tr><td data-num="43"></td><td><pre> * PagerSnapHelper to the &#123;@link RecyclerView&#125; using &#123;@link #attachToRecyclerView(RecyclerView)&#125;.</pre></td></tr><tr><td data-num="44"></td><td><pre> */</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PagerSnapHelper</span> <span class="token keyword">extends</span> <span class="token class-name">SnapHelper</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_SCROLL_ON_FLING_DURATION</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// ms</span></pre></td></tr><tr><td data-num="47"></td><td><pre></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token comment">// Orientation helpers are lazily created per LayoutManager.</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">OrientationHelper</span> mVerticalHelper<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">OrientationHelper</span> mHorizontalHelper<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">RecyclerView</span> mRecyclerView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre></pre></td></tr><tr><td data-num="57"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RecyclerView</span> recyclerView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalStateException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">attachToRecyclerView</span><span class="token punctuation">(</span>recyclerView<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        mRecyclerView <span class="token operator">=</span> recyclerView<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="62"></td><td><pre></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="65"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">calculateDistanceToFinalSnap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="66"></td><td><pre>                                              <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> targetView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollHorizontally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>            out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">distanceToCenter</span><span class="token punctuation">(</span>targetView<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="70"></td><td><pre>                    <span class="token function">getHorizontalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>            out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="76"></td><td><pre>            out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">distanceToCenter</span><span class="token punctuation">(</span>targetView<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="77"></td><td><pre>                    <span class="token function">getVerticalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>            out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token keyword">return</span> out<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="83"></td><td><pre></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">View</span> <span class="token function">findSnapView</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">findCenterView</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> <span class="token function">getVerticalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollHorizontally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="90"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">findCenterView</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> <span class="token function">getHorizontalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="91"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="94"></td><td><pre></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSnapPosition</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityX<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="97"></td><td><pre>                                      <span class="token keyword">int</span> velocityY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="98"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> itemCount <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="99"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>itemCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="100"></td><td><pre>            <span class="token keyword">return</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">NO_POSITION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="102"></td><td><pre></pre></td></tr><tr><td data-num="103"></td><td><pre>        <span class="token keyword">final</span> <span class="token class-name">OrientationHelper</span> orientationHelper <span class="token operator">=</span> <span class="token function">getOrientationHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="104"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>orientationHelper <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="105"></td><td><pre>            <span class="token keyword">return</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">NO_POSITION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="106"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="107"></td><td><pre></pre></td></tr><tr><td data-num="108"></td><td><pre>        <span class="token comment">// A child that is exactly in the center is eligible for both before and after</span></pre></td></tr><tr><td data-num="109"></td><td><pre>        <span class="token class-name">View</span> closestChildBeforeCenter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="110"></td><td><pre>        <span class="token keyword">int</span> distanceBefore <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre>        <span class="token class-name">View</span> closestChildAfterCenter <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="112"></td><td><pre>        <span class="token keyword">int</span> distanceAfter <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="113"></td><td><pre></pre></td></tr><tr><td data-num="114"></td><td><pre>        <span class="token comment">// Find the first view before the center, and the first view after the center</span></pre></td></tr><tr><td data-num="115"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCount <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="116"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="117"></td><td><pre>            <span class="token keyword">final</span> <span class="token class-name">View</span> child <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="118"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="119"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="120"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="121"></td><td><pre>            <span class="token keyword">final</span> <span class="token keyword">int</span> distance <span class="token operator">=</span> <span class="token function">distanceToCenter</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> orientationHelper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="122"></td><td><pre></pre></td></tr><tr><td data-num="123"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> distance <span class="token operator">></span> distanceBefore<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="124"></td><td><pre>                <span class="token comment">// Child is before the center and closer then the previous best</span></pre></td></tr><tr><td data-num="125"></td><td><pre>                distanceBefore <span class="token operator">=</span> distance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="126"></td><td><pre>                closestChildBeforeCenter <span class="token operator">=</span> child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="127"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="128"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>distance <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> distance <span class="token operator">&lt;</span> distanceAfter<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="129"></td><td><pre>                <span class="token comment">// Child is after the center and closer then the previous best</span></pre></td></tr><tr><td data-num="130"></td><td><pre>                distanceAfter <span class="token operator">=</span> distance<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="131"></td><td><pre>                closestChildAfterCenter <span class="token operator">=</span> child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="132"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="133"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="134"></td><td><pre></pre></td></tr><tr><td data-num="135"></td><td><pre>        <span class="token comment">// Return the position of the first child from the center, in the direction of the fling</span></pre></td></tr><tr><td data-num="136"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> forwardDirection <span class="token operator">=</span> <span class="token function">isForwardFling</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">,</span> velocityX<span class="token punctuation">,</span> velocityY<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="137"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>forwardDirection <span class="token operator">&amp;&amp;</span> closestChildAfterCenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="138"></td><td><pre>            <span class="token keyword">return</span> layoutManager<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span>closestChildAfterCenter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="139"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forwardDirection <span class="token operator">&amp;&amp;</span> closestChildBeforeCenter <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="140"></td><td><pre>            <span class="token keyword">return</span> layoutManager<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span>closestChildBeforeCenter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="141"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="142"></td><td><pre></pre></td></tr><tr><td data-num="143"></td><td><pre>        <span class="token comment">// There is no child in the direction of the fling. Either it doesn't exist (start/end of</span></pre></td></tr><tr><td data-num="144"></td><td><pre>        <span class="token comment">// the list), or it is not yet attached (very rare case when children are larger then the</span></pre></td></tr><tr><td data-num="145"></td><td><pre>        <span class="token comment">// viewport). Extrapolate from the child that is visible to get the position of the view to</span></pre></td></tr><tr><td data-num="146"></td><td><pre>        <span class="token comment">// snap to.</span></pre></td></tr><tr><td data-num="147"></td><td><pre>        <span class="token class-name">View</span> visibleView <span class="token operator">=</span> forwardDirection <span class="token operator">?</span> closestChildBeforeCenter <span class="token operator">:</span> closestChildAfterCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="148"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visibleView <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="149"></td><td><pre>            <span class="token keyword">return</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">NO_POSITION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="150"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="151"></td><td><pre>        <span class="token keyword">int</span> visiblePosition <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span>visibleView<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="152"></td><td><pre>        <span class="token keyword">int</span> snapToPosition <span class="token operator">=</span> visiblePosition</pre></td></tr><tr><td data-num="153"></td><td><pre>                <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">isReverseLayout</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span> <span class="token operator">==</span> forwardDirection <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="154"></td><td><pre></pre></td></tr><tr><td data-num="155"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>snapToPosition <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> snapToPosition <span class="token operator">>=</span> itemCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="156"></td><td><pre>            <span class="token keyword">return</span> <span class="token class-name">RecyclerView</span><span class="token punctuation">.</span><span class="token constant">NO_POSITION</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="157"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="158"></td><td><pre>        <span class="token keyword">return</span> snapToPosition<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="159"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="160"></td><td><pre></pre></td></tr><tr><td data-num="161"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isForwardFling</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">,</span> <span class="token keyword">int</span> velocityX<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="162"></td><td><pre>                                   <span class="token keyword">int</span> velocityY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="163"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollHorizontally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="164"></td><td><pre>            <span class="token keyword">return</span> velocityX <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="165"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="166"></td><td><pre>            <span class="token keyword">return</span> velocityY <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="167"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="168"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="169"></td><td><pre></pre></td></tr><tr><td data-num="170"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isReverseLayout</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="171"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> itemCount <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="172"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>layoutManager <span class="token keyword">instanceof</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>SmoothScroller<span class="token punctuation">.</span>ScrollVectorProvider</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="173"></td><td><pre>            <span class="token class-name">RecyclerView<span class="token punctuation">.</span>SmoothScroller<span class="token punctuation">.</span>ScrollVectorProvider</span> vectorProvider <span class="token operator">=</span></pre></td></tr><tr><td data-num="174"></td><td><pre>                    <span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>SmoothScroller<span class="token punctuation">.</span>ScrollVectorProvider</span><span class="token punctuation">)</span> layoutManager<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="175"></td><td><pre>            <span class="token class-name">PointF</span> vectorForEnd <span class="token operator">=</span> vectorProvider<span class="token punctuation">.</span><span class="token function">computeScrollVectorForPosition</span><span class="token punctuation">(</span>itemCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="176"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>vectorForEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="177"></td><td><pre>                <span class="token keyword">return</span> vectorForEnd<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> vectorForEnd<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="178"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="179"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="180"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="181"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="182"></td><td><pre></pre></td></tr><tr><td data-num="183"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="184"></td><td><pre>    <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="185"></td><td><pre>    <span class="token keyword">protected</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>SmoothScroller</span> <span class="token function">createScroller</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="186"></td><td><pre>            <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="187"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>layoutManager <span class="token keyword">instanceof</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>SmoothScroller<span class="token punctuation">.</span>ScrollVectorProvider</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="188"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="189"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="190"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LinearSmoothScroller</span><span class="token punctuation">(</span><span class="token class-name">PagerSnapHelper</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="191"></td><td><pre></pre></td></tr><tr><td data-num="192"></td><td><pre>            <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> <span class="token constant">MILLISECONDS_PER_INCH</span> <span class="token operator">=</span> <span class="token number">25f</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="193"></td><td><pre></pre></td></tr><tr><td data-num="194"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="195"></td><td><pre>            <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onTargetFound</span><span class="token punctuation">(</span><span class="token class-name">View</span> targetView<span class="token punctuation">,</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span> <span class="token class-name">Action</span> action<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="196"></td><td><pre>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> snapDistances <span class="token operator">=</span> <span class="token function">calculateDistanceToFinalSnap</span><span class="token punctuation">(</span>mRecyclerView<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="197"></td><td><pre>                        targetView<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="198"></td><td><pre>                <span class="token keyword">final</span> <span class="token keyword">int</span> dx <span class="token operator">=</span> snapDistances<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="199"></td><td><pre>                <span class="token keyword">final</span> <span class="token keyword">int</span> dy <span class="token operator">=</span> snapDistances<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="200"></td><td><pre>                <span class="token keyword">final</span> <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token function">calculateTimeForDeceleration</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>dy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="201"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="202"></td><td><pre>                    action<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>dx<span class="token punctuation">,</span> dy<span class="token punctuation">,</span> time<span class="token punctuation">,</span> mDecelerateInterpolator<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="203"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="204"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="205"></td><td><pre></pre></td></tr><tr><td data-num="206"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="207"></td><td><pre>            <span class="token keyword">protected</span> <span class="token keyword">float</span> <span class="token function">calculateSpeedPerPixel</span><span class="token punctuation">(</span><span class="token class-name">DisplayMetrics</span> displayMetrics<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="208"></td><td><pre>                <span class="token keyword">return</span> <span class="token constant">MILLISECONDS_PER_INCH</span> <span class="token operator">/</span> displayMetrics<span class="token punctuation">.</span>densityDpi<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="209"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="210"></td><td><pre></pre></td></tr><tr><td data-num="211"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="212"></td><td><pre>            <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">calculateTimeForScrolling</span><span class="token punctuation">(</span><span class="token keyword">int</span> dx<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="213"></td><td><pre>                <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token constant">MAX_SCROLL_ON_FLING_DURATION</span><span class="token punctuation">,</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculateTimeForScrolling</span><span class="token punctuation">(</span>dx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="214"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="215"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="216"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="217"></td><td><pre></pre></td></tr><tr><td data-num="218"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">distanceToCenter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">View</span> targetView<span class="token punctuation">,</span> <span class="token class-name">OrientationHelper</span> helper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="219"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> childCenter <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getDecoratedStart</span><span class="token punctuation">(</span>targetView<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="220"></td><td><pre>                <span class="token operator">+</span> <span class="token punctuation">(</span>helper<span class="token punctuation">.</span><span class="token function">getDecoratedMeasurement</span><span class="token punctuation">(</span>targetView<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="221"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> containerCenter <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getStartAfterPadding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> helper<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="222"></td><td><pre>        <span class="token keyword">return</span> childCenter <span class="token operator">-</span> containerCenter<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="223"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="224"></td><td><pre></pre></td></tr><tr><td data-num="225"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="226"></td><td><pre>     * 找到将要展示的 View</pre></td></tr><tr><td data-num="227"></td><td><pre>     * 若无新 View 展示超过三分之一，则返回当前 View</pre></td></tr><tr><td data-num="228"></td><td><pre>     * 否则返回新加入的 View</pre></td></tr><tr><td data-num="229"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="230"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="231"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">View</span> <span class="token function">findCenterView</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">,</span></pre></td></tr><tr><td data-num="232"></td><td><pre>                                <span class="token class-name">OrientationHelper</span> helper<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="233"></td><td><pre>        <span class="token keyword">int</span> childCount <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getChildCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="234"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>childCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="235"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="236"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="237"></td><td><pre>        <span class="token class-name">View</span> <span class="token class-name">CurContainer</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="238"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> childCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="239"></td><td><pre>            <span class="token keyword">final</span> <span class="token class-name">View</span> child <span class="token operator">=</span> layoutManager<span class="token punctuation">.</span><span class="token function">getChildAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="240"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>child <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="241"></td><td><pre>                <span class="token keyword">continue</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="242"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="243"></td><td><pre>            <span class="token comment">//child view 是否是当前正在显示的 View</span></pre></td></tr><tr><td data-num="244"></td><td><pre>            <span class="token keyword">boolean</span> isCurContainer <span class="token operator">=</span> <span class="token function">isCurPage</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ViewGroup</span><span class="token punctuation">)</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="245"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCurContainer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="246"></td><td><pre>                <span class="token class-name">CurContainer</span> <span class="token operator">=</span> child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="247"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="248"></td><td><pre>            <span class="token keyword">int</span> maxHeight <span class="token operator">=</span> <span class="token class-name">ScreenUtils</span><span class="token punctuation">.</span><span class="token function">getScreenHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="249"></td><td><pre>            <span class="token keyword">int</span> maxScrollY <span class="token operator">=</span> maxHeight <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="250"></td><td><pre>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="251"></td><td><pre>            child<span class="token punctuation">.</span><span class="token function">getLocationInWindow</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="252"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isCurContainer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当前 View 是当前页</span></pre></td></tr><tr><td data-num="253"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> maxScrollY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 滑动幅度小于三分之一</span></pre></td></tr><tr><td data-num="254"></td><td><pre>                    <span class="token keyword">return</span> child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="255"></td><td><pre>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="256"></td><td><pre>                    <span class="token comment">// 存在新 View 滑动超过三分之一</span></pre></td></tr><tr><td data-num="257"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="258"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 当前 View 不是当前页</span></pre></td></tr><tr><td data-num="259"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>maxHeight <span class="token operator">-</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>out<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">>=</span> maxScrollY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 露出的部分超过三分之一</span></pre></td></tr><tr><td data-num="260"></td><td><pre>                    <span class="token keyword">return</span> child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="261"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="262"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="263"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="264"></td><td><pre>        <span class="token keyword">return</span> <span class="token class-name">CurContainer</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="265"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="266"></td><td><pre></pre></td></tr><tr><td data-num="267"></td><td><pre>    <span class="token annotation punctuation">@Nullable</span></pre></td></tr><tr><td data-num="268"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">OrientationHelper</span> <span class="token function">getOrientationHelper</span><span class="token punctuation">(</span><span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="269"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollVertically</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="270"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">getVerticalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="271"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>layoutManager<span class="token punctuation">.</span><span class="token function">canScrollHorizontally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="272"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">getHorizontalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="273"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="274"></td><td><pre>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="275"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="276"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="277"></td><td><pre></pre></td></tr><tr><td data-num="278"></td><td><pre>    <span class="token annotation punctuation">@NonNull</span></pre></td></tr><tr><td data-num="279"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">OrientationHelper</span> <span class="token function">getVerticalHelper</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="280"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mVerticalHelper <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> mVerticalHelper<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="281"></td><td><pre>            mVerticalHelper <span class="token operator">=</span> <span class="token class-name">OrientationHelper</span><span class="token punctuation">.</span><span class="token function">createVerticalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="282"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="283"></td><td><pre>        <span class="token keyword">return</span> mVerticalHelper<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="284"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="285"></td><td><pre></pre></td></tr><tr><td data-num="286"></td><td><pre>    <span class="token annotation punctuation">@NonNull</span></pre></td></tr><tr><td data-num="287"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">OrientationHelper</span> <span class="token function">getHorizontalHelper</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="288"></td><td><pre>            <span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>LayoutManager</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="289"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mHorizontalHelper <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> mHorizontalHelper<span class="token punctuation">.</span><span class="token function">getLayoutManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> layoutManager<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="290"></td><td><pre>            mHorizontalHelper <span class="token operator">=</span> <span class="token class-name">OrientationHelper</span><span class="token punctuation">.</span><span class="token function">createHorizontalHelper</span><span class="token punctuation">(</span>layoutManager<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="291"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="292"></td><td><pre>        <span class="token keyword">return</span> mHorizontalHelper<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="293"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="294"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SnapHelper</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewModel知识点</title>
    <url>/post/4500f14b.html</url>
    <content><![CDATA[<p>ViewModel 出现了调用 onCleared 方法 又马上被创建的情况</p>
<h2 id="1viewmodel的oncleared方法被调用时机"><a class="anchor" href="#1viewmodel的oncleared方法被调用时机">#</a> 1.ViewModel 的 onCleared 方法被调用时机</h2>
<p><span id="more"></span></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//FragmentStateManager</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// 清除 ViewModel</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>beingRemoved <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mFragment<span class="token punctuation">.</span>mBeingSaved<span class="token punctuation">)</span> <span class="token operator">||</span> shouldClear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        mFragmentStore<span class="token punctuation">.</span><span class="token function">getNonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clearNonConfigState</span><span class="token punctuation">(</span>mFragment<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    mFragment<span class="token punctuation">.</span><span class="token function">performDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment">//Fragment   </span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">void</span> <span class="token function">performDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">//</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    mChildFragmentManager<span class="token punctuation">.</span><span class="token function">dispatchDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    mLifecycleRegistry<span class="token punctuation">.</span><span class="token function">handleLifecycleEvent</span><span class="token punctuation">(</span><span class="token class-name">Lifecycle<span class="token punctuation">.</span>Event</span><span class="token punctuation">.</span><span class="token constant">ON_DESTROY</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    mState <span class="token operator">=</span> <span class="token constant">ATTACHED</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    mCalled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    mIsCreated <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mCalled<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SuperNotCalledException</span><span class="token punctuation">(</span><span class="token string">"Fragment "</span> <span class="token operator">+</span> <span class="token keyword">this</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                                          <span class="token operator">+</span> <span class="token string">" did not call through to super.onDestroy()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>可以看到调用顺序：</p>
<blockquote>
<p>1. 先清除 Fragment 自身的 ViewModel</p>
<p>2. 调用 Fragment 的 performDestroy</p>
<p>​    2.1. 调用 mChildFragmentManager 的 dispatchDestroy，递归走上面的逻辑</p>
<p>​    2.2 生命周期 LifecycleRegistry 的回调</p>
<p>​    2.3 调用 Frament 自身的 onDestroy 方法</p>
</blockquote>
<p><em>可以看出【ViewModel 的 onClear 方法】调用是快于【Fragment 的 onDestroy 方法】，所以不可以在 Fragment 的 onDestroy 中调用 viewmodel 变量，此时获得的 viewmodel 实例是新创建的，并不是之前持有的 viewmodel 变量。</em></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ViewModel</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewPager2知识点</title>
    <url>/post/5f633874.html</url>
    <content><![CDATA[<h2 id=""><a class="anchor" href="#">#</a> </h2>
<p>ViewPager2 的实现原理是 RecyclerView</p>
<p><span id="more"></span></p>
<p>offscreenPageLimit 参数的原理是增加 RecyclerView 的绘制区域   <strong>ViewPager2 内部 LinearLayoutManagerImpl 类</strong></p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">LinearLayoutManagerImpl</span> <span class="token keyword">extends</span> <span class="token class-name">LinearLayoutManager</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">LinearLayoutManagerImpl</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">calculateExtraLayoutSpace</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">RecyclerView<span class="token punctuation">.</span>State</span> state<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extraLayoutSpace<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> pageLimit <span class="token operator">=</span> <span class="token class-name">ViewPager2</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOffscreenPageLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pageLimit <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">calculateExtraLayoutSpace</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> extraLayoutSpace<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">int</span> offscreenSpace <span class="token operator">=</span> <span class="token class-name">ViewPager2</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPageSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> pageLimit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            extraLayoutSpace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> offscreenSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            extraLayoutSpace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> offscreenSpace<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ViewPager2</tag>
      </tags>
  </entry>
  <entry>
    <title>Systrace使用技巧</title>
    <url>/post/1c5b60a8.html</url>
    <content><![CDATA[<p><em>建议 Pyenv 进行 Python 的版本管理</em></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtKNDExUTdxdS8/c3BtX2lkX2Zyb209MzMzLjk5OS4wLjAmYW1wO3ZkX3NvdXJjZT1mMDJmOWQyYjZjYTM3MTA2MTFjNTEyMTk0MzI1ODZmYQ==">Perfetto 使用技巧</span></p>
<p>adb 命令： adb pull /data/local/traces</p>
<p><span id="more"></span></p>
<h2 id="1-systrace的使用-关于android-systrace的使用"><a class="anchor" href="#1-systrace的使用-关于android-systrace的使用">#</a> 1. Systrace 的使用    <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwNDk0MDU5L2FydGljbGUvZGV0YWlscy8xMjQ4MjYyODE=">关于 Android Systrace 的使用</span></h2>
<p><img data-src="/images/Systrace.png" alt="systrace" /></p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Systrace</tag>
      </tags>
  </entry>
  <entry>
    <title>协程Cancel知识点</title>
    <url>/post/a442dbbf.html</url>
    <content><![CDATA[<p>参考文档：<span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MTU4MDA4OTI4OTMwOTA2MTQ4I2hlYWRpbmctMA==">Kotlin 协程的取消机制超详细解读</span></p>
<p><span id="more"></span></p>
<p><em>协程被 cancel 后，只有在【运行前】或者【跑到挂起点】才会退出</em></p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">val</span> job<span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> <span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    MLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"协程测试"</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">"开始"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    MLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"协程测试"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"协程是否被cancel </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token expression"><span class="token operator">!</span>isActive</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    MLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"协程测试"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"协程还在跑"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    MLog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"协程测试"</span></span><span class="token punctuation">,</span><span class="token string-literal singleline"><span class="token string">"协程跑完了"</span></span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>对应的日志内容</p>
<pre><code>2023-07-03 10:45:21.397 12710-12776 协程测试                    com.sodo.live                        I  协程是否被cancel true
2023-07-03 10:45:21.398 12710-12776 协程测试                    com.sodo.live                        I  协程还在跑
</code></pre>
<p>代码的目的是在协程运行在 Thread.sleep (5000) 时，cancel 掉协程</p>
<p>看日志可以看出，协程虽然被 cancel 了，但还在跑，直到运行到挂起点，才退出协程</p>
<p>看参考文档可以知道，此时运行到 delay 代码时，抛出了 CancellationException 异常，导致协程结束</p>
<p>协程的调度线程和 cancel 代码执行线程是同一个时，一般不用太关注这一点，因为符合时序，调用 cancel 时，协程一定处于被调度前或者运行在挂起点。</p>
<p>但不在同一线程时，可能会出现协程运行在某一行时，调用 cancel 的场景，但协程此时并不会停止执行，会继续运行到挂起点，这可能就会出现问题</p>
<p>例如资源找不到，View 找不到</p>
<p>错误代码样例：</p>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> Activity  <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">var</span> job<span class="token operator">:</span>Job<span class="token operator">?</span><span class="token operator">=</span><span class="token keyword">null</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        job<span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> <span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">val</span> subView <span class="token operator">=</span>view<span class="token punctuation">.</span><span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>test<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            subView<span class="token punctuation">.</span><span class="token function">gone</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        job<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>概率不大，但也有可能出现崩溃。findViewById 过程中，Activity 被 Destroy 了，找不到 View 出现崩溃</p>
<p>虽然 onDestroy 方法中协程被 cancel 了，但协程还是会继续执行 delay 之前的代码</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>协程</tag>
      </tags>
  </entry>
  <entry>
    <title>启动优化想法</title>
    <url>/post/6af44e8.html</url>
    <content><![CDATA[<p>一些小想法</p>
<p><span id="more"></span></p>
<h2 id="1-所需sdk多线程初始化"><a class="anchor" href="#1-所需sdk多线程初始化">#</a> 1、所需 SDK 多线程初始化</h2>
<h2 id="2-首页数据预拉取"><a class="anchor" href="#2-首页数据预拉取">#</a> 2. 首页数据预拉取</h2>
<h2 id="3-首页豆腐块view预inflate"><a class="anchor" href="#3-首页豆腐块view预inflate">#</a> 3. 首页豆腐块 View 预 Inflate</h2>
<p>在首页 setContentView 之前异步 inflate View</p>
<p>使用 AsyncLayoutInflater + SimplePool 技术</p>
<h2 id="4-预连接图片域名的tcp"><a class="anchor" href="#4-预连接图片域名的tcp">#</a> 4. 预连接图片域名的 TCP</h2>
<p>Glide 接入 OKHttp 后，域名不支持 Http2.0 的情况下，默认最多支持 5 个相同域名的并发 TCP 连接。图片域名一般是固定的，我们可以在 APP 启动时使用 Glide 预加载 5 个该域名图片。</p>
<p>甚至不需要图片 url，把域名直接抛给 Glide 也行，虽然会解析成图片失败，但我们的目的只是建立 TCP 连接，所以 Http 的失败并没有关系。</p>
<p>提前使用 Glide 加载网络图片，也提前了 Glide 相关初始化和线程池的创建。</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>启动优化</tag>
      </tags>
  </entry>
  <entry>
    <title>小知识点</title>
    <url>/post/89f567a5.html</url>
    <content><![CDATA[<p>小知识点</p>
<p><span id="more"></span></p>
<h2 id="1span"><a class="anchor" href="#1span">#</a> 1.Span</h2>
<p><strong>ReplacementSpan</strong></p>
<h2 id="2substring可能会把两个字符的emoji分开导致显示无法显示的字符"><a class="anchor" href="#2substring可能会把两个字符的emoji分开导致显示无法显示的字符">#</a> 2.substring 可能会把两个字符的 emoji 分开，导致显示无法显示的？字符。</h2>
<p>判断边界字符是否是 Unicode 代理项代码单元，substring 时进行位置偏移</p>
<pre><code>Character.isLowSurrogate()

Character.isHighSurrogate()
</code></pre>
<h2 id="2onsaveinstancestate-onstop"><a class="anchor" href="#2onsaveinstancestate-onstop">#</a> 2.onSaveInstanceState-onStop</h2>
<p>下拉状态栏： onSaveInstanceState ，onPause，onStop 都不会调用</p>
<p>按 Home： onPause --onStop--onSaveInstanceState 都会被调用</p>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//ActivityThread 类</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">callActivityOnStop</span><span class="token punctuation">(</span><span class="token class-name">ActivityClientRecord</span> r<span class="token punctuation">,</span> <span class="token keyword">boolean</span> saveState<span class="token punctuation">,</span> <span class="token class-name">String</span> reason<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token comment">// Before P onSaveInstanceState was called before onStop, P 是安卓 9.0 版本</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">//starting with P it's called after.    Before Honeycomb state was always saved before onPause.</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> shouldSaveState <span class="token operator">=</span> saveState <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span>mFinished <span class="token operator">&amp;&amp;</span> r<span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token keyword">null</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">isPreHoneycomb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">final</span> <span class="token keyword">boolean</span> isPreP <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">isPreP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldSaveState <span class="token operator">&amp;&amp;</span> isPreP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        r<span class="token punctuation">.</span>activity<span class="token punctuation">.</span><span class="token function">performStop</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>mPreserveWindow<span class="token punctuation">,</span> reason<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SuperNotCalledException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">throw</span> e<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mInstrumentation<span class="token punctuation">.</span><span class="token function">onException</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>activity<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token string">"Unable to stop activity "</span></pre></td></tr><tr><td data-num="20"></td><td><pre>                <span class="token operator">+</span> r<span class="token punctuation">.</span>intent<span class="token punctuation">.</span><span class="token function">getComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toShortString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>                <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    r<span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token constant">ON_STOP</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldSaveState <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>isPreP<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token function">callActivityOnSaveInstanceState</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>安卓 9.0 版本前 onSaveInstanceState 在 onStop 前被调用，安卓 9.0 版本前 onSaveInstanceState 在 onStop 后被调用</p>
<p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>使用提醒</tag>
      </tags>
  </entry>
  <entry>
    <title>崩溃知识点</title>
    <url>/post/30488343.html</url>
    <content><![CDATA[<p>一个 java 层捕捉崩溃的写法</p>
<p><span id="more"></span></p>
<h2 id="手动进行消息的loop并捕捉异常"><a class="anchor" href="#手动进行消息的loop并捕捉异常">#</a> 手动进行消息的 loop，并捕捉异常</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> static void <span class="token function">startCatchLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    new <span class="token function">Handler</span><span class="token punctuation">(</span>Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token function">loopInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">private</span> static void <span class="token function">loopInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Throwable e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            Message message <span class="token operator">=</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token comment">// 如果忽略该异常，则直接 return，否则继续抛出 Throwable</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">catch</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>                <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="获得当前执行的message"><a class="anchor" href="#获得当前执行的message">#</a> 获得当前执行的 Message</h2>
<figure class="highlight kotlin"><figcaption data-lang="kotlin"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">private</span> static Message <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    MessageQueue messageQueue<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    Looper mainLooper <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Build<span class="token punctuation">.</span>VERSION<span class="token punctuation">.</span>SDK_INT <span class="token operator">>=</span> <span class="token number">23</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            messageQueue <span class="token operator">=</span> mainLooper<span class="token punctuation">.</span><span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            Field fieldQueue <span class="token operator">=</span> Looper<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"mQueue"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            fieldQueue<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            messageQueue <span class="token operator">=</span> <span class="token punctuation">(</span>MessageQueue<span class="token punctuation">)</span> fieldQueue<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mainLooper<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        Field fieldMessages <span class="token operator">=</span> MessageQueue<span class="token punctuation">.</span>class<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">"mMessages"</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        fieldMessages<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> <span class="token punctuation">(</span>Message<span class="token punctuation">)</span> fieldMessages<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>messageQueue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>Throwable ignored<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">//</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>崩溃</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型知识点</title>
    <url>/post/71d175cf.html</url>
    <content><![CDATA[<p><span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC83MDIyNTgxNTIzMDQ4MDM4NDA4">“界限” 带来的灵活性 —— Java 泛型的上下界</span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jZTliMDkzZjY5Njc=">Kotlin 范型之泛型约束、类型投影、星号投影</span></p>
<p><span id="more"></span></p>
<h2 id="1上界-extend-out-下界super-in"><a class="anchor" href="#1上界-extend-out-下界super-in">#</a> 1. 上界: Extend（ out ）  下界：Super (in)</h2>
<blockquote>
<p>extend（ out ） ------------------  只能取，不能存</p>
</blockquote>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Apple</span><span class="token punctuation">></span></span> appleList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    appleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    appleList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>	<span class="token comment">// 如果能存 Fruit 的子类 ，万一你存的是 banana ，appleList.get () 方法就崩溃了</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span><span class="token punctuation">></span></span> plate <span class="token operator">=</span> appleList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">Fruit</span> fruit <span class="token operator">=</span> plate<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><blockquote>
<p><em>super (in)          ------------------  只能存，不能取（其实也能取，取到的都是 Object）</em></p>
</blockquote>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Fruit</span><span class="token punctuation">></span></span> fruitList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    fruitList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    fruitList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">//fruitList 里面存着 Banana，applePlate 调用 get 方法，编译器也不知道返回你什么，是返回 Apple 类还是 Banana 类</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Apple</span><span class="token punctuation">></span></span> applePlate <span class="token operator">=</span> fruitList<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    applePlate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    applePlate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    applePlate<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GreenApple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>别搞蒙了 super 不是指能存入 Apple 的父类，是指能存入 Apple 的子类。这和重写父类方法的 super 不一样。</strong></p>
<h2 id="2-java-语言中数组是协变的泛型不是协变的"><a class="anchor" href="#2-java-语言中数组是协变的泛型不是协变的">#</a> 2. Java 语言中，数组是协变的，泛型不是协变的</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token class-name">Number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d<span class="token operator">=</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">// 上面的代码是支持的</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment">// 下面的代码是不允许的</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> c<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span> d<span class="token operator">=</span>c<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h2 id="3各个场景"><a class="anchor" href="#3各个场景">#</a> 3. 各个场景</h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">// 类场景</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    </pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    </pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&lt;</span><span class="token class-name">T</span> ：<span class="token class-name">Activity</span><span class="token operator">></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    </pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token comment">// 不允许的代码</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">super</span> <span class="token class-name">Activity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token comment">// 不允许的代码</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Activity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    </pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment">// 不允许的代码</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Activity</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Source</span><span class="token generics"><span class="token punctuation">&lt;</span>out <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token keyword">abstract</span> fun <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">T</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="33"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span>in <span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token keyword">abstract</span> fun <span class="token function">func</span><span class="token punctuation">(</span>t<span class="token operator">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="35"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></pre></td></tr><tr><td data-num="38"></td><td><pre><span class="token comment">// 变量场景</span></pre></td></tr><tr><td data-num="39"></td><td><pre></pre></td></tr><tr><td data-num="40"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>val list<span class="token operator">:</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>out <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="45"></td><td><pre><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>val list<span class="token operator">:</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>in <span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    </pre></td></tr><tr><td data-num="48"></td><td><pre><span class="token comment">// 允许的代码</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>val list<span class="token operator">:</span><span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    </pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token comment">// 不允许的代码</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token class-name">ArrayList</span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token class-name">ArrayList</span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span>out <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>【?】<strong>【? extends XXX】  和   【? super XXX】只能用在变量引用的泛型上</strong></p>
<h2 id="4无界类型通配符-kotlin-使用星号投影"><a class="anchor" href="#4无界类型通配符-kotlin-使用星号投影">#</a> 4. 无界类型通配符 <code>?</code> , Kotlin 使用星号投影 <code>*</code></h2>
<figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">//java    ? 相当于？extend Object   只能 get 不能 set</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Object</span> a<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">//kotlin     * 相当于 out Any?   只能 get 不能 set</span></pre></td></tr><tr><td data-num="5"></td><td><pre>val list<span class="token operator">:</span><span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>val any<span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>Keep Moving Forward</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>泛型</tag>
      </tags>
  </entry>
</search>
